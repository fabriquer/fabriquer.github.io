<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
  <Token>
    <TokenIdentifier>
      <Name>VISIT</Name>
      <APILanguage>c</APILanguage>
      <Type>macro</Type>
    </TokenIdentifier>
    <Path>_a_s_t_2_visitor_8h.html</Path>
    <Anchor>adfe777bc932a304bd9acf6b07e60c02f</Anchor>
    <Abstract>Define entry (which returns true to continue descent) and exit methods. </Abstract>
    <DeclaredIn>Visitor.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>VISIT</Name>
      <APILanguage>c</APILanguage>
      <Type>macro</Type>
    </TokenIdentifier>
    <Path>_a_s_t_2_visitor_8h.html</Path>
    <Anchor>adfe777bc932a304bd9acf6b07e60c02f</Anchor>
    <Abstract>Define entry (which returns true to continue descent) and exit methods. </Abstract>
    <DeclaredIn>Visitor.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>yyparse</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>_parsing_2_parser_8cc.html</Path>
    <Anchor>a90ca5a64e526b0515ece5e2bd159829c</Anchor>
    <Abstract>This is the parsing function generated by yacc. </Abstract>
    <DeclaredIn>Parser.cc</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SetOpt</Name>
      <APILanguage>c</APILanguage>
      <Type>econst</Type>
    </TokenIdentifier>
    <Path>_arguments_8cc.html</Path>
    <Anchor>af8555267f1341e7cf41570efaa369209a48df42b5b79c217e02e9eb2a3d4981b4</Anchor>
    <Abstract>Set an optional value. </Abstract>
    <DeclaredIn>Arguments.cc</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AppendOpt</Name>
      <APILanguage>c</APILanguage>
      <Type>econst</Type>
    </TokenIdentifier>
    <Path>_arguments_8cc.html</Path>
    <Anchor>af8555267f1341e7cf41570efaa369209a9050745574f15d86f0ab7db338945c74</Anchor>
    <Abstract>Append an optional value to an ordered list. </Abstract>
    <DeclaredIn>Arguments.cc</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Enable</Name>
      <APILanguage>c</APILanguage>
      <Type>econst</Type>
    </TokenIdentifier>
    <Path>_arguments_8cc.html</Path>
    <Anchor>af8555267f1341e7cf41570efaa369209a80cb2080e90221d1f5b425387d9bd030</Anchor>
    <Abstract>Turn on a boolean value. </Abstract>
    <DeclaredIn>Arguments.cc</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Disable</Name>
      <APILanguage>c</APILanguage>
      <Type>econst</Type>
    </TokenIdentifier>
    <Path>_arguments_8cc.html</Path>
    <Anchor>af8555267f1341e7cf41570efaa369209a9f306dd8981a103d6827f8b4e80da8aa</Anchor>
    <Abstract>Turn off a boolean value. </Abstract>
    <DeclaredIn>Arguments.cc</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>OtherOpt</Name>
      <APILanguage>c</APILanguage>
      <Type>econst</Type>
    </TokenIdentifier>
    <Path>_arguments_8cc.html</Path>
    <Anchor>af8555267f1341e7cf41570efaa369209a8ee6ddd8b3402c307a14649c2be441cd</Anchor>
    <Abstract>Do something else (e.g., usage description.) </Abstract>
    <DeclaredIn>Arguments.cc</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>CheckArg</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>option</Scope>
    </TokenIdentifier>
    <Path>namespaceoption.html</Path>
    <Anchor>a4afb7f04597f34439679509baf4b6d39</Anchor>
    <Abstract>Signature of functions that check if an argument is valid for a certain type of option. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>printUsage</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>option</Scope>
    </TokenIdentifier>
    <Path>namespaceoption.html</Path>
    <Anchor>afc8bb7e040a98a0b33ff1ce9da1be0d1</Anchor>
    <Abstract>Outputs a nicely formatted usage string with support for multi-column formatting and line-wrapping...</Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>md_Artwork_credits</Name>
      <APILanguage>markdown</APILanguage>
    </TokenIdentifier>
    <Path>md__artwork_credits.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>todo</Name>
      <APILanguage>unknown</APILanguage>
    </TokenIdentifier>
    <Path>todo.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DebugState</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>DebugState</Scope>
    </TokenIdentifier>
    <Path>class_debug_state.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DotFormatter</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>DotFormatter</Scope>
    </TokenIdentifier>
    <Path>class_dot_formatter.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NinjaFormatter</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>NinjaFormatter</Scope>
    </TokenIdentifier>
    <Path>class_ninja_formatter.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>yy_buffer_state</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>yy_buffer_state</Scope>
    </TokenIdentifier>
    <Path>structyy__buffer__state.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>yy_bs_lineno</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>yy_buffer_state</Scope>
    </TokenIdentifier>
    <Path>structyy__buffer__state.html</Path>
    <Anchor>a818e94bc9c766e683c60df1e9fd01199</Anchor>
    <Abstract>The line count. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>yy_bs_column</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>yy_buffer_state</Scope>
    </TokenIdentifier>
    <Path>structyy__buffer__state.html</Path>
    <Anchor>a10c4fcd8be759e6bf11e6d3e8cdb0307</Anchor>
    <Abstract>The column count. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>yy_trans_info</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>yy_trans_info</Scope>
    </TokenIdentifier>
    <Path>structyy__trans__info.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>YYSTACKDATA</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>YYSTACKDATA</Scope>
    </TokenIdentifier>
    <Path>struct_y_y_s_t_a_c_k_d_a_t_a.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>YYSTYPE</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>YYSTYPE</Scope>
    </TokenIdentifier>
    <Path>union_y_y_s_t_y_p_e.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AST</Name>
      <APILanguage>c</APILanguage>
      <Type>ns</Type>
      <Scope>AST</Scope>
    </TokenIdentifier>
    <Path>namespace_a_s_t.html</Path>
    <Abstract>The AST namespace contains the abstract syntax tree for this grammar. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AST::AddExpression</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>AST::AddExpression</Scope>
    </TokenIdentifier>
    <Path>class_a_s_t_1_1_add_expression.html</Path>
    <Abstract>Add expression node. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>eval</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AST::AddExpression</Scope>
    </TokenIdentifier>
    <Path>class_a_s_t_1_1_add_expression.html</Path>
    <Anchor>a695de7e1a4ba2620d154f1ebbc8546ad</Anchor>
    <Abstract>Evaluate this expression. </Abstract>
    <DeclaredIn>calculator.cc</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>print</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AST::AddExpression</Scope>
    </TokenIdentifier>
    <Path>class_a_s_t_1_1_add_expression.html</Path>
    <Anchor>a176c6ca862e71032e915656e2306d7fa</Anchor>
    <Abstract>Print the node, at the specified indent depth. </Abstract>
    <DeclaredIn>calculator.cc</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ASTContainer</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTContainer</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_container.html</Path>
    <Anchor>ae4e20ffce125dcea4cadd7f9bf94480d</Anchor>
    <Abstract>Constructs the container, setting a thread-local value to point to it allowing constructors in fields...</Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>construct</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTContainer</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_container.html</Path>
    <Anchor>aabb870b5cd14d74763e02230654d70b2</Anchor>
    <Abstract>Asks all members to construct themselves from the stack. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ASTNode</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTNode</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_node.html</Path>
    <Anchor>a9cfd880bd72900af6a9a050b6673653e</Anchor>
    <Abstract>Constructs the AST node, with a null parent. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ASTNode</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTNode</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_node.html</Path>
    <Anchor>a598362d64b01bc8266a8eac9341f6946</Anchor>
    <Abstract>Copying AST nodes is not supported. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~ASTNode</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTNode</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_node.html</Path>
    <Anchor>ae23a27b167341bfdd13ce781278074ac</Anchor>
    <Abstract>Destructor does nothing, virtual for subclasses to use. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>parent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTNode</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_node.html</Path>
    <Anchor>a405356e07d478dff3cb0a06681314dab</Anchor>
    <Abstract>Returns the parent of this AST node, or nullptr if there isn&amp;#39;t one (either if this is the root...</Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isa</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTNode</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_node.html</Path>
    <Anchor>aa837bc937c493e7dd4f067e34644c46b</Anchor>
    <Abstract>Root implementation of the RTTI-replacement for builds not wishing to use RTTI. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isa</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTNode</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_node.html</Path>
    <Anchor>a87ce42e787d1dbcceb8d9dfd5e18926c</Anchor>
    <Abstract>Returns true if this object is an instance of T. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_as</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTNode</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_node.html</Path>
    <Anchor>a392371c883f30b06fb70486fd209f778</Anchor>
    <Abstract>Returns a pointer to this object as a pointer to a child class, or nullptr if the cast would be unsaf...</Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>kind</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTNode</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_node.html</Path>
    <Anchor>a1e7fe53f436deccc338c2de2b65bed74</Anchor>
    <Abstract>Returns the kind of object class. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>classKind</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>pegmatite::ASTNode</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_node.html</Path>
    <Anchor>a99aaa8936ff1a0f3f3cf9a9b8a4c124a</Anchor>
    <Abstract>Returns the unique identifier for this class. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>left</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>AST::BinaryExpression</Scope>
    </TokenIdentifier>
    <Path>class_a_s_t_1_1_binary_expression.html</Path>
    <Anchor>ac8729f901b6e9d0f8cd4f450d6f7339a</Anchor>
    <Abstract>The pointers to the left and right nodes. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AST::BinaryExpression</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>AST::BinaryExpression</Scope>
    </TokenIdentifier>
    <Path>class_a_s_t_1_1_binary_expression.html</Path>
    <Abstract>Superclass for all of the binary expressions. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>print</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AST::BinaryExpression</Scope>
    </TokenIdentifier>
    <Path>class_a_s_t_1_1_binary_expression.html</Path>
    <Anchor>a147309550ce96e11a3f1e8457ad88757</Anchor>
    <Abstract>Print the node, at the specified indent depth. </Abstract>
    <DeclaredIn>calculator.cc</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>eval</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AST::Expression</Scope>
    </TokenIdentifier>
    <Path>class_a_s_t_1_1_expression.html</Path>
    <Anchor>a5606606c2c54b275a677c010581c83ac</Anchor>
    <Abstract>Evaluate this expression. </Abstract>
    <DeclaredIn>calculator.cc</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ASTContainer</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTContainer</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_container.html</Path>
    <Anchor>ae4e20ffce125dcea4cadd7f9bf94480d</Anchor>
    <Abstract>Constructs the container, setting a thread-local value to point to it allowing constructors in fields...</Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>construct</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTContainer</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_container.html</Path>
    <Anchor>aabb870b5cd14d74763e02230654d70b2</Anchor>
    <Abstract>Asks all members to construct themselves from the stack. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ASTNode</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTNode</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_node.html</Path>
    <Anchor>a9cfd880bd72900af6a9a050b6673653e</Anchor>
    <Abstract>Constructs the AST node, with a null parent. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ASTNode</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTNode</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_node.html</Path>
    <Anchor>a598362d64b01bc8266a8eac9341f6946</Anchor>
    <Abstract>Copying AST nodes is not supported. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~ASTNode</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTNode</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_node.html</Path>
    <Anchor>ae23a27b167341bfdd13ce781278074ac</Anchor>
    <Abstract>Destructor does nothing, virtual for subclasses to use. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>parent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTNode</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_node.html</Path>
    <Anchor>a405356e07d478dff3cb0a06681314dab</Anchor>
    <Abstract>Returns the parent of this AST node, or nullptr if there isn&amp;#39;t one (either if this is the root...</Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isa</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTNode</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_node.html</Path>
    <Anchor>aa837bc937c493e7dd4f067e34644c46b</Anchor>
    <Abstract>Root implementation of the RTTI-replacement for builds not wishing to use RTTI. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isa</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTNode</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_node.html</Path>
    <Anchor>a87ce42e787d1dbcceb8d9dfd5e18926c</Anchor>
    <Abstract>Returns true if this object is an instance of T. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_as</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTNode</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_node.html</Path>
    <Anchor>a392371c883f30b06fb70486fd209f778</Anchor>
    <Abstract>Returns a pointer to this object as a pointer to a child class, or nullptr if the cast would be unsaf...</Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>left</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>AST::BinaryExpression</Scope>
    </TokenIdentifier>
    <Path>class_a_s_t_1_1_binary_expression.html</Path>
    <Anchor>ac8729f901b6e9d0f8cd4f450d6f7339a</Anchor>
    <Abstract>The pointers to the left and right nodes. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>kind</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTNode</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_node.html</Path>
    <Anchor>a1e7fe53f436deccc338c2de2b65bed74</Anchor>
    <Abstract>Returns the kind of object class. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>classKind</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>pegmatite::ASTNode</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_node.html</Path>
    <Anchor>a99aaa8936ff1a0f3f3cf9a9b8a4c124a</Anchor>
    <Abstract>Returns the unique identifier for this class. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AST::DivideExpression</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>AST::DivideExpression</Scope>
    </TokenIdentifier>
    <Path>class_a_s_t_1_1_divide_expression.html</Path>
    <Abstract>Divide expression node. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>eval</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AST::DivideExpression</Scope>
    </TokenIdentifier>
    <Path>class_a_s_t_1_1_divide_expression.html</Path>
    <Anchor>a7dbb21e406d8e4fba89e5719d5168870</Anchor>
    <Abstract>Evaluate this expression. </Abstract>
    <DeclaredIn>calculator.cc</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>print</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AST::DivideExpression</Scope>
    </TokenIdentifier>
    <Path>class_a_s_t_1_1_divide_expression.html</Path>
    <Anchor>a51c7850dceb9263d638707cc8f797212</Anchor>
    <Abstract>Print the node, at the specified indent depth. </Abstract>
    <DeclaredIn>calculator.cc</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ASTContainer</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTContainer</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_container.html</Path>
    <Anchor>ae4e20ffce125dcea4cadd7f9bf94480d</Anchor>
    <Abstract>Constructs the container, setting a thread-local value to point to it allowing constructors in fields...</Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>construct</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTContainer</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_container.html</Path>
    <Anchor>aabb870b5cd14d74763e02230654d70b2</Anchor>
    <Abstract>Asks all members to construct themselves from the stack. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ASTNode</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTNode</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_node.html</Path>
    <Anchor>a9cfd880bd72900af6a9a050b6673653e</Anchor>
    <Abstract>Constructs the AST node, with a null parent. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ASTNode</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTNode</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_node.html</Path>
    <Anchor>a598362d64b01bc8266a8eac9341f6946</Anchor>
    <Abstract>Copying AST nodes is not supported. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~ASTNode</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTNode</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_node.html</Path>
    <Anchor>ae23a27b167341bfdd13ce781278074ac</Anchor>
    <Abstract>Destructor does nothing, virtual for subclasses to use. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>parent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTNode</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_node.html</Path>
    <Anchor>a405356e07d478dff3cb0a06681314dab</Anchor>
    <Abstract>Returns the parent of this AST node, or nullptr if there isn&amp;#39;t one (either if this is the root...</Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isa</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTNode</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_node.html</Path>
    <Anchor>aa837bc937c493e7dd4f067e34644c46b</Anchor>
    <Abstract>Root implementation of the RTTI-replacement for builds not wishing to use RTTI. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isa</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTNode</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_node.html</Path>
    <Anchor>a87ce42e787d1dbcceb8d9dfd5e18926c</Anchor>
    <Abstract>Returns true if this object is an instance of T. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_as</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTNode</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_node.html</Path>
    <Anchor>a392371c883f30b06fb70486fd209f778</Anchor>
    <Abstract>Returns a pointer to this object as a pointer to a child class, or nullptr if the cast would be unsaf...</Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>kind</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTNode</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_node.html</Path>
    <Anchor>a1e7fe53f436deccc338c2de2b65bed74</Anchor>
    <Abstract>Returns the kind of object class. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>classKind</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>pegmatite::ASTNode</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_node.html</Path>
    <Anchor>a99aaa8936ff1a0f3f3cf9a9b8a4c124a</Anchor>
    <Abstract>Returns the unique identifier for this class. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>left</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>AST::BinaryExpression</Scope>
    </TokenIdentifier>
    <Path>class_a_s_t_1_1_binary_expression.html</Path>
    <Anchor>ac8729f901b6e9d0f8cd4f450d6f7339a</Anchor>
    <Abstract>The pointers to the left and right nodes. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AST::Expression</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>AST::Expression</Scope>
    </TokenIdentifier>
    <Path>class_a_s_t_1_1_expression.html</Path>
    <Abstract>The base class for expressions in our language. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>eval</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AST::Expression</Scope>
    </TokenIdentifier>
    <Path>class_a_s_t_1_1_expression.html</Path>
    <Anchor>a5606606c2c54b275a677c010581c83ac</Anchor>
    <Abstract>Evaluate this expression. </Abstract>
    <DeclaredIn>calculator.cc</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>print</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AST::Expression</Scope>
    </TokenIdentifier>
    <Path>class_a_s_t_1_1_expression.html</Path>
    <Anchor>ab71ce83617ca372efbc281a7b7c705f2</Anchor>
    <Abstract>Print the node, at the specified indent depth. </Abstract>
    <DeclaredIn>calculator.cc</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ASTContainer</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTContainer</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_container.html</Path>
    <Anchor>ae4e20ffce125dcea4cadd7f9bf94480d</Anchor>
    <Abstract>Constructs the container, setting a thread-local value to point to it allowing constructors in fields...</Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>construct</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTContainer</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_container.html</Path>
    <Anchor>aabb870b5cd14d74763e02230654d70b2</Anchor>
    <Abstract>Asks all members to construct themselves from the stack. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ASTNode</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTNode</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_node.html</Path>
    <Anchor>a9cfd880bd72900af6a9a050b6673653e</Anchor>
    <Abstract>Constructs the AST node, with a null parent. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ASTNode</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTNode</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_node.html</Path>
    <Anchor>a598362d64b01bc8266a8eac9341f6946</Anchor>
    <Abstract>Copying AST nodes is not supported. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~ASTNode</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTNode</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_node.html</Path>
    <Anchor>ae23a27b167341bfdd13ce781278074ac</Anchor>
    <Abstract>Destructor does nothing, virtual for subclasses to use. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>parent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTNode</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_node.html</Path>
    <Anchor>a405356e07d478dff3cb0a06681314dab</Anchor>
    <Abstract>Returns the parent of this AST node, or nullptr if there isn&amp;#39;t one (either if this is the root...</Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isa</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTNode</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_node.html</Path>
    <Anchor>aa837bc937c493e7dd4f067e34644c46b</Anchor>
    <Abstract>Root implementation of the RTTI-replacement for builds not wishing to use RTTI. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isa</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTNode</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_node.html</Path>
    <Anchor>a87ce42e787d1dbcceb8d9dfd5e18926c</Anchor>
    <Abstract>Returns true if this object is an instance of T. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_as</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTNode</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_node.html</Path>
    <Anchor>a392371c883f30b06fb70486fd209f778</Anchor>
    <Abstract>Returns a pointer to this object as a pointer to a child class, or nullptr if the cast would be unsaf...</Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>kind</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTNode</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_node.html</Path>
    <Anchor>a1e7fe53f436deccc338c2de2b65bed74</Anchor>
    <Abstract>Returns the kind of object class. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>classKind</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>pegmatite::ASTNode</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_node.html</Path>
    <Anchor>a99aaa8936ff1a0f3f3cf9a9b8a4c124a</Anchor>
    <Abstract>Returns the unique identifier for this class. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AST::MultiplyExpression</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>AST::MultiplyExpression</Scope>
    </TokenIdentifier>
    <Path>class_a_s_t_1_1_multiply_expression.html</Path>
    <Abstract>Multiply expression node. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>eval</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AST::MultiplyExpression</Scope>
    </TokenIdentifier>
    <Path>class_a_s_t_1_1_multiply_expression.html</Path>
    <Anchor>a5a12609cb3986c15b778e7a6d1a3a65d</Anchor>
    <Abstract>Evaluate this expression. </Abstract>
    <DeclaredIn>calculator.cc</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>print</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AST::MultiplyExpression</Scope>
    </TokenIdentifier>
    <Path>class_a_s_t_1_1_multiply_expression.html</Path>
    <Anchor>a4b5cc8e45e152d21a53e952971ae3081</Anchor>
    <Abstract>Print the node, at the specified indent depth. </Abstract>
    <DeclaredIn>calculator.cc</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ASTContainer</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTContainer</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_container.html</Path>
    <Anchor>ae4e20ffce125dcea4cadd7f9bf94480d</Anchor>
    <Abstract>Constructs the container, setting a thread-local value to point to it allowing constructors in fields...</Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>construct</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTContainer</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_container.html</Path>
    <Anchor>aabb870b5cd14d74763e02230654d70b2</Anchor>
    <Abstract>Asks all members to construct themselves from the stack. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ASTNode</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTNode</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_node.html</Path>
    <Anchor>a9cfd880bd72900af6a9a050b6673653e</Anchor>
    <Abstract>Constructs the AST node, with a null parent. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ASTNode</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTNode</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_node.html</Path>
    <Anchor>a598362d64b01bc8266a8eac9341f6946</Anchor>
    <Abstract>Copying AST nodes is not supported. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~ASTNode</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTNode</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_node.html</Path>
    <Anchor>ae23a27b167341bfdd13ce781278074ac</Anchor>
    <Abstract>Destructor does nothing, virtual for subclasses to use. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>parent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTNode</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_node.html</Path>
    <Anchor>a405356e07d478dff3cb0a06681314dab</Anchor>
    <Abstract>Returns the parent of this AST node, or nullptr if there isn&amp;#39;t one (either if this is the root...</Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isa</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTNode</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_node.html</Path>
    <Anchor>aa837bc937c493e7dd4f067e34644c46b</Anchor>
    <Abstract>Root implementation of the RTTI-replacement for builds not wishing to use RTTI. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isa</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTNode</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_node.html</Path>
    <Anchor>a87ce42e787d1dbcceb8d9dfd5e18926c</Anchor>
    <Abstract>Returns true if this object is an instance of T. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_as</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTNode</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_node.html</Path>
    <Anchor>a392371c883f30b06fb70486fd209f778</Anchor>
    <Abstract>Returns a pointer to this object as a pointer to a child class, or nullptr if the cast would be unsaf...</Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>kind</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTNode</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_node.html</Path>
    <Anchor>a1e7fe53f436deccc338c2de2b65bed74</Anchor>
    <Abstract>Returns the kind of object class. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>classKind</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>pegmatite::ASTNode</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_node.html</Path>
    <Anchor>a99aaa8936ff1a0f3f3cf9a9b8a4c124a</Anchor>
    <Abstract>Returns the unique identifier for this class. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>left</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>AST::BinaryExpression</Scope>
    </TokenIdentifier>
    <Path>class_a_s_t_1_1_binary_expression.html</Path>
    <Anchor>ac8729f901b6e9d0f8cd4f450d6f7339a</Anchor>
    <Abstract>The pointers to the left and right nodes. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AST::Number</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>AST::Number</Scope>
    </TokenIdentifier>
    <Path>class_a_s_t_1_1_number.html</Path>
    <Abstract>AST node representing a number. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>construct</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AST::Number</Scope>
    </TokenIdentifier>
    <Path>class_a_s_t_1_1_number.html</Path>
    <Anchor>af9ff09c8971c775cde2c5e35aa22a4c9</Anchor>
    <Abstract>Construct the numerical value from the text in the input range. </Abstract>
    <DeclaredIn>calculator.cc</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>eval</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AST::Number</Scope>
    </TokenIdentifier>
    <Path>class_a_s_t_1_1_number.html</Path>
    <Anchor>afd65450adf125b20d441c232606cb938</Anchor>
    <Abstract>Evaluate this expression. </Abstract>
    <DeclaredIn>calculator.cc</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>print</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AST::Number</Scope>
    </TokenIdentifier>
    <Path>class_a_s_t_1_1_number.html</Path>
    <Anchor>a70a522547a978b2345c9de326f0b5b2c</Anchor>
    <Abstract>Print the node, at the specified indent depth. </Abstract>
    <DeclaredIn>calculator.cc</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ASTContainer</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTContainer</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_container.html</Path>
    <Anchor>ae4e20ffce125dcea4cadd7f9bf94480d</Anchor>
    <Abstract>Constructs the container, setting a thread-local value to point to it allowing constructors in fields...</Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ASTNode</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTNode</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_node.html</Path>
    <Anchor>a9cfd880bd72900af6a9a050b6673653e</Anchor>
    <Abstract>Constructs the AST node, with a null parent. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ASTNode</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTNode</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_node.html</Path>
    <Anchor>a598362d64b01bc8266a8eac9341f6946</Anchor>
    <Abstract>Copying AST nodes is not supported. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~ASTNode</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTNode</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_node.html</Path>
    <Anchor>ae23a27b167341bfdd13ce781278074ac</Anchor>
    <Abstract>Destructor does nothing, virtual for subclasses to use. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>parent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTNode</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_node.html</Path>
    <Anchor>a405356e07d478dff3cb0a06681314dab</Anchor>
    <Abstract>Returns the parent of this AST node, or nullptr if there isn&amp;#39;t one (either if this is the root...</Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isa</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTNode</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_node.html</Path>
    <Anchor>aa837bc937c493e7dd4f067e34644c46b</Anchor>
    <Abstract>Root implementation of the RTTI-replacement for builds not wishing to use RTTI. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isa</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTNode</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_node.html</Path>
    <Anchor>a87ce42e787d1dbcceb8d9dfd5e18926c</Anchor>
    <Abstract>Returns true if this object is an instance of T. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_as</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTNode</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_node.html</Path>
    <Anchor>a392371c883f30b06fb70486fd209f778</Anchor>
    <Abstract>Returns a pointer to this object as a pointer to a child class, or nullptr if the cast would be unsaf...</Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>kind</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTNode</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_node.html</Path>
    <Anchor>a1e7fe53f436deccc338c2de2b65bed74</Anchor>
    <Abstract>Returns the kind of object class. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>classKind</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>pegmatite::ASTNode</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_node.html</Path>
    <Anchor>a99aaa8936ff1a0f3f3cf9a9b8a4c124a</Anchor>
    <Abstract>Returns the unique identifier for this class. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AST::SubtractExpression</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>AST::SubtractExpression</Scope>
    </TokenIdentifier>
    <Path>class_a_s_t_1_1_subtract_expression.html</Path>
    <Abstract>Subtract expression node. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>eval</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AST::SubtractExpression</Scope>
    </TokenIdentifier>
    <Path>class_a_s_t_1_1_subtract_expression.html</Path>
    <Anchor>a66eb499f01576eacb384af5f12a425c5</Anchor>
    <Abstract>Evaluate this expression. </Abstract>
    <DeclaredIn>calculator.cc</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>print</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AST::SubtractExpression</Scope>
    </TokenIdentifier>
    <Path>class_a_s_t_1_1_subtract_expression.html</Path>
    <Anchor>a3547e7e6cb1b31a5c27777aa7a35719c</Anchor>
    <Abstract>Print the node, at the specified indent depth. </Abstract>
    <DeclaredIn>calculator.cc</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ASTContainer</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTContainer</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_container.html</Path>
    <Anchor>ae4e20ffce125dcea4cadd7f9bf94480d</Anchor>
    <Abstract>Constructs the container, setting a thread-local value to point to it allowing constructors in fields...</Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>construct</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTContainer</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_container.html</Path>
    <Anchor>aabb870b5cd14d74763e02230654d70b2</Anchor>
    <Abstract>Asks all members to construct themselves from the stack. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ASTNode</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTNode</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_node.html</Path>
    <Anchor>a9cfd880bd72900af6a9a050b6673653e</Anchor>
    <Abstract>Constructs the AST node, with a null parent. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ASTNode</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTNode</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_node.html</Path>
    <Anchor>a598362d64b01bc8266a8eac9341f6946</Anchor>
    <Abstract>Copying AST nodes is not supported. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~ASTNode</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTNode</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_node.html</Path>
    <Anchor>ae23a27b167341bfdd13ce781278074ac</Anchor>
    <Abstract>Destructor does nothing, virtual for subclasses to use. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>parent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTNode</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_node.html</Path>
    <Anchor>a405356e07d478dff3cb0a06681314dab</Anchor>
    <Abstract>Returns the parent of this AST node, or nullptr if there isn&amp;#39;t one (either if this is the root...</Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isa</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTNode</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_node.html</Path>
    <Anchor>aa837bc937c493e7dd4f067e34644c46b</Anchor>
    <Abstract>Root implementation of the RTTI-replacement for builds not wishing to use RTTI. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isa</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTNode</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_node.html</Path>
    <Anchor>a87ce42e787d1dbcceb8d9dfd5e18926c</Anchor>
    <Abstract>Returns true if this object is an instance of T. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_as</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTNode</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_node.html</Path>
    <Anchor>a392371c883f30b06fb70486fd209f778</Anchor>
    <Abstract>Returns a pointer to this object as a pointer to a child class, or nullptr if the cast would be unsaf...</Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>kind</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTNode</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_node.html</Path>
    <Anchor>a1e7fe53f436deccc338c2de2b65bed74</Anchor>
    <Abstract>Returns the kind of object class. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>classKind</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>pegmatite::ASTNode</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_node.html</Path>
    <Anchor>a99aaa8936ff1a0f3f3cf9a9b8a4c124a</Anchor>
    <Abstract>Returns the unique identifier for this class. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>left</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>AST::BinaryExpression</Scope>
    </TokenIdentifier>
    <Path>class_a_s_t_1_1_binary_expression.html</Path>
    <Anchor>ac8729f901b6e9d0f8cd4f450d6f7339a</Anchor>
    <Abstract>The pointers to the left and right nodes. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fablexer::lexer::FabLexer</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>fablexer.lexer.FabLexer</Scope>
    </TokenIdentifier>
    <Path>classfablexer_1_1lexer_1_1_fab_lexer.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::Arguments</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::Arguments</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_arguments.html</Path>
    <Abstract>Command-line options and arguments after parsing, type-checking, etc. </Abstract>
    <DeclaredIn>Arguments.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>executable</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>fabrique::Arguments</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_arguments.html</Path>
    <Anchor>af8e7da3cb185326ce2126f99c225e5a6</Anchor>
    <Abstract>The currently-running binary. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::AssertionFailure</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::AssertionFailure</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_assertion_failure.html</Path>
    <Abstract>Some code may choose to throw this exception rather than assert() out. </Abstract>
    <DeclaredIn>exceptions.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::BooleanType</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::BooleanType</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_boolean_type.html</Path>
    <Abstract>A type that represents an ordered sequence. </Abstract>
    <DeclaredIn>BooleanType.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fields</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::Type</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_type.html</Path>
    <Anchor>a7142c51acf129a75b7bb830b8e870b34</Anchor>
    <Abstract>The fields that objects of this type have. </Abstract>
    <DeclaredIn>Type.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::Type</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_type.html</Path>
    <Anchor>ac698d6ec7deaf1c676dbca4ca78ade1e</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Type.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::Bytestream</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::Bytestream</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_bytestream.html</Path>
    <Abstract>A ostream-like class that may support formatting. </Abstract>
    <DeclaredIn>Bytestream.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Debug</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>fabrique::Bytestream</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_bytestream.html</Path>
    <Anchor>ab4d0d1008fc4fa6ba2192e6f3921e7c3</Anchor>
    <Abstract>Retrieve the debug output stream or a do-nothing stream, based on the (hierarchical) debug naming sch...</Abstract>
    <DeclaredIn>Bytestream.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Formatted</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>fabrique::Bytestream</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_bytestream.html</Path>
    <Anchor>ab07d387febeb571df8d66b343331599a</Anchor>
    <Abstract>Construct a formatted fabrique::Bytestream to wrap an std::ostream. </Abstract>
    <DeclaredIn>Bytestream.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Plain</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>fabrique::Bytestream</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_bytestream.html</Path>
    <Anchor>ab4531899c580babf2c2af3dd39602826</Anchor>
    <Abstract>Construct a plain fabrique::Bytestream to wrap an std::ostream. </Abstract>
    <DeclaredIn>Bytestream.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ErrorReport</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ErrorReport</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_error_report.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ErrorReport</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_error_report.html</Path>
    <Anchor>a06595cfa0bbb69651cd1622802364120</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>ErrorReport.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::FileType</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::FileType</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_file_type.html</Path>
    <Abstract>A type that represents an ordered sequence. </Abstract>
    <DeclaredIn>FileType.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fields</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::FileType</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_file_type.html</Path>
    <Anchor>ad2aa873d6920ab0d24cd19e219033ac8</Anchor>
    <Abstract>The fields that objects of this type have. </Abstract>
    <DeclaredIn>FileType.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>onAddTo</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::FileType</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_file_type.html</Path>
    <Anchor>acc0e72253995e54b31eb80ca48d852d7</Anchor>
    <DeclaredIn>FileType.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>onPrefixWith</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::FileType</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_file_type.html</Path>
    <Anchor>a1696e9ea1962212b6a431fb76b458073</Anchor>
    <DeclaredIn>FileType.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::Type</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_type.html</Path>
    <Anchor>ac698d6ec7deaf1c676dbca4ca78ade1e</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Type.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::FunctionType</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::FunctionType</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_function_type.html</Path>
    <Abstract>A type that represents an ordered sequence. </Abstract>
    <DeclaredIn>FunctionType.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::FunctionType</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_function_type.html</Path>
    <Anchor>a91812c2168c9e0368287f75df247b6fe</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>FunctionType.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fields</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::Type</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_type.html</Path>
    <Anchor>a7142c51acf129a75b7bb830b8e870b34</Anchor>
    <Abstract>The fields that objects of this type have. </Abstract>
    <DeclaredIn>Type.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::HasSource</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::HasSource</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_has_source.html</Path>
    <Abstract>A mixin type for something that has a location in source code. </Abstract>
    <DeclaredIn>SourceLocation.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::IntegerType</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::IntegerType</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_integer_type.html</Path>
    <Abstract>A type that represents an ordered sequence. </Abstract>
    <DeclaredIn>IntegerType.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fields</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::Type</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_type.html</Path>
    <Anchor>a7142c51acf129a75b7bb830b8e870b34</Anchor>
    <Abstract>The fields that objects of this type have. </Abstract>
    <DeclaredIn>Type.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::Type</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_type.html</Path>
    <Anchor>ac698d6ec7deaf1c676dbca4ca78ade1e</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Type.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::Join</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>fabrique::Join</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_join.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::Join</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_join.html</Path>
    <Anchor>ae5c85f571ae7b939901b53e629a3894b</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Join.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::Lexer</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::Lexer</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_lexer.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>instance</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>fabrique::Lexer</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_lexer.html</Path>
    <Anchor>add86082a06e27b9b86b6de2faabb1d77</Anchor>
    <Abstract>Access the singleton Lexer instance. </Abstract>
    <DeclaredIn>Lexer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::MaybeType</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::MaybeType</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_maybe_type.html</Path>
    <Abstract>A type that represents an ordered sequence. </Abstract>
    <DeclaredIn>MaybeType.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fields</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::MaybeType</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_maybe_type.html</Path>
    <Anchor>a42f613225e7b0aac53ca87bbaf707476</Anchor>
    <Abstract>The fields that objects of this type have. </Abstract>
    <DeclaredIn>MaybeType.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::Type</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_type.html</Path>
    <Anchor>ac698d6ec7deaf1c676dbca4ca78ade1e</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Type.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::OptionallyTyped</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::OptionallyTyped</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_optionally_typed.html</Path>
    <Abstract>A mixin type for something that may have a fabrique::fabrique::Type. </Abstract>
    <DeclaredIn>OptionallyTyped.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::OSError</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::OSError</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_o_s_error.html</Path>
    <Abstract>An error that has an OS-specific description. </Abstract>
    <DeclaredIn>exceptions.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::OSError</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_o_s_error.html</Path>
    <Anchor>a8618fdcf143a145c026109bc9f7f19f2</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>exceptions.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::PosixError</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::PosixError</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_posix_error.html</Path>
    <Abstract>An OS error that has an errno or equivalent output. </Abstract>
    <DeclaredIn>PosixError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::OSError</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_o_s_error.html</Path>
    <Anchor>a8618fdcf143a145c026109bc9f7f19f2</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>exceptions.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::PosixSharedLibrary</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::PosixSharedLibrary</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_posix_shared_library.html</Path>
    <Abstract>Platform-agnostic superclass for a shared library. </Abstract>
    <DeclaredIn>PosixSharedLibrary.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::Printable</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::Printable</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_printable.html</Path>
    <Abstract>A thing that can be pretty-printed. </Abstract>
    <DeclaredIn>Printable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::Printable</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_printable.html</Path>
    <Anchor>a7b148c5f200de45f3ad33a37a090997f</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Printable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::RawMaybeType</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::RawMaybeType</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_raw_maybe_type.html</Path>
    <Abstract>An unparameterised sequence (e.g., maybe): used to generate parameterised sequences (e...</Abstract>
    <DeclaredIn>MaybeType.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fields</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::Type</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_type.html</Path>
    <Anchor>a7142c51acf129a75b7bb830b8e870b34</Anchor>
    <Abstract>The fields that objects of this type have. </Abstract>
    <DeclaredIn>Type.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::Type</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_type.html</Path>
    <Anchor>ac698d6ec7deaf1c676dbca4ca78ade1e</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Type.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::RawSequenceType</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::RawSequenceType</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_raw_sequence_type.html</Path>
    <Abstract>An unparameterised sequence (e.g., list): used to generate parameterised sequences (e...</Abstract>
    <DeclaredIn>SequenceType.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fields</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::Type</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_type.html</Path>
    <Anchor>a7142c51acf129a75b7bb830b8e870b34</Anchor>
    <Abstract>The fields that objects of this type have. </Abstract>
    <DeclaredIn>Type.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::Type</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_type.html</Path>
    <Anchor>ac698d6ec7deaf1c676dbca4ca78ade1e</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Type.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::SemanticException</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::SemanticException</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_semantic_exception.html</Path>
    <Abstract>A semantic error is present in the Fabrique description. </Abstract>
    <DeclaredIn>exceptions.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::SourceCodeException</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_source_code_exception.html</Path>
    <Anchor>aba85f7c69a393e4f4f4ac7c9ae56460b</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>exceptions.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::SequenceType</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::SequenceType</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_sequence_type.html</Path>
    <Abstract>A type that represents an ordered sequence. </Abstract>
    <DeclaredIn>SequenceType.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fields</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::Type</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_type.html</Path>
    <Anchor>a7142c51acf129a75b7bb830b8e870b34</Anchor>
    <Abstract>The fields that objects of this type have. </Abstract>
    <DeclaredIn>Type.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::Type</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_type.html</Path>
    <Anchor>ac698d6ec7deaf1c676dbca4ca78ade1e</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Type.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::SharedLibrary</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::SharedLibrary</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_shared_library.html</Path>
    <Abstract>Platform-agnostic superclass for a shared library. </Abstract>
    <DeclaredIn>SharedLibrary.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::SourceCodeException</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::SourceCodeException</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_source_code_exception.html</Path>
    <Abstract>Base class for exceptions related to invalid source code. </Abstract>
    <DeclaredIn>exceptions.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::SourceCodeException</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_source_code_exception.html</Path>
    <Anchor>aba85f7c69a393e4f4f4ac7c9ae56460b</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>exceptions.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::SourceLocation</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::SourceLocation</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_source_location.html</Path>
    <Abstract>A location in the original source code. </Abstract>
    <DeclaredIn>SourceLocation.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::SourceLocation</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_source_location.html</Path>
    <Anchor>a21f67087961a3f37c7535c79ed42d184</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>SourceLocation.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::SourceRange</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::SourceRange</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_source_range.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::SourceRange</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_source_range.html</Path>
    <Anchor>a7f320c900b25deb447617141663e9e60</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>SourceLocation.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Span</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>fabrique::SourceRange</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_source_range.html</Path>
    <Anchor>a593e6159e681fc06afaec09564ff077c</Anchor>
    <Abstract>Construct a short (within a single line) range. </Abstract>
    <DeclaredIn>SourceLocation.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Over</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>fabrique::SourceRange</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_source_range.html</Path>
    <Anchor>a73fc0da7d12c25dbf2b58fc57239323e</Anchor>
    <Abstract>Create a range that spans two fabrique::HasSource objects. </Abstract>
    <DeclaredIn>SourceLocation.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::StringType</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::StringType</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_string_type.html</Path>
    <Abstract>A type that represents an ordered sequence. </Abstract>
    <DeclaredIn>StringType.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fields</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::Type</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_type.html</Path>
    <Anchor>a7142c51acf129a75b7bb830b8e870b34</Anchor>
    <Abstract>The fields that objects of this type have. </Abstract>
    <DeclaredIn>Type.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::Type</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_type.html</Path>
    <Anchor>ac698d6ec7deaf1c676dbca4ca78ade1e</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Type.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::StructureType</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::StructureType</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_structure_type.html</Path>
    <Abstract>The type of a structure, which contains named, typed, immutable fields. </Abstract>
    <DeclaredIn>StructureType.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fields</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::StructureType</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_structure_type.html</Path>
    <Anchor>a0361b8afaef504ddb48792c181c2fa40</Anchor>
    <Abstract>The fields that objects of this type have. </Abstract>
    <DeclaredIn>StructureType.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::StructureType</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_structure_type.html</Path>
    <Anchor>a03e566aabdcf5f007b25855b497af932</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>StructureType.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::SyntaxError</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::SyntaxError</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_syntax_error.html</Path>
    <Abstract>A syntactic error is present in the Fabrique description. </Abstract>
    <DeclaredIn>exceptions.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::SourceCodeException</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_source_code_exception.html</Path>
    <Anchor>aba85f7c69a393e4f4f4ac7c9ae56460b</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>exceptions.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::Token</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::Token</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_token.html</Path>
    <Abstract>A token obtained from the Lexer. </Abstract>
    <DeclaredIn>Token.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::Token</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_token.html</Path>
    <Anchor>aad19c1d015182a6714c5b014438e1609</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Token.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::Type</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::Type</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_type.html</Path>
    <Abstract>The name of a value, function, parameter or argument. </Abstract>
    <DeclaredIn>Type.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fields</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::Type</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_type.html</Path>
    <Anchor>a7142c51acf129a75b7bb830b8e870b34</Anchor>
    <Abstract>The fields that objects of this type have. </Abstract>
    <DeclaredIn>Type.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::Type</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_type.html</Path>
    <Anchor>ac698d6ec7deaf1c676dbca4ca78ade1e</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Type.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::TypeContext</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::TypeContext</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_type_context.html</Path>
    <Abstract>A context object that holds state for a compilation (e.g., type objects). </Abstract>
    <DeclaredIn>TypeContext.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>find</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::TypeContext</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_type_context.html</Path>
    <Anchor>ababb50e178e2fb0111613f4d686629af</Anchor>
    <Abstract>Find an existing type (nil type if not found). </Abstract>
    <DeclaredIn>TypeContext.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>nilType</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::TypeContext</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_type_context.html</Path>
    <Anchor>a9b73d45ba3477665d9b23585bc8ec1fa</Anchor>
    <Abstract>The type of a typeless thing. </Abstract>
    <DeclaredIn>TypeContext.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>booleanType</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::TypeContext</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_type_context.html</Path>
    <Anchor>a141717e2d9ed645a2cbf5b35b5a3f1e0</Anchor>
    <Abstract>The type of a boolean expression. </Abstract>
    <DeclaredIn>TypeContext.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>integerType</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::TypeContext</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_type_context.html</Path>
    <Anchor>a8d93978dff1c3b18f164b72f329c577e</Anchor>
    <Abstract>The type of an integer number. </Abstract>
    <DeclaredIn>TypeContext.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>listOf</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::TypeContext</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_type_context.html</Path>
    <Anchor>a790dee39cdf17c94408c719c851c583c</Anchor>
    <Abstract>The type of a list. </Abstract>
    <DeclaredIn>TypeContext.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>maybe</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::TypeContext</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_type_context.html</Path>
    <Anchor>abe6a31194067af4b111c0bf56ce6471d</Anchor>
    <Abstract>An optional (&quot;maybe&quot;) type. </Abstract>
    <DeclaredIn>TypeContext.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fileType</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::TypeContext</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_type_context.html</Path>
    <Anchor>a8c7112e4877b9164189a55c32ea31437</Anchor>
    <Abstract>A file in a build. </Abstract>
    <DeclaredIn>TypeContext.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fileListType</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::TypeContext</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_type_context.html</Path>
    <Anchor>a9935cb5d8594dd3543ab2a55d5f2f514</Anchor>
    <Abstract>A list of files (a pretty fundamental type!). </Abstract>
    <DeclaredIn>TypeContext.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>functionType</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::TypeContext</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_type_context.html</Path>
    <Anchor>a87de4b91ad65259b725579858517751d</Anchor>
    <Abstract>A function type for a simple (one in, one out) function. </Abstract>
    <DeclaredIn>TypeContext.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>functionType</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::TypeContext</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_type_context.html</Path>
    <Anchor>ad9c3ba684a1e9b5c2d191e7eb65d87f2</Anchor>
    <Abstract>A function type, which incorporates the function&amp;#39;s signature. </Abstract>
    <DeclaredIn>TypeContext.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>structureType</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::TypeContext</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_type_context.html</Path>
    <Anchor>a08532c118c3c08250e0ca8ecd88c3d32</Anchor>
    <Abstract>A structure type describes its fields&amp;#39; names and types. </Abstract>
    <DeclaredIn>TypeContext.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>stringType</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::TypeContext</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_type_context.html</Path>
    <Anchor>a30df0dd3f7145f7ae512b988cf98d127</Anchor>
    <Abstract>A string of characters. </Abstract>
    <DeclaredIn>TypeContext.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::Typed</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::Typed</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_typed.html</Path>
    <Abstract>A mixin type for something that has a fabrique::fabrique::Type. </Abstract>
    <DeclaredIn>Typed.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::TypeError</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::TypeError</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_type_error.html</Path>
    <Abstract>Something is wrong with a fabrique::Type. </Abstract>
    <DeclaredIn>TypeError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::SourceCodeException</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_source_code_exception.html</Path>
    <Anchor>aba85f7c69a393e4f4f4ac7c9ae56460b</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>exceptions.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::Uncopyable</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::Uncopyable</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_uncopyable.html</Path>
    <Abstract>An object that cannot be copy-constructed. </Abstract>
    <DeclaredIn>Uncopyable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::UserError</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::UserError</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_user_error.html</Path>
    <Abstract>An error in user input. </Abstract>
    <DeclaredIn>exceptions.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::UserError</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_user_error.html</Path>
    <Anchor>ad198d95139b89e953d30b469f4bf0c2a</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>exceptions.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::WrongTypeException</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::WrongTypeException</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_wrong_type_exception.html</Path>
    <Abstract>Something is wrong with a fabrique::Type. </Abstract>
    <DeclaredIn>TypeError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::SourceCodeException</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_source_code_exception.html</Path>
    <Anchor>aba85f7c69a393e4f4f4ac7c9ae56460b</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>exceptions.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::Action</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::Action</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_action.html</Path>
    <Abstract>A build action that can transform inputs into outputs. </Abstract>
    <DeclaredIn>Action.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Action</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_action.html</Path>
    <Anchor>acfe6b9e62a6317f98d1d2aaf0aa0ac63</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Action.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NameArguments</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::HasParameters</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_has_parameters.html</Path>
    <Anchor>a33ca2779a7cb6d3f224b85614c41117a</Anchor>
    <Abstract>Name all of the arguments in v according to the rules for positional and keyword arguments. </Abstract>
    <DeclaredIn>HasParameters.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Create</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>fabrique::ast::Action</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_action.html</Path>
    <Anchor>a60642f2a5a0ef1879ab297b4512d9036</Anchor>
    <Abstract>An action definition has both arguments and parameters. </Abstract>
    <DeclaredIn>Action.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::Argument</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::Argument</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_argument.html</Path>
    <Abstract>An argument being passed to an action or function (caller-side). </Abstract>
    <DeclaredIn>Argument.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Argument</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_argument.html</Path>
    <Anchor>a74292b07b50192ed13b66e9be6c9bb45</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Argument.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::ASTDump</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::ASTDump</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_a_s_t_dump.html</Path>
    <Abstract>Backend that prints the AST as a (not very pretty) tree. </Abstract>
    <DeclaredIn>ASTDump.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::BinaryOperation</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::BinaryOperation</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_binary_operation.html</Path>
    <Abstract>An operation with two operands. </Abstract>
    <DeclaredIn>BinaryOperation.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::BinaryOperation</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_binary_operation.html</Path>
    <Anchor>acf6b5530507172f94469135ec19c8443</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>BinaryOperation.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::BoolLiteral</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::BoolLiteral</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_bool_literal.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::BoolLiteral</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_bool_literal.html</Path>
    <Anchor>a2ff30a00af05e865e448149e3d0ece00</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>literals.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::Call</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::Call</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_call.html</Path>
    <Abstract>A call to a function or build action. </Abstract>
    <DeclaredIn>Call.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Call</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_call.html</Path>
    <Anchor>a9f2e54fe0ac4151ed0462474ba33b69b</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Call.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::CompoundExpression</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::CompoundExpression</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_compound_expression.html</Path>
    <Abstract>An expression that can contain intermediate values. </Abstract>
    <DeclaredIn>CompoundExpr.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::CompoundExpression</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_compound_expression.html</Path>
    <Anchor>a56c5d4b8b87921cefee976e41697094b</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>CompoundExpr.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::Conditional</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::Conditional</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_conditional.html</Path>
    <Abstract>A function allows users to create build abstractions. </Abstract>
    <DeclaredIn>Conditional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Conditional</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_conditional.html</Path>
    <Anchor>a6371057f414fbf5e09f66d13b359f3f5</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Conditional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::DebugTracePoint</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::DebugTracePoint</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_debug_trace_point.html</Path>
    <Abstract>An operation with two operands. </Abstract>
    <DeclaredIn>DebugTracePoint.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::DebugTracePoint</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_debug_trace_point.html</Path>
    <Anchor>a097bf2b0437b4ade7d5869aa5ff1fd6f</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>DebugTracePoint.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::EvalContext</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::EvalContext</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_eval_context.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Define</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::EvalContext</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_eval_context.html</Path>
    <Anchor>a7cba027bdd38213f92f34ae2686bda45</Anchor>
    <Abstract>Define a named dag::Value in the current scope. </Abstract>
    <DeclaredIn>EvalContext.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Lookup</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::EvalContext</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_eval_context.html</Path>
    <Anchor>a35a0c7be4f4ec9265e053817893f46e3</Anchor>
    <Abstract>Look up a named value from the current scope or a parent scope. </Abstract>
    <DeclaredIn>EvalContext.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Function</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::EvalContext</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_eval_context.html</Path>
    <Anchor>a5c6033ac3240a9d00f6ccd7858d21b6f</Anchor>
    <Abstract>Define a dag::Function. </Abstract>
    <DeclaredIn>EvalContext.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Alias</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::EvalContext</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_eval_context.html</Path>
    <Anchor>a24ec8258eb54b65c1ca35f1cd5a59096</Anchor>
    <Abstract>Create a new alias for an existing dag::Target. </Abstract>
    <DeclaredIn>EvalContext.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>CopyCurrentScope</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::EvalContext</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_eval_context.html</Path>
    <Anchor>a7d6d82f6e5317bbb3b0cec6984d54af7</Anchor>
    <Abstract>Make a deep copy of the current scope and all of its parents. </Abstract>
    <DeclaredIn>EvalContext.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fullyQualifiedName</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::EvalContext</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_eval_context.html</Path>
    <Anchor>a2526b04cea20cb46231893a3e4cb0ac6</Anchor>
    <Abstract>The fully-qualified name of the value currently being defined. </Abstract>
    <DeclaredIn>EvalContext.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>scopeName_</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>fabrique::ast::EvalContext</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_eval_context.html</Path>
    <Anchor>ada71db67b0b185268d1eaa339560652a</Anchor>
    <Abstract>The components of the current scope&amp;#39;s fully-qualified name. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>scopes_</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>fabrique::ast::EvalContext</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_eval_context.html</Path>
    <Anchor>af36265514d9b8338f46a9b570c32b1bc</Anchor>
    <Abstract>Symbols defined in this scope (or the one up from it, or up...). </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::EvalContext::AlternateScoping</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::EvalContext::AlternateScoping</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_eval_context_1_1_alternate_scoping.html</Path>
    <Abstract>An object that represents the use of an alternative scope stack and that will restore the original st...</Abstract>
    <DeclaredIn>EvalContext.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::EvalContext::Scope</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::EvalContext::Scope</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_eval_context_1_1_scope.html</Path>
    <Abstract>An object to represent descending in a call stack. </Abstract>
    <DeclaredIn>EvalContext.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::EvalContext::ScopedValueName</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::EvalContext::ScopedValueName</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_eval_context_1_1_scoped_value_name.html</Path>
    <Abstract>An object for declaring the name of the value whose initializer we are currently evaluating. </Abstract>
    <DeclaredIn>EvalContext.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::Expression</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::Expression</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_expression.html</Path>
    <Abstract>Base class for expressions that can be evaluated. </Abstract>
    <DeclaredIn>Expression.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::Printable</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_printable.html</Path>
    <Anchor>a7b148c5f200de45f3ad33a37a090997f</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Printable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::FieldAccess</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::FieldAccess</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_field_access.html</Path>
    <Abstract>An expression that imports a Fabrique module. </Abstract>
    <DeclaredIn>FieldAccess.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::FieldAccess</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_field_access.html</Path>
    <Anchor>a6f69c595b48c3a5fb3e8e63019016cde</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>FieldAccess.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::FieldQuery</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::FieldQuery</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_field_query.html</Path>
    <Abstract>An expression that imports a Fabrique module. </Abstract>
    <DeclaredIn>FieldQuery.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::FieldQuery</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_field_query.html</Path>
    <Anchor>a12436912d8db8dda751e0180b6463641</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>FieldQuery.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::FileList</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::FileList</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_file_list.html</Path>
    <Abstract>A list of files, with optional arguments that can be applied to each file. </Abstract>
    <DeclaredIn>FileList.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::FileList</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_file_list.html</Path>
    <Anchor>a8cb3fdb76c00ce62aebbc28fcdb7d38f</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>FileList.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::Filename</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::Filename</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_filename.html</Path>
    <Abstract>A reference to a file on disk (source or target). </Abstract>
    <DeclaredIn>Filename.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Filename</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_filename.html</Path>
    <Anchor>aabf57499798ca68f5e1cc0e4bf35768a</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Filename.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::ForeachExpr</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::ForeachExpr</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_foreach_expr.html</Path>
    <Abstract>An expression that maps list elements into another list. </Abstract>
    <DeclaredIn>Foreach.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::ForeachExpr</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_foreach_expr.html</Path>
    <Anchor>a7df9b4810c9a659473864cfbecc09c39</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Foreach.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::Function</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::Function</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_function.html</Path>
    <Abstract>A function allows users to create build abstractions. </Abstract>
    <DeclaredIn>Function.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Function</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_function.html</Path>
    <Anchor>a19d011823e9fad4165a5bfb325076df9</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Function.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NameArguments</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::HasParameters</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_has_parameters.html</Path>
    <Anchor>a33ca2779a7cb6d3f224b85614c41117a</Anchor>
    <Abstract>Name all of the arguments in v according to the rules for positional and keyword arguments. </Abstract>
    <DeclaredIn>HasParameters.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::HasParameters</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::HasParameters</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_has_parameters.html</Path>
    <Abstract>A mixin type for something that can be called with parameters. </Abstract>
    <DeclaredIn>HasParameters.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NameArguments</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::HasParameters</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_has_parameters.html</Path>
    <Anchor>a33ca2779a7cb6d3f224b85614c41117a</Anchor>
    <Abstract>Name all of the arguments in v according to the rules for positional and keyword arguments. </Abstract>
    <DeclaredIn>HasParameters.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::HasScope</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::HasScope</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_has_scope.html</Path>
    <Abstract>A mixin type for something that has a fabrique::fabrique::Type. </Abstract>
    <DeclaredIn>HasScope.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::Identifier</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::Identifier</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_identifier.html</Path>
    <Abstract>The name of a value, function, parameter or argument. </Abstract>
    <DeclaredIn>Identifier.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Identifier</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_identifier.html</Path>
    <Anchor>a142531d21be32c8ee93cda56e9553986</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Identifier.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::Import</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::Import</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_import.html</Path>
    <Abstract>An expression that imports a Fabrique module. </Abstract>
    <DeclaredIn>Import.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Import</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_import.html</Path>
    <Anchor>aebe03f34ffb07d842cb2299afc74adc9</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Import.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::IntLiteral</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::IntLiteral</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_int_literal.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::IntLiteral</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_int_literal.html</Path>
    <Anchor>a14f8bda584d237a5d60078fa869361e8</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>literals.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::List</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::List</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_list.html</Path>
    <Abstract>A list of same-typed expressions. </Abstract>
    <DeclaredIn>List.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::List</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_list.html</Path>
    <Anchor>ae265be0faa533845d9e2df65bcfa22b8</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>List.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::Literal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>fabrique::ast::Literal</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_literal.html</Path>
    <Abstract>An expression whose value is literally expressed in the source file. </Abstract>
    <DeclaredIn>literals.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::Printable</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_printable.html</Path>
    <Anchor>a7b148c5f200de45f3ad33a37a090997f</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Printable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::Mapping</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::Mapping</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_mapping.html</Path>
    <Abstract>An expression that maps a sequence into a variable (e.g., at the beginning of a foreach loop)...</Abstract>
    <DeclaredIn>Mapping.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Mapping</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_mapping.html</Path>
    <Anchor>a428ffebad83e556e72a1edba3f7cbbb3</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Mapping.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::Node</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::Node</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_node.html</Path>
    <Abstract>Base class for expressions that can be evaluated. </Abstract>
    <DeclaredIn>Node.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::Printable</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_printable.html</Path>
    <Anchor>a7b148c5f200de45f3ad33a37a090997f</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Printable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::Parameter</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::Parameter</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parameter.html</Path>
    <Abstract>A formal parameter in a fabrique::ast::Function. </Abstract>
    <DeclaredIn>Parameter.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parameter</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parameter.html</Path>
    <Anchor>a363d618ad36b5e4665d7aef99587c243</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Parameter.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::Parser</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Abstract>Parses. </Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ParseDefinitions</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Anchor>aac0dbc5792f2ae4c84ca763bed98d465</Anchor>
    <Abstract>Parse Fabrique fragments defined at, e.g., the command line. </Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ParseFile</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Anchor>a4d4e6971b656b22439171a2b5e13d93a</Anchor>
    <Abstract>Parse Fabrique input (usually a file) into a Scope. </Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>errors</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Anchor>a235ca527368a02ab5291fcd970706664</Anchor>
    <Abstract>Errors encountered during parsing. </Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>files</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Anchor>a4f30a3534dbd6ba7b43bcb7ec749c28e</Anchor>
    <Abstract>Input files encountered during parsing. </Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>EnterScope</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Anchor>a6987705731194a8cc25361d0ebe99815</Anchor>
    <Abstract>Enter an AST Scope. </Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>EnterScope</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Anchor>af81cb1c0f112b1c042db6a38a2a4dccd</Anchor>
    <Abstract>A convenience wrapper around EnterScope with no &amp;#39;args&amp;#39; type. </Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>EnterScope</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Anchor>a659373a762eee54a012b3f2a060dd2a1</Anchor>
    <Abstract>Take an AST Scope and push it on the stack. </Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getType</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Anchor>ad5b0cef73d7ac263e03f25f347b28196</Anchor>
    <Abstract>Find or create a Type. </Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DefineAction</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Anchor>ada2645e244e5a6792ad28fdf1ce33dbe</Anchor>
    <Abstract>Define a build Action. </Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Arg</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Anchor>ab68e17e8c53dd1f5ec6f6328851de179</Anchor>
    <Abstract>Parse an Argument to a Function, build Action, etc. </Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>BinaryOp</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Anchor>add450bc9d6bc39a6bcbdc55ae1a2eab5</Anchor>
    <Abstract>Create a BinaryOperation (+, ::, ...). </Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>CreateCall</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Anchor>a39491420ba708a06b829f7efbbadec19</Anchor>
    <Abstract>A call to an Action or Function. </Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>CompoundExpr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Anchor>a82da79252761dff1aba4e3ca4adb8112</Anchor>
    <Abstract>An expression that can (optionally) include intermediate values. </Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FieldAccess</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Anchor>a689560223d8b07d493747700981ea567</Anchor>
    <Abstract>An expression that indirects into a structure. </Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FieldQuery</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Anchor>afb5edfc8698a963aae621bd7880e283f</Anchor>
    <Abstract>A test to see if a structure contains a field. </Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>File</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Anchor>a0689bda0f5e609532575bcb97664907c</Anchor>
    <Abstract>A Filename that is part of the build DAG. </Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Files</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Anchor>a908623ea409d17f09eebf92217cb6829</Anchor>
    <Abstract>Create a list of files, which may have shared arguments. </Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Foreach</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Anchor>afe9b7e6e6478d6a09c62382ccaac265e</Anchor>
    <Abstract>An expression for mapping list elements into another list: foreach x in some_list: x + 1...</Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Id</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Anchor>aa2b9418f0604effc0e0bfdef7dfe95fe</Anchor>
    <Abstract>An untyped Identifier: just a name. </Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Id</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Anchor>a0a06f211980b2429c92e16c01752ac11</Anchor>
    <Abstract>A typed Identifier. </Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ImportModule</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Anchor>a47568627a2fd1d7239c468f632821f60</Anchor>
    <Abstract>An expression that imports a Fabrique module. </Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>IfElse</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Anchor>a044c3bc00f40b4918ffd38cdc0deee3d</Anchor>
    <Abstract>A conditional if-then-else expression (not a statement, an expression). </Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ListOf</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Anchor>a0448c3c76783a7d515786bb8845faf81</Anchor>
    <Abstract>Define a List of expressions. </Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Map</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Anchor>a910305ac8537480bfdc08451cc75a01a</Anchor>
    <Abstract>Define a mapping from a sequence to a name. </Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Some</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Anchor>afc072bb7627e9bdfa26d1f1df4f70860</Anchor>
    <Abstract>Create a SomeValue (populated maybe object). </Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>StructInstantiation</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Anchor>a5e80e55157bc8697b7aac3358b96feb2</Anchor>
    <Abstract>Turn the current scope into a structure instantiation. </Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Param</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Anchor>acb92b09b1c5b86f4c43c01545ead5960</Anchor>
    <Abstract>Parse a function Parameter. </Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Reference</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Anchor>a14cd655f3da25fd3e5c7af74d19411e7</Anchor>
    <Abstract>Reference a Value in scope. </Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>TracePoint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Anchor>aefc3cdf8cb72491241b18775b6bb427b</Anchor>
    <Abstract>Create a DebugTracePoint. </Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>UnaryOp</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Anchor>a33938e373a1b6643da0f4cb3b2700dc0</Anchor>
    <Abstract>Create a UnaryOperation (currently just &amp;#39;not&amp;#39;). </Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DefineValue</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Anchor>a9dc51acc29355902eafc72d72eb1abeb</Anchor>
    <Abstract>Define a Value in the current scope. </Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DefineValue</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Anchor>af2d12289ae04636ef9bc113d026084cd</Anchor>
    <Abstract>Define an unnamed Value in the current scope. </Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::Scope</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::Scope</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_scope.html</Path>
    <Abstract>A scope is a container for name-&gt;value mappings. </Abstract>
    <DeclaredIn>Scope.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Scope</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_scope.html</Path>
    <Anchor>aaa86ab00b164ab176b2c6ef24e1e9316</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Scope.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::SomeValue</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::SomeValue</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_some_value.html</Path>
    <Abstract>A value boxed up in a maybe type. </Abstract>
    <DeclaredIn>SomeValue.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::SomeValue</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_some_value.html</Path>
    <Anchor>a4b1db606b5573c0bd20f91bbcad7a0ca</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>SomeValue.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::StringLiteral</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::StringLiteral</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_string_literal.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::StringLiteral</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_string_literal.html</Path>
    <Anchor>a3b22479f03aff2db3c79411f586c0963</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>literals.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::StructInstantiation</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::StructInstantiation</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_struct_instantiation.html</Path>
    <Abstract>A list of same-typed expressions. </Abstract>
    <DeclaredIn>StructInstantiation.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::StructInstantiation</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_struct_instantiation.html</Path>
    <Anchor>aa901805f7d9fa31ad036303e51da478a</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>StructInstantiation.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::SymbolReference</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::SymbolReference</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_symbol_reference.html</Path>
    <Abstract>A reference to a named symbol. </Abstract>
    <DeclaredIn>SymbolReference.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::SymbolReference</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_symbol_reference.html</Path>
    <Anchor>a9697accd0de730ae82577f6cc3446896</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>SymbolReference.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::UnaryOperation</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::UnaryOperation</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_unary_operation.html</Path>
    <Abstract>An operation with two operands. </Abstract>
    <DeclaredIn>UnaryOperation.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::UnaryOperation</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_unary_operation.html</Path>
    <Anchor>a749499aa6afd22314f69e0cca0512448</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>UnaryOperation.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::Value</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_value.html</Path>
    <Abstract>Base class for expressions that can be evaluated. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_value.html</Path>
    <Anchor>a0a16db04aab6e1f3234ab8879721ccac</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::Visitable</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::Visitable</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_visitable.html</Path>
    <Abstract>A thing that can be visited by a fabrique::Visitor. </Abstract>
    <DeclaredIn>Visitable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::Visitor</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::Visitor</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_visitor.html</Path>
    <Abstract>Interface for visitors that walk the AST. </Abstract>
    <DeclaredIn>Visitor.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::backend::Backend</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::backend::Backend</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1backend_1_1_backend.html</Path>
    <Abstract>Interface for backend classes that convert a DAG to something else (e.g., a Ninja file)...</Abstract>
    <DeclaredIn>Backend.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Create</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>fabrique::backend::Backend</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1backend_1_1_backend.html</Path>
    <Anchor>afa8c8b1ad17c166c288df79c6b6f1676</Anchor>
    <Abstract>Create a new backend using a registered short name. </Abstract>
    <DeclaredIn>Backend.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::backend::DotBackend</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::backend::DotBackend</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1backend_1_1_dot_backend.html</Path>
    <Abstract>A backend that produces GraphViz .dot files. </Abstract>
    <DeclaredIn>Dot.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Create</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>fabrique::backend::Backend</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1backend_1_1_backend.html</Path>
    <Anchor>afa8c8b1ad17c166c288df79c6b6f1676</Anchor>
    <Abstract>Create a new backend using a registered short name. </Abstract>
    <DeclaredIn>Backend.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::backend::MakeBackend</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::backend::MakeBackend</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1backend_1_1_make_backend.html</Path>
    <Abstract>A backend that produces POSIX make files (no BSD or GNU extensions). </Abstract>
    <DeclaredIn>Make.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Create</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>fabrique::backend::Backend</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1backend_1_1_backend.html</Path>
    <Anchor>afa8c8b1ad17c166c288df79c6b6f1676</Anchor>
    <Abstract>Create a new backend using a registered short name. </Abstract>
    <DeclaredIn>Backend.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::backend::NinjaBackend</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::backend::NinjaBackend</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1backend_1_1_ninja_backend.html</Path>
    <Abstract>A backend that produces Ninja files. </Abstract>
    <DeclaredIn>Ninja.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Create</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>fabrique::backend::Backend</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1backend_1_1_backend.html</Path>
    <Anchor>afa8c8b1ad17c166c288df79c6b6f1676</Anchor>
    <Abstract>Create a new backend using a registered short name. </Abstract>
    <DeclaredIn>Backend.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::backend::NullBackend</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::backend::NullBackend</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1backend_1_1_null_backend.html</Path>
    <Abstract>A backend that does nothing. </Abstract>
    <DeclaredIn>Null.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Create</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>fabrique::backend::Backend</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1backend_1_1_backend.html</Path>
    <Anchor>afa8c8b1ad17c166c288df79c6b6f1676</Anchor>
    <Abstract>Create a new backend using a registered short name. </Abstract>
    <DeclaredIn>Backend.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::dag::Boolean</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::dag::Boolean</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_boolean.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Negate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Boolean</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_boolean.html</Path>
    <Anchor>a47ecaabe062ed7ca36c35eef27b64208</Anchor>
    <Abstract>Unary &amp;#39;not&amp;#39; operator. </Abstract>
    <DeclaredIn>Primitive.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>And</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Boolean</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_boolean.html</Path>
    <Anchor>a225fc1786c479a29fdedef2e51b086a0</Anchor>
    <Abstract>Logical and. </Abstract>
    <DeclaredIn>Primitive.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Or</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Boolean</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_boolean.html</Path>
    <Anchor>a8502bbbd6dfaff15e25d24dc2859848a</Anchor>
    <Abstract>Logical or. </Abstract>
    <DeclaredIn>Primitive.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Xor</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Boolean</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_boolean.html</Path>
    <Anchor>a7bf5318ba96bb2f53d194c8b01244759</Anchor>
    <Abstract>Logical xor. </Abstract>
    <DeclaredIn>Primitive.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Equals</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Boolean</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_boolean.html</Path>
    <Anchor>abc816c67bb11fa1e89826cd1223df1e2</Anchor>
    <Abstract>Equivalence. </Abstract>
    <DeclaredIn>Primitive.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Primitive&lt; bool &gt;</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_primitive.html</Path>
    <Anchor>a9f1062b055a7cc4552cee38d2e4481f4</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Add</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a42a00015dc0c9dd5a6604692e472412d</Anchor>
    <Abstract>Add this fabrique::dag::Value to a following Value. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrefixWith</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ae1c473aeb87106c445b7277bb6679ba5</Anchor>
    <Abstract>Apply the prefix operation: prefix this value with another value. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ScalarAdd</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a46d5d59d10b65356d6d98fdcc52aaacc</Anchor>
    <Abstract>Add another fabrique::dag::Value scalar-wise across this Value. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>asList</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ae7ba46433ec1355844759188a3442d0d</Anchor>
    <Abstract>A list representation of this value (or nullptr). </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>canScalarAdd</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a920e14952eada9735d330b2f18b5f117</Anchor>
    <Abstract>This Value can add a value to itself in a scalar fashion. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::dag::Build</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::dag::Build</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_build.html</Path>
    <Abstract>An application of a fabrique::dag::Rule to transform File objects. </Abstract>
    <DeclaredIn>Build.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Build</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_build.html</Path>
    <Anchor>a9b5770968e57ee613a0eb4ceb061fa86</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Build.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Negate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ae8cb7c35ecf1b9ee6f046d96af913184</Anchor>
    <Abstract>Unary &amp;#39;not&amp;#39; operator. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Add</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a42a00015dc0c9dd5a6604692e472412d</Anchor>
    <Abstract>Add this fabrique::dag::Value to a following Value. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrefixWith</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ae1c473aeb87106c445b7277bb6679ba5</Anchor>
    <Abstract>Apply the prefix operation: prefix this value with another value. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ScalarAdd</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a46d5d59d10b65356d6d98fdcc52aaacc</Anchor>
    <Abstract>Add another fabrique::dag::Value scalar-wise across this Value. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>And</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a50bc9254bb26faf85be56789f95f55d1</Anchor>
    <Abstract>Logical and. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Or</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a65a948cce817880913600710eae9ec36</Anchor>
    <Abstract>Logical or. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Xor</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a8b8f9b05316a5a6ac8ab96ee4a50a8e1</Anchor>
    <Abstract>Logical xor. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Equals</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a11fa22e85a9c0d132e1b15a82a78baa4</Anchor>
    <Abstract>Equivalence. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>asList</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ae7ba46433ec1355844759188a3442d0d</Anchor>
    <Abstract>A list representation of this value (or nullptr). </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>canScalarAdd</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a920e14952eada9735d330b2f18b5f117</Anchor>
    <Abstract>This Value can add a value to itself in a scalar fashion. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::dag::Callable</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::dag::Callable</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_callable.html</Path>
    <Abstract>A mixin type for something that can be called with parameters. </Abstract>
    <DeclaredIn>Callable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Call</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Callable</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_callable.html</Path>
    <Anchor>a7a3068f2c00a58e0a18918d1266a68bd</Anchor>
    <Abstract>Call this function with (named) arguments. </Abstract>
    <DeclaredIn>Callable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NameArguments</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Callable</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_callable.html</Path>
    <Anchor>a91ee7aebd855f6bb67628c98f3036dcb</Anchor>
    <Abstract>Name all of the arguments in v according to the rules for positional and keyword arguments. </Abstract>
    <DeclaredIn>Callable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::dag::DAG</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::dag::DAG</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_d_a_g.html</Path>
    <Abstract>A directed acyclic graph of build actions. </Abstract>
    <DeclaredIn>DAG.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>topLevelTargets</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::DAG</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_d_a_g.html</Path>
    <Anchor>a74699d2f4a751acaa7f312b3e0c9cb92</Anchor>
    <Abstract>A file&amp;#39;s top-level targets, in order of original definition. </Abstract>
    <DeclaredIn>DAG.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::DAG</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_d_a_g.html</Path>
    <Anchor>a2695a3f17195e4c14cbc7669bad7470d</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>DAG.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::dag::DAGBuilder</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::dag::DAGBuilder</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_d_a_g_builder.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dag</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::DAGBuilder</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_d_a_g_builder.html</Path>
    <Anchor>a6352bf3f47d17c8b5ed2dd040809e5a8</Anchor>
    <Abstract>Construct a DAG from the current DAGBuilder state. </Abstract>
    <DeclaredIn>DAGBuilder.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Define</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::DAGBuilder</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_d_a_g_builder.html</Path>
    <Anchor>ad7f91a139780c0b9338de85390d3a3d3</Anchor>
    <Abstract>Define a variable with a name and a value. </Abstract>
    <DeclaredIn>DAGBuilder.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AddRegeneration</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::DAGBuilder</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_d_a_g_builder.html</Path>
    <Anchor>a7008f764a1b1e34295e65ec22038af0c</Anchor>
    <Abstract>Add the build steps required to regenerate the DAG if Fabrique input files change. </Abstract>
    <DeclaredIn>DAGBuilder.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Bool</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::DAGBuilder</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_d_a_g_builder.html</Path>
    <Anchor>af8100bcbb8231b9f4f465aafe56508d5</Anchor>
    <Abstract>Create a dag::Boolean. </Abstract>
    <DeclaredIn>DAGBuilder.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Build</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::DAGBuilder</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_d_a_g_builder.html</Path>
    <Anchor>a971eb49716110fd00a90b401fa74d74f</Anchor>
    <Abstract>Construct a dag::Build from a dag::Rule and parameters. </Abstract>
    <DeclaredIn>DAGBuilder.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>File</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::DAGBuilder</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_d_a_g_builder.html</Path>
    <Anchor>a9dad9579d17442c33beef09307baf7fc</Anchor>
    <Abstract>Create a dag::File from a path. </Abstract>
    <DeclaredIn>DAGBuilder.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>File</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::DAGBuilder</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_d_a_g_builder.html</Path>
    <Anchor>a5d0f956e3abf186a762d408e762caefa</Anchor>
    <Abstract>Create a dag::File from a subdirectory and a filename. </Abstract>
    <DeclaredIn>DAGBuilder.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Function</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::DAGBuilder</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_d_a_g_builder.html</Path>
    <Anchor>a84feeea44061f92cc692417e9a67d1a8</Anchor>
    <Abstract>Define a dag::Function. </Abstract>
    <DeclaredIn>DAGBuilder.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Integer</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::DAGBuilder</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_d_a_g_builder.html</Path>
    <Anchor>ad30b4a8b942f355034b9cc145f5188c7</Anchor>
    <Abstract>Create a dag::Integer. </Abstract>
    <DeclaredIn>DAGBuilder.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Rule</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::DAGBuilder</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_d_a_g_builder.html</Path>
    <Anchor>a068195baa1676ea5c17b0cf8f6d9e8e1</Anchor>
    <Abstract>Create a dag::Rule in the current scope. </Abstract>
    <DeclaredIn>DAGBuilder.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>String</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::DAGBuilder</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_d_a_g_builder.html</Path>
    <Anchor>a9aafe20089f1c0d932d74a8e32cc76bb</Anchor>
    <Abstract>Create a dag::String. </Abstract>
    <DeclaredIn>DAGBuilder.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Struct</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::DAGBuilder</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_d_a_g_builder.html</Path>
    <Anchor>ade51bb813434c5ca1ca0691b626b1cbb</Anchor>
    <Abstract>Create a dag::Structure. </Abstract>
    <DeclaredIn>DAGBuilder.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Target</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::DAGBuilder</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_d_a_g_builder.html</Path>
    <Anchor>a10bcae2c630a84e312b14a209274454b</Anchor>
    <Abstract>Create a dag::Target using the current value name. </Abstract>
    <DeclaredIn>DAGBuilder.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::dag::DAGBuilder::Context</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::dag::DAGBuilder::Context</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_d_a_g_builder_1_1_context.html</Path>
    <Abstract>An object that can supply a DAGBuilder with names and types. </Abstract>
    <DeclaredIn>DAGBuilder.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::dag::File</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::dag::File</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_file.html</Path>
    <Abstract>A reference to a file on disk (source or target). </Abstract>
    <DeclaredIn>File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>absolute</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::File</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_file.html</Path>
    <Anchor>a516766962ef1893041d33a4548b8065b</Anchor>
    <Abstract>This file refers to an absolute path. </Abstract>
    <DeclaredIn>File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>directory</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::File</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_file.html</Path>
    <Anchor>ae5dfb520c54a7fb007a448af8c3c02ae</Anchor>
    <Abstract>Absolute path to the directory this file is in. </Abstract>
    <DeclaredIn>File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Add</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::File</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_file.html</Path>
    <Anchor>a1280b29892ac4c5aa32c510d2842ada3</Anchor>
    <Abstract>Name a file with my name + a suffix. </Abstract>
    <DeclaredIn>File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrefixWith</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::File</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_file.html</Path>
    <Anchor>a6b7f6c822856c0261f85d3028100dbe1</Anchor>
    <Abstract>Name a file with a prefix + my name. </Abstract>
    <DeclaredIn>File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>type</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::File</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_file.html</Path>
    <Anchor>a9427ecf5250bb0bc1dd7c1c77733d66a</Anchor>
    <Abstract>Our type is always a FileType. </Abstract>
    <DeclaredIn>File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::File</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_file.html</Path>
    <Anchor>a4cc58c49e192dd551775bb6672007793</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Negate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ae8cb7c35ecf1b9ee6f046d96af913184</Anchor>
    <Abstract>Unary &amp;#39;not&amp;#39; operator. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ScalarAdd</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a46d5d59d10b65356d6d98fdcc52aaacc</Anchor>
    <Abstract>Add another fabrique::dag::Value scalar-wise across this Value. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>And</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a50bc9254bb26faf85be56789f95f55d1</Anchor>
    <Abstract>Logical and. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Or</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a65a948cce817880913600710eae9ec36</Anchor>
    <Abstract>Logical or. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Xor</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a8b8f9b05316a5a6ac8ab96ee4a50a8e1</Anchor>
    <Abstract>Logical xor. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Equals</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a11fa22e85a9c0d132e1b15a82a78baa4</Anchor>
    <Abstract>Equivalence. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>asList</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ae7ba46433ec1355844759188a3442d0d</Anchor>
    <Abstract>A list representation of this value (or nullptr). </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>canScalarAdd</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a920e14952eada9735d330b2f18b5f117</Anchor>
    <Abstract>This Value can add a value to itself in a scalar fashion. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::dag::Formatter</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::dag::Formatter</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_formatter.html</Path>
    <Abstract>An object that converts DAG nodes into strings. </Abstract>
    <DeclaredIn>Formatter.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::dag::Function</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::dag::Function</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_function.html</Path>
    <Abstract>A reference to a user- or plugin-defined function. </Abstract>
    <DeclaredIn>Function.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Function</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_function.html</Path>
    <Anchor>a19d011823e9fad4165a5bfb325076df9</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Function.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Call</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Callable</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_callable.html</Path>
    <Anchor>a7a3068f2c00a58e0a18918d1266a68bd</Anchor>
    <Abstract>Call this function with (named) arguments. </Abstract>
    <DeclaredIn>Callable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NameArguments</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Callable</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_callable.html</Path>
    <Anchor>a91ee7aebd855f6bb67628c98f3036dcb</Anchor>
    <Abstract>Name all of the arguments in v according to the rules for positional and keyword arguments. </Abstract>
    <DeclaredIn>Callable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Negate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ae8cb7c35ecf1b9ee6f046d96af913184</Anchor>
    <Abstract>Unary &amp;#39;not&amp;#39; operator. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Add</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a42a00015dc0c9dd5a6604692e472412d</Anchor>
    <Abstract>Add this fabrique::dag::Value to a following Value. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrefixWith</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ae1c473aeb87106c445b7277bb6679ba5</Anchor>
    <Abstract>Apply the prefix operation: prefix this value with another value. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ScalarAdd</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a46d5d59d10b65356d6d98fdcc52aaacc</Anchor>
    <Abstract>Add another fabrique::dag::Value scalar-wise across this Value. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>And</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a50bc9254bb26faf85be56789f95f55d1</Anchor>
    <Abstract>Logical and. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Or</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a65a948cce817880913600710eae9ec36</Anchor>
    <Abstract>Logical or. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Xor</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a8b8f9b05316a5a6ac8ab96ee4a50a8e1</Anchor>
    <Abstract>Logical xor. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Equals</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a11fa22e85a9c0d132e1b15a82a78baa4</Anchor>
    <Abstract>Equivalence. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>asList</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ae7ba46433ec1355844759188a3442d0d</Anchor>
    <Abstract>A list representation of this value (or nullptr). </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>canScalarAdd</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a920e14952eada9735d330b2f18b5f117</Anchor>
    <Abstract>This Value can add a value to itself in a scalar fashion. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::dag::Integer</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::dag::Integer</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_integer.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Add</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Integer</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_integer.html</Path>
    <Anchor>a30ff45aabd476cc9fdcb85fa9ede128c</Anchor>
    <Abstract>Add this fabrique::dag::Value to a following Value. </Abstract>
    <DeclaredIn>Primitive.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Equals</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Integer</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_integer.html</Path>
    <Anchor>af1de5d81e73ddbbd8437b060533c31c2</Anchor>
    <Abstract>Equivalence. </Abstract>
    <DeclaredIn>Primitive.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Primitive&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_primitive.html</Path>
    <Anchor>a9f1062b055a7cc4552cee38d2e4481f4</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Negate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ae8cb7c35ecf1b9ee6f046d96af913184</Anchor>
    <Abstract>Unary &amp;#39;not&amp;#39; operator. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrefixWith</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ae1c473aeb87106c445b7277bb6679ba5</Anchor>
    <Abstract>Apply the prefix operation: prefix this value with another value. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ScalarAdd</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a46d5d59d10b65356d6d98fdcc52aaacc</Anchor>
    <Abstract>Add another fabrique::dag::Value scalar-wise across this Value. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>And</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a50bc9254bb26faf85be56789f95f55d1</Anchor>
    <Abstract>Logical and. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Or</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a65a948cce817880913600710eae9ec36</Anchor>
    <Abstract>Logical or. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Xor</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a8b8f9b05316a5a6ac8ab96ee4a50a8e1</Anchor>
    <Abstract>Logical xor. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>asList</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ae7ba46433ec1355844759188a3442d0d</Anchor>
    <Abstract>A list representation of this value (or nullptr). </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>canScalarAdd</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a920e14952eada9735d330b2f18b5f117</Anchor>
    <Abstract>This Value can add a value to itself in a scalar fashion. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::dag::List</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::dag::List</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_list.html</Path>
    <Abstract>The result of evaluating an expression. </Abstract>
    <DeclaredIn>List.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Add</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::List</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_list.html</Path>
    <Anchor>a3ca234dc75787e5fb7fc6f5efe58deec</Anchor>
    <Abstract>List addition is concatenation. </Abstract>
    <DeclaredIn>List.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrefixWith</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::List</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_list.html</Path>
    <Anchor>aac43fb0e208bff58510bb56a0c5b026f</Anchor>
    <Abstract>Apply the prefix operation: prefix this value with another value. </Abstract>
    <DeclaredIn>List.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ScalarAdd</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::List</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_list.html</Path>
    <Anchor>aa07b9619d3822d76039c485125b0e139</Anchor>
    <Abstract>Add another fabrique::dag::Value scalar-wise across this Value. </Abstract>
    <DeclaredIn>List.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>asList</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::List</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_list.html</Path>
    <Anchor>a62de562c49e8d1f2064d68a67a3b1c0f</Anchor>
    <Abstract>A list representation of this value (or nullptr). </Abstract>
    <DeclaredIn>List.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>canScalarAdd</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::List</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_list.html</Path>
    <Anchor>a969c26928d17ff819f7faa89d772d422</Anchor>
    <Abstract>This Value can add a value to itself in a scalar fashion. </Abstract>
    <DeclaredIn>List.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::List</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_list.html</Path>
    <Anchor>ae265be0faa533845d9e2df65bcfa22b8</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>List.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Negate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ae8cb7c35ecf1b9ee6f046d96af913184</Anchor>
    <Abstract>Unary &amp;#39;not&amp;#39; operator. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>And</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a50bc9254bb26faf85be56789f95f55d1</Anchor>
    <Abstract>Logical and. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Or</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a65a948cce817880913600710eae9ec36</Anchor>
    <Abstract>Logical or. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Xor</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a8b8f9b05316a5a6ac8ab96ee4a50a8e1</Anchor>
    <Abstract>Logical xor. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Equals</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a11fa22e85a9c0d132e1b15a82a78baa4</Anchor>
    <Abstract>Equivalence. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::dag::Parameter</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::dag::Parameter</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_parameter.html</Path>
    <Abstract>The result of evaluating an expression. </Abstract>
    <DeclaredIn>Parameter.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Parameter</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_parameter.html</Path>
    <Anchor>ac0011c2d55e3c40d8f68e0755dec3a2f</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Parameter.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::dag::Primitive</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>fabrique::dag::Primitive</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_primitive.html</Path>
    <Abstract>The result of evaluating an expression. </Abstract>
    <DeclaredIn>Primitive.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Primitive</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_primitive.html</Path>
    <Anchor>a9f1062b055a7cc4552cee38d2e4481f4</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Primitive.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Negate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ae8cb7c35ecf1b9ee6f046d96af913184</Anchor>
    <Abstract>Unary &amp;#39;not&amp;#39; operator. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Add</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a42a00015dc0c9dd5a6604692e472412d</Anchor>
    <Abstract>Add this fabrique::dag::Value to a following Value. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrefixWith</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ae1c473aeb87106c445b7277bb6679ba5</Anchor>
    <Abstract>Apply the prefix operation: prefix this value with another value. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ScalarAdd</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a46d5d59d10b65356d6d98fdcc52aaacc</Anchor>
    <Abstract>Add another fabrique::dag::Value scalar-wise across this Value. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>And</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a50bc9254bb26faf85be56789f95f55d1</Anchor>
    <Abstract>Logical and. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Or</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a65a948cce817880913600710eae9ec36</Anchor>
    <Abstract>Logical or. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Xor</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a8b8f9b05316a5a6ac8ab96ee4a50a8e1</Anchor>
    <Abstract>Logical xor. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Equals</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a11fa22e85a9c0d132e1b15a82a78baa4</Anchor>
    <Abstract>Equivalence. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>asList</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ae7ba46433ec1355844759188a3442d0d</Anchor>
    <Abstract>A list representation of this value (or nullptr). </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>canScalarAdd</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a920e14952eada9735d330b2f18b5f117</Anchor>
    <Abstract>This Value can add a value to itself in a scalar fashion. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::dag::Rule</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::dag::Rule</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_rule.html</Path>
    <Abstract>An action that transforms files into other files. </Abstract>
    <DeclaredIn>Rule.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Call</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Rule</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_rule.html</Path>
    <Anchor>ac80ae8352b202224978e313f2bbb26e7</Anchor>
    <Abstract>Call this function with (named) arguments. </Abstract>
    <DeclaredIn>Rule.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>arguments</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Rule</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_rule.html</Path>
    <Anchor>a1fd0bb99871aa1ae4adf7c1baf4faa3a</Anchor>
    <Abstract>Arguments define the action (e.g., command = &amp;#39;cc&amp;#39;). </Abstract>
    <DeclaredIn>Rule.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Rule</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_rule.html</Path>
    <Anchor>a7dec961dab4f2a220d1db43bd6a8e6f8</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Rule.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NameArguments</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Callable</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_callable.html</Path>
    <Anchor>a91ee7aebd855f6bb67628c98f3036dcb</Anchor>
    <Abstract>Name all of the arguments in v according to the rules for positional and keyword arguments. </Abstract>
    <DeclaredIn>Callable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Negate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ae8cb7c35ecf1b9ee6f046d96af913184</Anchor>
    <Abstract>Unary &amp;#39;not&amp;#39; operator. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Add</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a42a00015dc0c9dd5a6604692e472412d</Anchor>
    <Abstract>Add this fabrique::dag::Value to a following Value. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrefixWith</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ae1c473aeb87106c445b7277bb6679ba5</Anchor>
    <Abstract>Apply the prefix operation: prefix this value with another value. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ScalarAdd</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a46d5d59d10b65356d6d98fdcc52aaacc</Anchor>
    <Abstract>Add another fabrique::dag::Value scalar-wise across this Value. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>And</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a50bc9254bb26faf85be56789f95f55d1</Anchor>
    <Abstract>Logical and. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Or</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a65a948cce817880913600710eae9ec36</Anchor>
    <Abstract>Logical or. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Xor</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a8b8f9b05316a5a6ac8ab96ee4a50a8e1</Anchor>
    <Abstract>Logical xor. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Equals</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a11fa22e85a9c0d132e1b15a82a78baa4</Anchor>
    <Abstract>Equivalence. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>asList</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ae7ba46433ec1355844759188a3442d0d</Anchor>
    <Abstract>A list representation of this value (or nullptr). </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>canScalarAdd</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a920e14952eada9735d330b2f18b5f117</Anchor>
    <Abstract>This Value can add a value to itself in a scalar fashion. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::dag::String</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::dag::String</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_string.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Add</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::String</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_string.html</Path>
    <Anchor>a1494c64930d89eb720a6eecb605d0240</Anchor>
    <Abstract>Add this fabrique::dag::Value to a following Value. </Abstract>
    <DeclaredIn>Primitive.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Equals</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::String</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_string.html</Path>
    <Anchor>a1ebf6bb8d00d810a2a30bc2eaca70c1a</Anchor>
    <Abstract>Equivalence. </Abstract>
    <DeclaredIn>Primitive.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::String</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_string.html</Path>
    <Anchor>ab3e26fc60891cf46cc13613e5d70d74e</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Primitive.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Negate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ae8cb7c35ecf1b9ee6f046d96af913184</Anchor>
    <Abstract>Unary &amp;#39;not&amp;#39; operator. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrefixWith</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ae1c473aeb87106c445b7277bb6679ba5</Anchor>
    <Abstract>Apply the prefix operation: prefix this value with another value. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ScalarAdd</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a46d5d59d10b65356d6d98fdcc52aaacc</Anchor>
    <Abstract>Add another fabrique::dag::Value scalar-wise across this Value. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>And</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a50bc9254bb26faf85be56789f95f55d1</Anchor>
    <Abstract>Logical and. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Or</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a65a948cce817880913600710eae9ec36</Anchor>
    <Abstract>Logical or. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Xor</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a8b8f9b05316a5a6ac8ab96ee4a50a8e1</Anchor>
    <Abstract>Logical xor. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>asList</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ae7ba46433ec1355844759188a3442d0d</Anchor>
    <Abstract>A list representation of this value (or nullptr). </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>canScalarAdd</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a920e14952eada9735d330b2f18b5f117</Anchor>
    <Abstract>This Value can add a value to itself in a scalar fashion. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::dag::Structure</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::dag::Structure</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_structure.html</Path>
    <Abstract>A reference to a file on disk (source or target). </Abstract>
    <DeclaredIn>Structure.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Structure</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_structure.html</Path>
    <Anchor>ac8ec0851829718af3ec4b0e99bec425b</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Structure.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Negate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ae8cb7c35ecf1b9ee6f046d96af913184</Anchor>
    <Abstract>Unary &amp;#39;not&amp;#39; operator. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Add</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a42a00015dc0c9dd5a6604692e472412d</Anchor>
    <Abstract>Add this fabrique::dag::Value to a following Value. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrefixWith</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ae1c473aeb87106c445b7277bb6679ba5</Anchor>
    <Abstract>Apply the prefix operation: prefix this value with another value. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ScalarAdd</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a46d5d59d10b65356d6d98fdcc52aaacc</Anchor>
    <Abstract>Add another fabrique::dag::Value scalar-wise across this Value. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>And</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a50bc9254bb26faf85be56789f95f55d1</Anchor>
    <Abstract>Logical and. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Or</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a65a948cce817880913600710eae9ec36</Anchor>
    <Abstract>Logical or. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Xor</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a8b8f9b05316a5a6ac8ab96ee4a50a8e1</Anchor>
    <Abstract>Logical xor. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Equals</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a11fa22e85a9c0d132e1b15a82a78baa4</Anchor>
    <Abstract>Equivalence. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>asList</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ae7ba46433ec1355844759188a3442d0d</Anchor>
    <Abstract>A list representation of this value (or nullptr). </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>canScalarAdd</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a920e14952eada9735d330b2f18b5f117</Anchor>
    <Abstract>This Value can add a value to itself in a scalar fashion. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Create</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>fabrique::dag::Structure</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_structure.html</Path>
    <Anchor>afc3091fe4a1135197ad61c74fcb93ab2</Anchor>
    <Abstract>Create a structure from an (optionally empty) vector of values. </Abstract>
    <DeclaredIn>Structure.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Create</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>fabrique::dag::Structure</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_structure.html</Path>
    <Anchor>ad9fbb0bf6ecc49456ab6ab47a96509f0</Anchor>
    <Abstract>Create a structure from a non-empty vector of values. </Abstract>
    <DeclaredIn>Structure.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::dag::Target</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::dag::Target</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_target.html</Path>
    <Abstract>A named build target that references a set of files. </Abstract>
    <DeclaredIn>Target.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Add</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Target</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_target.html</Path>
    <Anchor>aab162913b385b748614c76aaa3d44bb8</Anchor>
    <Abstract>Add this fabrique::dag::Value to a following Value. </Abstract>
    <DeclaredIn>Target.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrefixWith</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Target</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_target.html</Path>
    <Anchor>a88d4cb4490a3e07cfbb2c7a388b1343c</Anchor>
    <Abstract>Apply the prefix operation: prefix this value with another value. </Abstract>
    <DeclaredIn>Target.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ScalarAdd</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Target</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_target.html</Path>
    <Anchor>a85fa18273c41a55e79b3441a9b989969</Anchor>
    <Abstract>Add another fabrique::dag::Value scalar-wise across this Value. </Abstract>
    <DeclaredIn>Target.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>And</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Target</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_target.html</Path>
    <Anchor>ac0d3174b8adaec2777889a3b00a6b955</Anchor>
    <Abstract>Logical and. </Abstract>
    <DeclaredIn>Target.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Or</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Target</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_target.html</Path>
    <Anchor>a17939e19cd31f350e3a884955270f683</Anchor>
    <Abstract>Logical or. </Abstract>
    <DeclaredIn>Target.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Xor</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Target</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_target.html</Path>
    <Anchor>a031d8010f7cd0fb98f7822c75284b45a</Anchor>
    <Abstract>Logical xor. </Abstract>
    <DeclaredIn>Target.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Equals</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Target</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_target.html</Path>
    <Anchor>a3b3fed759da80229c9f63110910e9d07</Anchor>
    <Abstract>Equivalence. </Abstract>
    <DeclaredIn>Target.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>asList</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Target</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_target.html</Path>
    <Anchor>aa0efd4401520701daa3fabba173e045d</Anchor>
    <Abstract>A list representation of this value (or nullptr). </Abstract>
    <DeclaredIn>Target.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Target</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_target.html</Path>
    <Anchor>a893236bf2c0b80c82ead197a72cfd363</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Target.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Negate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ae8cb7c35ecf1b9ee6f046d96af913184</Anchor>
    <Abstract>Unary &amp;#39;not&amp;#39; operator. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>canScalarAdd</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a920e14952eada9735d330b2f18b5f117</Anchor>
    <Abstract>This Value can add a value to itself in a scalar fashion. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::dag::UndefinedValueException</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::dag::UndefinedValueException</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_undefined_value_exception.html</Path>
    <Abstract>An unexpected duplicate was encountered. </Abstract>
    <DeclaredIn>UndefinedValueException.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::SourceCodeException</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_source_code_exception.html</Path>
    <Anchor>aba85f7c69a393e4f4f4ac7c9ae56460b</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>exceptions.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::dag::Value</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Abstract>The result of evaluating an expression. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Negate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ae8cb7c35ecf1b9ee6f046d96af913184</Anchor>
    <Abstract>Unary &amp;#39;not&amp;#39; operator. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Add</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a42a00015dc0c9dd5a6604692e472412d</Anchor>
    <Abstract>Add this fabrique::dag::Value to a following Value. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrefixWith</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ae1c473aeb87106c445b7277bb6679ba5</Anchor>
    <Abstract>Apply the prefix operation: prefix this value with another value. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ScalarAdd</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a46d5d59d10b65356d6d98fdcc52aaacc</Anchor>
    <Abstract>Add another fabrique::dag::Value scalar-wise across this Value. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>And</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a50bc9254bb26faf85be56789f95f55d1</Anchor>
    <Abstract>Logical and. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Or</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a65a948cce817880913600710eae9ec36</Anchor>
    <Abstract>Logical or. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Xor</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a8b8f9b05316a5a6ac8ab96ee4a50a8e1</Anchor>
    <Abstract>Logical xor. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Equals</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a11fa22e85a9c0d132e1b15a82a78baa4</Anchor>
    <Abstract>Equivalence. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>asList</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ae7ba46433ec1355844759188a3442d0d</Anchor>
    <Abstract>A list representation of this value (or nullptr). </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>canScalarAdd</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a920e14952eada9735d330b2f18b5f117</Anchor>
    <Abstract>This Value can add a value to itself in a scalar fashion. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::Printable</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_printable.html</Path>
    <Anchor>a7b148c5f200de45f3ad33a37a090997f</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Printable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::dag::Visitor</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::dag::Visitor</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_visitor.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::plugin::Loader</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::plugin::Loader</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1plugin_1_1_loader.html</Path>
    <Abstract>Support for loading plugins from shared libraries. </Abstract>
    <DeclaredIn>Loader.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Load</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::plugin::Loader</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1plugin_1_1_loader.html</Path>
    <Anchor>a19d5cd50cc160fe0d7ad444168e84692</Anchor>
    <Abstract>Load a shared library with a given (library) name. </Abstract>
    <DeclaredIn>Loader.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::plugin::Plugin</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::plugin::Plugin</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1plugin_1_1_plugin.html</Path>
    <Abstract>A plugin that provides extra functionality to Fabrique build descriptions. </Abstract>
    <DeclaredIn>Plugin.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::plugin::Plugin::Descriptor</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::plugin::Plugin::Descriptor</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1plugin_1_1_plugin_1_1_descriptor.html</Path>
    <Abstract>Static information about a plugin. </Abstract>
    <DeclaredIn>Plugin.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::plugin::Registry</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::plugin::Registry</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1plugin_1_1_registry.html</Path>
    <Abstract>A registry for naming Fabrique Plugin objects. </Abstract>
    <DeclaredIn>Registry.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>option</Name>
      <APILanguage>c</APILanguage>
      <Type>ns</Type>
      <Scope>option</Scope>
    </TokenIdentifier>
    <Path>namespaceoption.html</Path>
    <Abstract>The namespace of The Lean Mean C++ Option Parser. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>CheckArg</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>option</Scope>
    </TokenIdentifier>
    <Path>namespaceoption.html</Path>
    <Anchor>a4afb7f04597f34439679509baf4b6d39</Anchor>
    <Abstract>Signature of functions that check if an argument is valid for a certain type of option. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>printUsage</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>option</Scope>
    </TokenIdentifier>
    <Path>namespaceoption.html</Path>
    <Anchor>afc8bb7e040a98a0b33ff1ce9da1be0d1</Anchor>
    <Abstract>Outputs a nicely formatted usage string with support for multi-column formatting and line-wrapping...</Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ARG_NONE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>option</Scope>
    </TokenIdentifier>
    <Path>namespaceoption.html</Path>
    <Anchor>aee8c76a07877335762631491e7a5a1a9a353903b042e8eb0aa2f60c0043a58a7e</Anchor>
    <Abstract>The option does not take an argument. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ARG_OK</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>option</Scope>
    </TokenIdentifier>
    <Path>namespaceoption.html</Path>
    <Anchor>aee8c76a07877335762631491e7a5a1a9a445e08cb1747e5a22929e7ef2da43b55</Anchor>
    <Abstract>The argument is acceptable for the option. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ARG_IGNORE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>option</Scope>
    </TokenIdentifier>
    <Path>namespaceoption.html</Path>
    <Anchor>aee8c76a07877335762631491e7a5a1a9a83e0837c79c957525918111d33cab3a9</Anchor>
    <Abstract>The argument is not acceptable but that&amp;#39;s non-fatal because the option&amp;#39;s argument is optional...</Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ARG_ILLEGAL</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>option</Scope>
    </TokenIdentifier>
    <Path>namespaceoption.html</Path>
    <Anchor>aee8c76a07877335762631491e7a5a1a9a9528e32563b795bd2930b12d0a5e382d</Anchor>
    <Abstract>The argument is not acceptable and that&amp;#39;s fatal. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>option::Arg</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>option::Arg</Scope>
    </TokenIdentifier>
    <Path>structoption_1_1_arg.html</Path>
    <Abstract>Functions for checking the validity of option arguments. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>None</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>option::Arg</Scope>
    </TokenIdentifier>
    <Path>structoption_1_1_arg.html</Path>
    <Anchor>a7fc01987899c91c6b6a1be5711a46e22</Anchor>
    <Abstract>For options that don&amp;#39;t take an argument: Returns ARG_NONE. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Optional</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>option::Arg</Scope>
    </TokenIdentifier>
    <Path>structoption_1_1_arg.html</Path>
    <Anchor>aadb5316ecbc9eb0a7f0019d14bf35ad0</Anchor>
    <Abstract>Returns ARG_OK if the argument is attached and ARG_IGNORE otherwise. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>option::Descriptor</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>option::Descriptor</Scope>
    </TokenIdentifier>
    <Path>structoption_1_1_descriptor.html</Path>
    <Abstract>Describes an option, its help text (usage) and how it should be parsed. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>index</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>option::Descriptor</Scope>
    </TokenIdentifier>
    <Path>structoption_1_1_descriptor.html</Path>
    <Anchor>a1fee8ac44f529c99ac2b1149b4c391b1</Anchor>
    <Abstract>Index of this option&amp;#39;s linked list in the array filled in by the parser. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>type</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>option::Descriptor</Scope>
    </TokenIdentifier>
    <Path>structoption_1_1_descriptor.html</Path>
    <Anchor>a1b220dabd8aad075fa441a80f9b9343c</Anchor>
    <Abstract>Used to distinguish between options with the same fabrique::index. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>shortopt</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>option::Descriptor</Scope>
    </TokenIdentifier>
    <Path>structoption_1_1_descriptor.html</Path>
    <Anchor>a0dba4ccca59c19d6ed4081391fca5adb</Anchor>
    <Abstract>Each char in this string will be accepted as a short option character. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>longopt</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>option::Descriptor</Scope>
    </TokenIdentifier>
    <Path>structoption_1_1_descriptor.html</Path>
    <Anchor>a470c449dfa894c9bfda2dae026142b4b</Anchor>
    <Abstract>The long option name (without the leading – ). </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>check_arg</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>option::Descriptor</Scope>
    </TokenIdentifier>
    <Path>structoption_1_1_descriptor.html</Path>
    <Anchor>aa5d675dba0214a4abd73007ff163cc67</Anchor>
    <Abstract>For each option that matches fabrique::shortopt or longopt this function will be called to check a po...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>help</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>option::Descriptor</Scope>
    </TokenIdentifier>
    <Path>structoption_1_1_descriptor.html</Path>
    <Anchor>a9045b19311533e1b8a08645d57149c79</Anchor>
    <Abstract>The usage text associated with the options in this Descriptor. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>option::Option</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>option::Option</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_option.html</Path>
    <Abstract>A parsed option from the command line together with its argument if it has one. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>type</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::Option</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_option.html</Path>
    <Anchor>a6560fa0526e2affd87d5a10622336af4</Anchor>
    <Abstract>Returns Descriptor::type of this Option&amp;#39;s Descriptor, or 0 if this Option is invalid (unused)...</Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>index</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::Option</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_option.html</Path>
    <Anchor>ac0acba91bbfcca0c35cfc54f197b15d2</Anchor>
    <Abstract>Returns Descriptor::index of this Option&amp;#39;s Descriptor, or -1 if this Option is invalid (unused)...</Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>count</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::Option</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_option.html</Path>
    <Anchor>a8a632dcd89af60fe0806deb756c08f14</Anchor>
    <Abstract>Returns the number of times this Option (or others with the same Descriptor::index) occurs in the arg...</Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isFirst</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::Option</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_option.html</Path>
    <Anchor>aee7a11f90cf4b70f65fb6bdf4db2c922</Anchor>
    <Abstract>Returns true iff this is the first element of the linked list. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isLast</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::Option</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_option.html</Path>
    <Anchor>ad60789506c3df60dedd4a006af56ece9</Anchor>
    <Abstract>Returns true iff this is the last element of the linked list. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>first</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::Option</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_option.html</Path>
    <Anchor>abb4e13cd7c90999c8a6b1f871cece283</Anchor>
    <Abstract>Returns a pointer to the first element of the linked list. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>last</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::Option</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_option.html</Path>
    <Anchor>afe2aff68191e55b59c53fac3dbbcd7c3</Anchor>
    <Abstract>Returns a pointer to the last element of the linked list. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>prev</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::Option</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_option.html</Path>
    <Anchor>a4d12001a91b0b35cf47437d0c60d2b52</Anchor>
    <Abstract>Returns a pointer to the previous element of the linked list or NULL if called on first()...</Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>prevwrap</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::Option</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_option.html</Path>
    <Anchor>a1226e45dc2de30f269b2aff1784bbee7</Anchor>
    <Abstract>Returns a pointer to the previous element of the linked list with wrap-around from first() to last()...</Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>next</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::Option</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_option.html</Path>
    <Anchor>a59ae9aed505f4d410633bb36478a32be</Anchor>
    <Abstract>Returns a pointer to the next element of the linked list or NULL if called on last(). </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>nextwrap</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::Option</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_option.html</Path>
    <Anchor>ae8d8c058af3c781cb1d444998df48fef</Anchor>
    <Abstract>Returns a pointer to the next element of the linked list with wrap-around from last() to first()...</Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>append</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::Option</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_option.html</Path>
    <Anchor>a59030822a1ec4e667e6c288d7e5ec961</Anchor>
    <Abstract>Makes new_last the new last() by chaining it into the list after last(). </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator const Option *</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::Option</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_option.html</Path>
    <Anchor>aaaeedf023bc3f5eee0b199c64d8fe1ec</Anchor>
    <Abstract>Casts from Option to const Option* but only if this Option is valid. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator Option *</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::Option</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_option.html</Path>
    <Anchor>ac5b9235d79208035d97e41fe17ba04d6</Anchor>
    <Abstract>Casts from Option to Option* but only if this Option is valid. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Option</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::Option</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_option.html</Path>
    <Anchor>aa2810152fc23b14175b115d1a7d38095</Anchor>
    <Abstract>Creates a new Option that is a one-element linked list and has NULL fabrique::desc, name, arg and namelen. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Option</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::Option</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_option.html</Path>
    <Anchor>a385221e2a8f37c548f0d5777bfddb216</Anchor>
    <Abstract>Creates a new Option that is a one-element linked list and has the given values for fabrique::desc...</Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::Option</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_option.html</Path>
    <Anchor>adb4b44f3778df8f28a04c48bd1b4a72b</Anchor>
    <Abstract>Makes *this a copy of orig except for the linked list pointers. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Option</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::Option</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_option.html</Path>
    <Anchor>a4053240fecad1a3b1d8e4dc06b7aa8c4</Anchor>
    <Abstract>Makes *this a copy of orig except for the linked list pointers. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>desc</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>option::Option</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_option.html</Path>
    <Anchor>af8d664a7b5de1425008b1812a90a0c23</Anchor>
    <Abstract>Pointer to this Option&amp;#39;s Descriptor. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>name</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>option::Option</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_option.html</Path>
    <Anchor>a02a76b4896abd22d0ba8514362261de9</Anchor>
    <Abstract>The name of the option as used on the command line. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>arg</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>option::Option</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_option.html</Path>
    <Anchor>a402be734987458364b0f473acae36238</Anchor>
    <Abstract>Pointer to this Option&amp;#39;s argument (if any). </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>namelen</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>option::Option</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_option.html</Path>
    <Anchor>a3aa2957b19ad5815873441b415d56050</Anchor>
    <Abstract>The length of the option fabrique::name. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>option::Parser</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>option::Parser</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_parser.html</Path>
    <Abstract>Checks argument vectors for validity and parses them into data structures that are easier to work wit...</Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Parser</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::Parser</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_parser.html</Path>
    <Anchor>a895e9a1db19f1a026ee6a7412de17d04</Anchor>
    <Abstract>Creates a new Parser. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Parser</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::Parser</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_parser.html</Path>
    <Anchor>aa747e9792c9c08ede32b6c323438db71</Anchor>
    <Abstract>Creates a new Parser and immediately parses the given argument vector. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Parser</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::Parser</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_parser.html</Path>
    <Anchor>a78b4c7d73fff17204dd908b1b167dec9</Anchor>
    <Abstract>Parser(...) with non-const argv. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Parser</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::Parser</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_parser.html</Path>
    <Anchor>ae4100da4b662937ead22484e6cfc7cec</Anchor>
    <Abstract>POSIX Parser(...) (gnu==false). </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Parser</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::Parser</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_parser.html</Path>
    <Anchor>a23ee244634a38d05f6c4cb1e3692a8a9</Anchor>
    <Abstract>POSIX Parser(...) (gnu==false) with non-const argv. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>parse</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::Parser</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_parser.html</Path>
    <Anchor>a6e0b5778d1cfbd6cd51240e74d01e138</Anchor>
    <Abstract>Parses the given argument vector. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>parse</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::Parser</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_parser.html</Path>
    <Anchor>ab26280e3b2ebc2f2fc4ed8b3b1e2a39c</Anchor>
    <Abstract>parse() with non-const argv. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>parse</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::Parser</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_parser.html</Path>
    <Anchor>a41885a7308249c8532714e15b36106bd</Anchor>
    <Abstract>POSIX parse() (gnu==false). </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>parse</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::Parser</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_parser.html</Path>
    <Anchor>ad40585faa23a97a186cf9a45b8c2b42b</Anchor>
    <Abstract>POSIX parse() (gnu==false) with non-const argv. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>optionsCount</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::Parser</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_parser.html</Path>
    <Anchor>aee62badd2a19a5b88cbc4a9b11813b82</Anchor>
    <Abstract>Returns the number of valid Option objects in buffer[]. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>nonOptionsCount</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::Parser</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_parser.html</Path>
    <Anchor>aa64a6a7c196993a1b20d48e8ddd12a34</Anchor>
    <Abstract>Returns the number of non-option arguments that remained at the end of the most recent parse() that a...</Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>nonOptions</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::Parser</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_parser.html</Path>
    <Anchor>a2c11b050f4248d71758dda52c5f9154d</Anchor>
    <Abstract>Returns a pointer to an array of non-option arguments (only valid if nonOptionsCount() &gt;0 )...</Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>nonOption</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::Parser</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_parser.html</Path>
    <Anchor>aeeafbf2892a5aca90b89803b2b1cb031</Anchor>
    <Abstract>Returns nonOptions()[i] (without checking if i is in range!). </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>error</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::Parser</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_parser.html</Path>
    <Anchor>a2caa149140067b4d13e4d7a104bb3090</Anchor>
    <Abstract>Returns true if an unrecoverable error occurred while parsing options. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>option::Parser::Action</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>option::Parser::Action</Scope>
    </TokenIdentifier>
    <Path>structoption_1_1_parser_1_1_action.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>perform</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>option::Parser::Action</Scope>
    </TokenIdentifier>
    <Path>structoption_1_1_parser_1_1_action.html</Path>
    <Anchor>a176b5f783bb35eb015b6d2c09422457d</Anchor>
    <Abstract>Called by Parser::workhorse() for each Option that has been successfully parsed (including unknown op...</Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>finished</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>option::Parser::Action</Scope>
    </TokenIdentifier>
    <Path>structoption_1_1_parser_1_1_action.html</Path>
    <Anchor>a3ec558b51e34d33d116f14587289e032</Anchor>
    <Abstract>Called by Parser::workhorse() after finishing the parse. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>option::Parser::StoreOptionAction</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>option::Parser::StoreOptionAction</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_parser_1_1_store_option_action.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>StoreOptionAction</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::Parser::StoreOptionAction</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_parser_1_1_store_option_action.html</Path>
    <Anchor>aaa638cdd712202e3e10471d4299f7f9d</Anchor>
    <Abstract>Number of slots in buffer. -1 means &quot;large enough&quot;. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>perform</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::Parser::StoreOptionAction</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_parser_1_1_store_option_action.html</Path>
    <Anchor>a8931919fba5516377c202920db2b2f84</Anchor>
    <Abstract>Called by Parser::workhorse() for each Option that has been successfully parsed (including unknown op...</Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>finished</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::Parser::StoreOptionAction</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_parser_1_1_store_option_action.html</Path>
    <Anchor>a617f675ef50a72ae36ce91f065bc8441</Anchor>
    <Abstract>Called by Parser::workhorse() after finishing the parse. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>option::PrintUsageImplementation</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>option::PrintUsageImplementation</Scope>
    </TokenIdentifier>
    <Path>structoption_1_1_print_usage_implementation.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isWideChar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>option::PrintUsageImplementation</Scope>
    </TokenIdentifier>
    <Path>structoption_1_1_print_usage_implementation.html</Path>
    <Anchor>a41bfaabdf21e68877f3030d36acc0798</Anchor>
    <Abstract>Returns true if ch is the unicode code point of a wide character. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>option::PrintUsageImplementation::FunctionWriter</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>option::PrintUsageImplementation::FunctionWriter</Scope>
    </TokenIdentifier>
    <Path>structoption_1_1_print_usage_implementation_1_1_function_writer.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator()</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>option::PrintUsageImplementation::FunctionWriter</Scope>
    </TokenIdentifier>
    <Path>structoption_1_1_print_usage_implementation_1_1_function_writer.html</Path>
    <Anchor>aa8e8f237845e210e36ca431d7e503a70</Anchor>
    <Abstract>Writes the given number of chars beginning at the given pointer somewhere. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>option::PrintUsageImplementation::IStringWriter</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>option::PrintUsageImplementation::IStringWriter</Scope>
    </TokenIdentifier>
    <Path>structoption_1_1_print_usage_implementation_1_1_i_string_writer.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator()</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>option::PrintUsageImplementation::IStringWriter</Scope>
    </TokenIdentifier>
    <Path>structoption_1_1_print_usage_implementation_1_1_i_string_writer.html</Path>
    <Anchor>a497172d92e09072a16996c127dd3def8</Anchor>
    <Abstract>Writes the given number of chars beginning at the given pointer somewhere. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>option::PrintUsageImplementation::LinePartIterator</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>option::PrintUsageImplementation::LinePartIterator</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_print_usage_implementation_1_1_line_part_iterator.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>LinePartIterator</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::PrintUsageImplementation::LinePartIterator</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_print_usage_implementation_1_1_line_part_iterator.html</Path>
    <Anchor>a8a61fef9ba907fd4e10ff0fd772ee5e7</Anchor>
    <Abstract>Creates an iterator for usage. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>nextTable</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::PrintUsageImplementation::LinePartIterator</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_print_usage_implementation_1_1_line_part_iterator.html</Path>
    <Anchor>afe43ca12d399ed3c871e4dc5bf63356e</Anchor>
    <Abstract>Moves iteration to the next table (if any). </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>restartTable</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::PrintUsageImplementation::LinePartIterator</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_print_usage_implementation_1_1_line_part_iterator.html</Path>
    <Anchor>a0cbe8ed79ab4958a70b957598dd76fa6</Anchor>
    <Abstract>Reset iteration to the beginning of the current table. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>nextRow</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::PrintUsageImplementation::LinePartIterator</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_print_usage_implementation_1_1_line_part_iterator.html</Path>
    <Anchor>a55d5c3e50f9c1d8cd48f518899a5a48c</Anchor>
    <Abstract>Moves iteration to the next row (if any). </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>restartRow</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::PrintUsageImplementation::LinePartIterator</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_print_usage_implementation_1_1_line_part_iterator.html</Path>
    <Anchor>a96c448939f33a811174ea7b5addb312e</Anchor>
    <Abstract>Reset iteration to the beginning of the current row. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>next</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::PrintUsageImplementation::LinePartIterator</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_print_usage_implementation_1_1_line_part_iterator.html</Path>
    <Anchor>a58b8743da57de2d108472eee60324df6</Anchor>
    <Abstract>Moves iteration to the next part (if any). </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>column</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::PrintUsageImplementation::LinePartIterator</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_print_usage_implementation_1_1_line_part_iterator.html</Path>
    <Anchor>afa41382acabcd37ca70f7e8b9994b8c0</Anchor>
    <Abstract>Returns the index (counting from 0) of the column in which the part pointed to by fabrique::data() is...</Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>line</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::PrintUsageImplementation::LinePartIterator</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_print_usage_implementation_1_1_line_part_iterator.html</Path>
    <Anchor>a8ad1201d95bf0bd9453a731da8c15a10</Anchor>
    <Abstract>Returns the index (counting from 0) of the line within the current column this part belongs to...</Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>length</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::PrintUsageImplementation::LinePartIterator</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_print_usage_implementation_1_1_line_part_iterator.html</Path>
    <Anchor>a557e521cb41e951a34df2737d25f9dce</Anchor>
    <Abstract>Returns the length of the part pointed to by fabrique::data() in raw chars (not UTF-8 characters)...</Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>screenLength</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::PrintUsageImplementation::LinePartIterator</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_print_usage_implementation_1_1_line_part_iterator.html</Path>
    <Anchor>a03b6fedfe805d7fc73216da5cd33270e</Anchor>
    <Abstract>Returns the width in screen columns of the part pointed to by fabrique::data(). </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::PrintUsageImplementation::LinePartIterator</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_print_usage_implementation_1_1_line_part_iterator.html</Path>
    <Anchor>ada26229add63bd479c7877f2f8e32908</Anchor>
    <Abstract>Returns the current part of the iteration. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>option::PrintUsageImplementation::LineWrapper</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>option::PrintUsageImplementation::LineWrapper</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_print_usage_implementation_1_1_line_wrapper.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>flush</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::PrintUsageImplementation::LineWrapper</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_print_usage_implementation_1_1_line_wrapper.html</Path>
    <Anchor>a9383db9fd3fb18ce091db63ce0b149fd</Anchor>
    <Abstract>Writes out all remaining data from the LineWrapper using write. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::PrintUsageImplementation::LineWrapper</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_print_usage_implementation_1_1_line_wrapper.html</Path>
    <Anchor>add20eca40865ad892d6c28b412ac14d5</Anchor>
    <Abstract>Process, wrap and output the next piece of data. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>LineWrapper</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::PrintUsageImplementation::LineWrapper</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_print_usage_implementation_1_1_line_wrapper.html</Path>
    <Anchor>a288f16b6e928e9f54f48e13ff6817e95</Anchor>
    <Abstract>Constructs a LineWrapper that wraps its output to fit into screen columns x1 (incl.) to x2 (excl.). </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>option::PrintUsageImplementation::OStreamWriter</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>option::PrintUsageImplementation::OStreamWriter</Scope>
    </TokenIdentifier>
    <Path>structoption_1_1_print_usage_implementation_1_1_o_stream_writer.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator()</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>option::PrintUsageImplementation::OStreamWriter</Scope>
    </TokenIdentifier>
    <Path>structoption_1_1_print_usage_implementation_1_1_o_stream_writer.html</Path>
    <Anchor>a323890fba123ad476fa2471029fc7b23</Anchor>
    <Abstract>Writes the given number of chars beginning at the given pointer somewhere. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>option::PrintUsageImplementation::StreamWriter</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>option::PrintUsageImplementation::StreamWriter</Scope>
    </TokenIdentifier>
    <Path>structoption_1_1_print_usage_implementation_1_1_stream_writer.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator()</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>option::PrintUsageImplementation::StreamWriter</Scope>
    </TokenIdentifier>
    <Path>structoption_1_1_print_usage_implementation_1_1_stream_writer.html</Path>
    <Anchor>ae39bc6378c22d24a490104b7764c37b7</Anchor>
    <Abstract>Writes the given number of chars beginning at the given pointer somewhere. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>option::PrintUsageImplementation::SyscallWriter</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>option::PrintUsageImplementation::SyscallWriter</Scope>
    </TokenIdentifier>
    <Path>structoption_1_1_print_usage_implementation_1_1_syscall_writer.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator()</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>option::PrintUsageImplementation::SyscallWriter</Scope>
    </TokenIdentifier>
    <Path>structoption_1_1_print_usage_implementation_1_1_syscall_writer.html</Path>
    <Anchor>a61c1c010d9b67affd5f1208f0a3e9cf0</Anchor>
    <Abstract>Writes the given number of chars beginning at the given pointer somewhere. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>option::PrintUsageImplementation::TemporaryWriter</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>option::PrintUsageImplementation::TemporaryWriter</Scope>
    </TokenIdentifier>
    <Path>structoption_1_1_print_usage_implementation_1_1_temporary_writer.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator()</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>option::PrintUsageImplementation::TemporaryWriter</Scope>
    </TokenIdentifier>
    <Path>structoption_1_1_print_usage_implementation_1_1_temporary_writer.html</Path>
    <Anchor>a674751ddfff63852b36c754878276b02</Anchor>
    <Abstract>Writes the given number of chars beginning at the given pointer somewhere. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>option::Stats</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>option::Stats</Scope>
    </TokenIdentifier>
    <Path>structoption_1_1_stats.html</Path>
    <Abstract>Determines the minimum lengths of the buffer and options arrays used for Parser. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Stats</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>option::Stats</Scope>
    </TokenIdentifier>
    <Path>structoption_1_1_stats.html</Path>
    <Anchor>a8660722c76e65d9328313fb360bdd282</Anchor>
    <Abstract>Creates a Stats object with counts set to 1 (for the sentinel element). </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Stats</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>option::Stats</Scope>
    </TokenIdentifier>
    <Path>structoption_1_1_stats.html</Path>
    <Anchor>a71373ec2b28842f45593e4405f7bc8ec</Anchor>
    <Abstract>Creates a new Stats object and immediately updates it for the given usage and argument vector...</Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Stats</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>option::Stats</Scope>
    </TokenIdentifier>
    <Path>structoption_1_1_stats.html</Path>
    <Anchor>a43ec104fdb0b8ae6148d04f3ad3d3a75</Anchor>
    <Abstract>Stats(...) with non-const argv. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Stats</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>option::Stats</Scope>
    </TokenIdentifier>
    <Path>structoption_1_1_stats.html</Path>
    <Anchor>ab5cafb7127099ef60cfb4cea205ad617</Anchor>
    <Abstract>POSIX Stats(...) (gnu==false). </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Stats</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>option::Stats</Scope>
    </TokenIdentifier>
    <Path>structoption_1_1_stats.html</Path>
    <Anchor>a9b8b4f275efaac6a509df75179929c70</Anchor>
    <Abstract>POSIX Stats(...) (gnu==false) with non-const argv. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>add</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>option::Stats</Scope>
    </TokenIdentifier>
    <Path>structoption_1_1_stats.html</Path>
    <Anchor>aa77e2a8b1704527d2d087820f4456143</Anchor>
    <Abstract>Updates this Stats object for the given usage and argument vector. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>add</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>option::Stats</Scope>
    </TokenIdentifier>
    <Path>structoption_1_1_stats.html</Path>
    <Anchor>a2aa7bc64a85dcd9c59576f6a11c2b747</Anchor>
    <Abstract>add() with non-const argv. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>add</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>option::Stats</Scope>
    </TokenIdentifier>
    <Path>structoption_1_1_stats.html</Path>
    <Anchor>a4fc47be5db7f52016e3142a9b9dd0d1e</Anchor>
    <Abstract>POSIX add() (gnu==false). </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>add</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>option::Stats</Scope>
    </TokenIdentifier>
    <Path>structoption_1_1_stats.html</Path>
    <Anchor>ad659604438f79c79f5bc009f2a16ca92</Anchor>
    <Abstract>POSIX add() (gnu==false) with non-const argv. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>buffer_max</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>option::Stats</Scope>
    </TokenIdentifier>
    <Path>structoption_1_1_stats.html</Path>
    <Anchor>a2c9a7b4174f91ba8bcadaa9ad6f0db06</Anchor>
    <Abstract>Number of elements needed for a buffer[] array to be used for parsing the same argument vectors that ...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>options_max</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>option::Stats</Scope>
    </TokenIdentifier>
    <Path>structoption_1_1_stats.html</Path>
    <Anchor>a8121787feb1c7db84fca3ccb012b0473</Anchor>
    <Abstract>Number of elements needed for an options[] array to be used for parsing the same argument vectors tha...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>option::Stats::CountOptionsAction</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>option::Stats::CountOptionsAction</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_stats_1_1_count_options_action.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>CountOptionsAction</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::Stats::CountOptionsAction</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_stats_1_1_count_options_action.html</Path>
    <Anchor>a24a38b87ad129b0e12660bd2019ba284</Anchor>
    <Abstract>Creates a new CountOptionsAction that will increase *buffer_max_ for each parsed Option. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>perform</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::Stats::CountOptionsAction</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_stats_1_1_count_options_action.html</Path>
    <Anchor>a29ab8a68d0a30736b99b4d2e5dece489</Anchor>
    <Abstract>Called by Parser::workhorse() for each Option that has been successfully parsed (including unknown op...</Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>finished</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>option::Parser::Action</Scope>
    </TokenIdentifier>
    <Path>structoption_1_1_parser_1_1_action.html</Path>
    <Anchor>a3ec558b51e34d33d116f14587289e032</Anchor>
    <Abstract>Called by Parser::workhorse() after finishing the parse. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Parser::CalculatorGrammar</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>Parser::CalculatorGrammar</Scope>
    </TokenIdentifier>
    <Path>struct_parser_1_1_calculator_grammar.html</Path>
    <Abstract>The (singleton) calculator grammar. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Parser::CalculatorGrammar</Scope>
    </TokenIdentifier>
    <Path>struct_parser_1_1_calculator_grammar.html</Path>
    <Anchor>a437179cf2618bd3ef1673d8a4ec6c9db</Anchor>
    <Abstract>Returns a singleton instance of this grammar. </Abstract>
    <DeclaredIn>calculator.cc</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ws</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>Parser::CalculatorGrammar</Scope>
    </TokenIdentifier>
    <Path>struct_parser_1_1_calculator_grammar.html</Path>
    <Anchor>af15f2a6f3dd837af5d69ba5e857b44c9</Anchor>
    <Abstract>Only spaces are recognised as whitespace in this toy example. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>digit</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>Parser::CalculatorGrammar</Scope>
    </TokenIdentifier>
    <Path>struct_parser_1_1_calculator_grammar.html</Path>
    <Anchor>a6a3c651ddac38c189d0df77220ee055c</Anchor>
    <Abstract>Digits are things in the range 0-9. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>num</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>Parser::CalculatorGrammar</Scope>
    </TokenIdentifier>
    <Path>struct_parser_1_1_calculator_grammar.html</Path>
    <Anchor>a9cbc66d9138d3809faebeea10e7e6df0</Anchor>
    <Abstract>Numbers are one or more digits, optionally followed by a decimal point, and one or more digits...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>val</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>Parser::CalculatorGrammar</Scope>
    </TokenIdentifier>
    <Path>struct_parser_1_1_calculator_grammar.html</Path>
    <Anchor>a0f010c7a79f07deae87d6a27b50f2cf6</Anchor>
    <Abstract>Values are either numbers or expressions in brackets (highest precedence). </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>mul_op</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>Parser::CalculatorGrammar</Scope>
    </TokenIdentifier>
    <Path>struct_parser_1_1_calculator_grammar.html</Path>
    <Anchor>a24e0c162b3dc114f27a14d654198e585</Anchor>
    <Abstract>Multiply operations are values or multiply, or divide operations, followed by a multiply symbol...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>div_op</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>Parser::CalculatorGrammar</Scope>
    </TokenIdentifier>
    <Path>struct_parser_1_1_calculator_grammar.html</Path>
    <Anchor>ac8bae1a6715e0af8d0a6e91c7b5e2412</Anchor>
    <Abstract>Divide operations follow the same syntax as multiply. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>mul</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>Parser::CalculatorGrammar</Scope>
    </TokenIdentifier>
    <Path>struct_parser_1_1_calculator_grammar.html</Path>
    <Anchor>a24b56e7f183dfd5fbbe2b5b5c0ca8490</Anchor>
    <Abstract>Multiply-precedence operations are either multiply or divide operations, or simple values (numbers of...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>add_op</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>Parser::CalculatorGrammar</Scope>
    </TokenIdentifier>
    <Path>struct_parser_1_1_calculator_grammar.html</Path>
    <Anchor>a2b65d4ca52ec4a5322389eabc0d0f6e0</Anchor>
    <Abstract>Add operations can have any expression on the left (including other add expressions), but only higher-precedence operations on the right. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sub_op</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>Parser::CalculatorGrammar</Scope>
    </TokenIdentifier>
    <Path>struct_parser_1_1_calculator_grammar.html</Path>
    <Anchor>a1bdb6f03abfbd695b661386774c735ff</Anchor>
    <Abstract>Subtract operations follow the same structure as add. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>expr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>Parser::CalculatorGrammar</Scope>
    </TokenIdentifier>
    <Path>struct_parser_1_1_calculator_grammar.html</Path>
    <Anchor>a57858f3d035a9fa02f847e8d9081d66d</Anchor>
    <Abstract>Expressions can be any of the other types. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Parser::CalculatorParser</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>Parser::CalculatorParser</Scope>
    </TokenIdentifier>
    <Path>class_parser_1_1_calculator_parser.html</Path>
    <Abstract>CalculatorParser, constructs an AST from an input string. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ASTParserDelegate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTParserDelegate</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_parser_delegate.html</Path>
    <Anchor>a2e025e2a7a12089b7a28b4b697e5952e</Anchor>
    <Abstract>Default constructor, registers this class in thread-local storage so that it can be referenced by Bin...</Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_parse_proc</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTParserDelegate</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_parser_delegate.html</Path>
    <Anchor>a76e03cfe1aaac176c5c4d1a6ae58880a</Anchor>
    <Abstract>Returns the handler for the specified rule. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>parse</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTParserDelegate</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_parser_delegate.html</Path>
    <Anchor>ac1c9c1d4f80df64b08371c3b73507460</Anchor>
    <Abstract>Parse an input i, starting from rule g in the grammar for which this is a delegate. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pegmatite::AsciiFileInput</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>pegmatite::AsciiFileInput</Scope>
    </TokenIdentifier>
    <Path>structpegmatite_1_1_ascii_file_input.html</Path>
    <Abstract>A concrete Input class that wraps a file. </Abstract>
    <DeclaredIn>parser.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AsciiFileInput</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>pegmatite::AsciiFileInput</Scope>
    </TokenIdentifier>
    <Path>structpegmatite_1_1_ascii_file_input.html</Path>
    <Anchor>afa4ef5940c39f26e848872757638db8e</Anchor>
    <Abstract>Construct a parser input from a specified file descriptor. </Abstract>
    <DeclaredIn>parser.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fillBuffer</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>pegmatite::AsciiFileInput</Scope>
    </TokenIdentifier>
    <Path>structpegmatite_1_1_ascii_file_input.html</Path>
    <Anchor>ad6f1dd8ac0ceb6bcf2b167e525e4f690</Anchor>
    <Abstract>Fill in the buffer with the next range. </Abstract>
    <DeclaredIn>parser.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>size</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>pegmatite::AsciiFileInput</Scope>
    </TokenIdentifier>
    <Path>structpegmatite_1_1_ascii_file_input.html</Path>
    <Anchor>ab7b11195fb1e5370591c0f5c42232988</Anchor>
    <Abstract>Returns the size of the buffer. </Abstract>
    <DeclaredIn>parser.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>begin</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::Input</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_input.html</Path>
    <Anchor>aa2de81d32ac45cb054c84971f520554f</Anchor>
    <Abstract>Returns an iterator for the start of the input. </Abstract>
    <DeclaredIn>parser.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>end</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::Input</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_input.html</Path>
    <Anchor>acd37d0d6a9930afce62a4acda31c9703</Anchor>
    <Abstract>Returns an iterator for the end of the input. </Abstract>
    <DeclaredIn>parser.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator[]</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::Input</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_input.html</Path>
    <Anchor>a8de0e9360fb19c24b722d0e0395ea6d8</Anchor>
    <Abstract>Fetch the character at the specified index. </Abstract>
    <DeclaredIn>parser.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Input</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::Input</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_input.html</Path>
    <Anchor>afea3c1a66bdbdea28925bf19acf59899</Anchor>
    <Abstract>Default constructor, sets the buffer start to be after the buffer end, so that the first request will...</Abstract>
    <DeclaredIn>parser.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Index</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>pegmatite::Input</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_input.html</Path>
    <Anchor>ac0045fa7291a66a8e885731f8f8d66af</Anchor>
    <Abstract>The type of indexes into the buffer. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~Input</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::Input</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_input.html</Path>
    <Anchor>a033e64af74c3c36a6d2397d4404ec82f</Anchor>
    <Abstract>Virtual destructor. </Abstract>
    <DeclaredIn>parser.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>static_buffer_size</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>pegmatite::Input</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_input.html</Path>
    <Anchor>a7b8c36f4028248753e432c12617ddfcb</Anchor>
    <Abstract>Size for the static buffer. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pegmatite::ASTContainer</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>pegmatite::ASTContainer</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_container.html</Path>
    <Abstract>type of ast member vector. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ASTContainer</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTContainer</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_container.html</Path>
    <Anchor>ae4e20ffce125dcea4cadd7f9bf94480d</Anchor>
    <Abstract>Constructs the container, setting a thread-local value to point to it allowing constructors in fields...</Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>construct</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTContainer</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_container.html</Path>
    <Anchor>aabb870b5cd14d74763e02230654d70b2</Anchor>
    <Abstract>Asks all members to construct themselves from the stack. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ASTNode</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTNode</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_node.html</Path>
    <Anchor>a9cfd880bd72900af6a9a050b6673653e</Anchor>
    <Abstract>Constructs the AST node, with a null parent. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ASTNode</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTNode</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_node.html</Path>
    <Anchor>a598362d64b01bc8266a8eac9341f6946</Anchor>
    <Abstract>Copying AST nodes is not supported. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~ASTNode</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTNode</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_node.html</Path>
    <Anchor>ae23a27b167341bfdd13ce781278074ac</Anchor>
    <Abstract>Destructor does nothing, virtual for subclasses to use. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>parent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTNode</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_node.html</Path>
    <Anchor>a405356e07d478dff3cb0a06681314dab</Anchor>
    <Abstract>Returns the parent of this AST node, or nullptr if there isn&amp;#39;t one (either if this is the root...</Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isa</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTNode</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_node.html</Path>
    <Anchor>aa837bc937c493e7dd4f067e34644c46b</Anchor>
    <Abstract>Root implementation of the RTTI-replacement for builds not wishing to use RTTI. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isa</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTNode</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_node.html</Path>
    <Anchor>a87ce42e787d1dbcceb8d9dfd5e18926c</Anchor>
    <Abstract>Returns true if this object is an instance of T. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_as</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTNode</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_node.html</Path>
    <Anchor>a392371c883f30b06fb70486fd209f778</Anchor>
    <Abstract>Returns a pointer to this object as a pointer to a child class, or nullptr if the cast would be unsaf...</Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>kind</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTNode</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_node.html</Path>
    <Anchor>a1e7fe53f436deccc338c2de2b65bed74</Anchor>
    <Abstract>Returns the kind of object class. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>classKind</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>pegmatite::ASTNode</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_node.html</Path>
    <Anchor>a99aaa8936ff1a0f3f3cf9a9b8a4c124a</Anchor>
    <Abstract>Returns the unique identifier for this class. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pegmatite::ASTList</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>pegmatite::ASTList</Scope>
    </TokenIdentifier>
    <Path>singletonpegmatite_1_1_a_s_t_list.html</Path>
    <Abstract>A list of objects. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>container</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>pegmatite::ASTList</Scope>
    </TokenIdentifier>
    <Path>singletonpegmatite_1_1_a_s_t_list.html</Path>
    <Anchor>a9ab3af9002344851e77813d1a0eb2849</Anchor>
    <Abstract>list type. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ASTList</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTList</Scope>
    </TokenIdentifier>
    <Path>singletonpegmatite_1_1_a_s_t_list.html</Path>
    <Anchor>a3f897b131186644a69d5b800e1a40629</Anchor>
    <Abstract>the default constructor. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ASTList</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTList</Scope>
    </TokenIdentifier>
    <Path>singletonpegmatite_1_1_a_s_t_list.html</Path>
    <Anchor>a486f0a94578b32c0e0da8173dcec2142</Anchor>
    <Abstract>duplicates the objects of the given list. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>objects</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTList</Scope>
    </TokenIdentifier>
    <Path>singletonpegmatite_1_1_a_s_t_list.html</Path>
    <Anchor>a10591f85aadaa5eb25222d401e128070</Anchor>
    <Abstract>returns the container of objects. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>construct</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTList</Scope>
    </TokenIdentifier>
    <Path>singletonpegmatite_1_1_a_s_t_list.html</Path>
    <Anchor>ae461b370b1c59ae9d742229b9fea8d20</Anchor>
    <Abstract>Pops objects of type T from the stack (st) until no more objects can be popped. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ASTMember</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTMember</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_member.html</Path>
    <Anchor>a2c9602aaeb487da8ac6ade9234b3f3f5</Anchor>
    <Abstract>On construction, ASTMember sets its container_node field to the ASTContainer currently under construc...</Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>container</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTMember</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_member.html</Path>
    <Anchor>a84c2e5c2c28d9781cfc22e4417457ecb</Anchor>
    <Abstract>Returns the container of which this object is a field. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>container_node</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>pegmatite::ASTMember</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_member.html</Path>
    <Anchor>adfc89e8540ce9eb5ac1c4de5f867b089</Anchor>
    <Abstract>The container that owns this object. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pegmatite::ASTMember</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>pegmatite::ASTMember</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_member.html</Path>
    <Abstract>Base class for children of ASTContainer. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ASTMember</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTMember</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_member.html</Path>
    <Anchor>a2c9602aaeb487da8ac6ade9234b3f3f5</Anchor>
    <Abstract>On construction, ASTMember sets its container_node field to the ASTContainer currently under construc...</Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>container</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTMember</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_member.html</Path>
    <Anchor>a84c2e5c2c28d9781cfc22e4417457ecb</Anchor>
    <Abstract>Returns the container of which this object is a field. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>construct</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTMember</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_member.html</Path>
    <Anchor>aef6aa1bd07a21474fdf6f63d4724aaf1</Anchor>
    <Abstract>Interface for constructing references to AST objects from the stack. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>container_node</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>pegmatite::ASTMember</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_member.html</Path>
    <Anchor>adfc89e8540ce9eb5ac1c4de5f867b089</Anchor>
    <Abstract>The container that owns this object. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pegmatite::ASTNode</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>pegmatite::ASTNode</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_node.html</Path>
    <Abstract>Base class for AST nodes. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ASTNode</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTNode</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_node.html</Path>
    <Anchor>a9cfd880bd72900af6a9a050b6673653e</Anchor>
    <Abstract>Constructs the AST node, with a null parent. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ASTNode</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTNode</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_node.html</Path>
    <Anchor>a598362d64b01bc8266a8eac9341f6946</Anchor>
    <Abstract>Copying AST nodes is not supported. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~ASTNode</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTNode</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_node.html</Path>
    <Anchor>ae23a27b167341bfdd13ce781278074ac</Anchor>
    <Abstract>Destructor does nothing, virtual for subclasses to use. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>parent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTNode</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_node.html</Path>
    <Anchor>a405356e07d478dff3cb0a06681314dab</Anchor>
    <Abstract>Returns the parent of this AST node, or nullptr if there isn&amp;#39;t one (either if this is the root...</Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>construct</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTNode</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_node.html</Path>
    <Anchor>ae7010ba536c25eef8fca4436a3cba49a</Anchor>
    <Abstract>Interface for constructing the AST node. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isa</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTNode</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_node.html</Path>
    <Anchor>aa837bc937c493e7dd4f067e34644c46b</Anchor>
    <Abstract>Root implementation of the RTTI-replacement for builds not wishing to use RTTI. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isa</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTNode</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_node.html</Path>
    <Anchor>a87ce42e787d1dbcceb8d9dfd5e18926c</Anchor>
    <Abstract>Returns true if this object is an instance of T. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_as</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTNode</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_node.html</Path>
    <Anchor>a392371c883f30b06fb70486fd209f778</Anchor>
    <Abstract>Returns a pointer to this object as a pointer to a child class, or nullptr if the cast would be unsaf...</Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>kind</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTNode</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_node.html</Path>
    <Anchor>a1e7fe53f436deccc338c2de2b65bed74</Anchor>
    <Abstract>Returns the kind of object class. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>classKind</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>pegmatite::ASTNode</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_node.html</Path>
    <Anchor>a99aaa8936ff1a0f3f3cf9a9b8a4c124a</Anchor>
    <Abstract>Returns the unique identifier for this class. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pegmatite::ASTParserDelegate</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>pegmatite::ASTParserDelegate</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_parser_delegate.html</Path>
    <Abstract>A parser delegate that is responsible for creating AST nodes from the input. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ASTParserDelegate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTParserDelegate</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_parser_delegate.html</Path>
    <Anchor>a2e025e2a7a12089b7a28b4b697e5952e</Anchor>
    <Abstract>Default constructor, registers this class in thread-local storage so that it can be referenced by Bin...</Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_parse_proc</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTParserDelegate</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_parser_delegate.html</Path>
    <Anchor>a76e03cfe1aaac176c5c4d1a6ae58880a</Anchor>
    <Abstract>Returns the handler for the specified rule. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>parse</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTParserDelegate</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_parser_delegate.html</Path>
    <Anchor>ac1c9c1d4f80df64b08371c3b73507460</Anchor>
    <Abstract>Parse an input i, starting from rule g in the grammar for which this is a delegate. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>BindAST</Name>
      <APILanguage>cpp</APILanguage>
      <Type>ffunc</Type>
      <Scope>pegmatite::ASTParserDelegate</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_parser_delegate.html</Path>
    <Anchor>a91da6c237e0a77df5aecca767e7c5a5b</Anchor>
    <Abstract>BindAST is a friend so that it can call the set_parse_proc() function, which should never be called f...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pegmatite::ASTPtr</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>pegmatite::ASTPtr</Scope>
    </TokenIdentifier>
    <Path>singletonpegmatite_1_1_a_s_t_ptr.html</Path>
    <Abstract>An ASTPtr is a wrapper around a pointer to an AST object. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ASTPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTPtr</Scope>
    </TokenIdentifier>
    <Path>singletonpegmatite_1_1_a_s_t_ptr.html</Path>
    <Anchor>ac6a9800336ded0416833384079632081</Anchor>
    <Abstract>Constructs the object in the. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTPtr</Scope>
    </TokenIdentifier>
    <Path>singletonpegmatite_1_1_a_s_t_ptr.html</Path>
    <Anchor>a182e05602e3aa42651a6367ffc6eb9bb</Anchor>
    <Abstract>gets the underlying ptr value. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator*</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTPtr</Scope>
    </TokenIdentifier>
    <Path>singletonpegmatite_1_1_a_s_t_ptr.html</Path>
    <Anchor>a9cab9177ac8d40ff9cc576c6b3fabcd7</Anchor>
    <Abstract>auto conversion to the underlying object ptr. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator-&gt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTPtr</Scope>
    </TokenIdentifier>
    <Path>singletonpegmatite_1_1_a_s_t_ptr.html</Path>
    <Anchor>a7ff49898eb84c505c7d234aa436b1df1</Anchor>
    <Abstract>member access. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>construct</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTPtr</Scope>
    </TokenIdentifier>
    <Path>singletonpegmatite_1_1_a_s_t_ptr.html</Path>
    <Anchor>a67f489bf8fc89f3a76784389b6c397f1</Anchor>
    <Abstract>Pops the next matching object from the AST stack st and claims it. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ASTMember</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTMember</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_member.html</Path>
    <Anchor>a2c9602aaeb487da8ac6ade9234b3f3f5</Anchor>
    <Abstract>On construction, ASTMember sets its container_node field to the ASTContainer currently under construc...</Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>container</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::ASTMember</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_member.html</Path>
    <Anchor>a84c2e5c2c28d9781cfc22e4417457ecb</Anchor>
    <Abstract>Returns the container of which this object is a field. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>container_node</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>pegmatite::ASTMember</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_a_s_t_member.html</Path>
    <Anchor>adfc89e8540ce9eb5ac1c4de5f867b089</Anchor>
    <Abstract>The container that owns this object. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pegmatite::BindAST</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>pegmatite::BindAST</Scope>
    </TokenIdentifier>
    <Path>singletonpegmatite_1_1_bind_a_s_t.html</Path>
    <Abstract>The BindAST class is responsible for binding an action to a rule. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>BindAST</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::BindAST</Scope>
    </TokenIdentifier>
    <Path>singletonpegmatite_1_1_bind_a_s_t.html</Path>
    <Anchor>a79a818d40e08a058984d5ac45859f444</Anchor>
    <Abstract>Bind the AST class described in the grammar to the rule specified. </Abstract>
    <DeclaredIn>ast.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pegmatite::CharacterExpr</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>pegmatite::CharacterExpr</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_character_expr.html</Path>
    <Abstract>Character expression, matches a single character. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>CharacterExpr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::CharacterExpr</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_character_expr.html</Path>
    <Anchor>a5a31512ee36d093bf91f12cc6c45b6fc</Anchor>
    <Abstract>Constructs a character expression from the specified integer. </Abstract>
    <DeclaredIn>parser.cc</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>parse_non_term</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::CharacterExpr</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_character_expr.html</Path>
    <Anchor>a28bf0cce6f73faab376f5318df4d2bce</Anchor>
    <Abstract>Parse this expression as a non-terminal. </Abstract>
    <DeclaredIn>parser.cc</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>parse_term</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::CharacterExpr</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_character_expr.html</Path>
    <Anchor>a9b8825eb00c170fab4cad618db39000e</Anchor>
    <Abstract>Parse this expression as a terminal. </Abstract>
    <DeclaredIn>parser.cc</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dump</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::CharacterExpr</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_character_expr.html</Path>
    <Anchor>a75e8ad0baf415267f24be798ba8f5ec6</Anchor>
    <Abstract>Dump the current rule. </Abstract>
    <DeclaredIn>parser.cc</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator-</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::CharacterExpr</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_character_expr.html</Path>
    <Anchor>a95f88d15cf3f86097581c7f62cd7e3a8</Anchor>
    <Abstract>Returns a range expression that recognises characters in the specified range. </Abstract>
    <DeclaredIn>parser.cc</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator-</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::CharacterExpr</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_character_expr.html</Path>
    <Anchor>a0ba166d22c5e57f6689b2d29de2fc0c7</Anchor>
    <Abstract>Returns a range expression that recognises characters in the specified range. </Abstract>
    <DeclaredIn>parser.cc</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~Expr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::Expr</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_expr.html</Path>
    <Anchor>a49be42357d07f62b636f7e8fc05ea20f</Anchor>
    <Abstract>Virtual destructor for safe overloading. </Abstract>
    <DeclaredIn>parser.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pegmatite::Context</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>pegmatite::Context</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_context.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>depth</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>pegmatite::Context</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_context.html</Path>
    <Anchor>a886643a4b42bcbb179bfaf34b40ad2d8</Anchor>
    <Abstract>Depth of parsing. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pegmatite::Error</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>pegmatite::Error</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_error.html</Path>
    <Abstract>Error. </Abstract>
    <DeclaredIn>parser.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Error</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::Error</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_error.html</Path>
    <Anchor>af319f7af9c21d4daa72004618f65fcc7</Anchor>
    <Abstract>constructor. </Abstract>
    <DeclaredIn>parser.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::Error</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_error.html</Path>
    <Anchor>a73c0cbc6f5e82d795b7acb655cd21c85</Anchor>
    <Abstract>compare on begin position. </Abstract>
    <DeclaredIn>parser.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>InputRange</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::InputRange</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_input_range.html</Path>
    <Anchor>a3613e72106773cf43259d94289351a42</Anchor>
    <Abstract>empty constructor. </Abstract>
    <DeclaredIn>parser.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>InputRange</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::InputRange</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_input_range.html</Path>
    <Anchor>aa48815bb0a2001d1e375d6ffa47a8fdc</Anchor>
    <Abstract>constructor.bbb </Abstract>
    <DeclaredIn>parser.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>begin</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::InputRange</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_input_range.html</Path>
    <Anchor>a63433b78c97ca810e04706322590763a</Anchor>
    <Abstract>Iterator to the start of the input range. </Abstract>
    <DeclaredIn>parser.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>end</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::InputRange</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_input_range.html</Path>
    <Anchor>a2ef97108048b4021be15bb66fd81c181</Anchor>
    <Abstract>Iterator to the end of the input range. </Abstract>
    <DeclaredIn>parser.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>error_type</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>pegmatite::Error</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_error.html</Path>
    <Anchor>a8d882e9f5763ae4742f33215a49bba72</Anchor>
    <Abstract>type </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>start</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>pegmatite::InputRange</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_input_range.html</Path>
    <Anchor>a61309e1680dc3c8a840748909b0713cc</Anchor>
    <Abstract>begin position. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>finish</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>pegmatite::InputRange</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_input_range.html</Path>
    <Anchor>ae192d7873c239d03156bbbe4c6d623c1</Anchor>
    <Abstract>end position. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pegmatite::Expr</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>pegmatite::Expr</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_expr.html</Path>
    <Abstract>Abstract base class for expressions. </Abstract>
    <DeclaredIn>parser.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~Expr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::Expr</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_expr.html</Path>
    <Anchor>a49be42357d07f62b636f7e8fc05ea20f</Anchor>
    <Abstract>Virtual destructor for safe overloading. </Abstract>
    <DeclaredIn>parser.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>parse_non_term</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::Expr</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_expr.html</Path>
    <Anchor>aa8b51f7c2669beef17ff09709bf7aae5</Anchor>
    <Abstract>Parse this expression as a non-terminal. </Abstract>
    <DeclaredIn>parser.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>parse_term</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::Expr</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_expr.html</Path>
    <Anchor>a0c588b22394611a503fe79cbd3e0b1bd</Anchor>
    <Abstract>Parse this expression as a terminal. </Abstract>
    <DeclaredIn>parser.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dump</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::Expr</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_expr.html</Path>
    <Anchor>a8f4b2bd4d9ed16e61f7cc47d216b84e0</Anchor>
    <Abstract>Dump the current rule. </Abstract>
    <DeclaredIn>parser.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pegmatite::ExprPtr</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>pegmatite::ExprPtr</Scope>
    </TokenIdentifier>
    <Path>structpegmatite_1_1_expr_ptr.html</Path>
    <Abstract>A shared pointer to an expression. </Abstract>
    <DeclaredIn>parser.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ExprPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>pegmatite::ExprPtr</Scope>
    </TokenIdentifier>
    <Path>structpegmatite_1_1_expr_ptr.html</Path>
    <Anchor>ab1d429f45547dce8108fd51e2b588f26</Anchor>
    <Abstract>Construct an expression pointer wrapping an expression. </Abstract>
    <DeclaredIn>parser.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ExprPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>pegmatite::ExprPtr</Scope>
    </TokenIdentifier>
    <Path>structpegmatite_1_1_expr_ptr.html</Path>
    <Anchor>aca67432de69c325ed22f7c81430b177b</Anchor>
    <Abstract>Construct an expression pointer wrapping an expression that refers to a rule. </Abstract>
    <DeclaredIn>parser.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ExprPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>pegmatite::ExprPtr</Scope>
    </TokenIdentifier>
    <Path>structpegmatite_1_1_expr_ptr.html</Path>
    <Anchor>a9fbd33d30df96592e8c0cf7a0c82f142</Anchor>
    <Abstract>Construct an expression pointer wrapping a character expression. </Abstract>
    <DeclaredIn>parser.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ExprPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>pegmatite::ExprPtr</Scope>
    </TokenIdentifier>
    <Path>structpegmatite_1_1_expr_ptr.html</Path>
    <Anchor>aac58f378699f37841a1c8dc864d154aa</Anchor>
    <Abstract>Construct an expression pointer wrapping a string expression created from a string. </Abstract>
    <DeclaredIn>parser.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ExprPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>pegmatite::ExprPtr</Scope>
    </TokenIdentifier>
    <Path>structpegmatite_1_1_expr_ptr.html</Path>
    <Anchor>a260551671713f0dd2521e38fdc774810</Anchor>
    <Abstract>Construct an expression pointer wrapping a character expression created from a character. </Abstract>
    <DeclaredIn>parser.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pegmatite::Input</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>pegmatite::Input</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_input.html</Path>
    <Abstract>Abstract superclass for indexing into a buffer with arbitrary storage. </Abstract>
    <DeclaredIn>parser.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Index</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>pegmatite::Input</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_input.html</Path>
    <Anchor>ac0045fa7291a66a8e885731f8f8d66af</Anchor>
    <Abstract>The type of indexes into the buffer. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>begin</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::Input</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_input.html</Path>
    <Anchor>aa2de81d32ac45cb054c84971f520554f</Anchor>
    <Abstract>Returns an iterator for the start of the input. </Abstract>
    <DeclaredIn>parser.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>end</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::Input</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_input.html</Path>
    <Anchor>acd37d0d6a9930afce62a4acda31c9703</Anchor>
    <Abstract>Returns an iterator for the end of the input. </Abstract>
    <DeclaredIn>parser.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator[]</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::Input</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_input.html</Path>
    <Anchor>a8de0e9360fb19c24b722d0e0395ea6d8</Anchor>
    <Abstract>Fetch the character at the specified index. </Abstract>
    <DeclaredIn>parser.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Input</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::Input</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_input.html</Path>
    <Anchor>afea3c1a66bdbdea28925bf19acf59899</Anchor>
    <Abstract>Default constructor, sets the buffer start to be after the buffer end, so that the first request will...</Abstract>
    <DeclaredIn>parser.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fillBuffer</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::Input</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_input.html</Path>
    <Anchor>a578f7baae11e42ab8abd0d151ba11f77</Anchor>
    <Abstract>Fill in the buffer with the next range. </Abstract>
    <DeclaredIn>parser.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>size</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::Input</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_input.html</Path>
    <Anchor>a373f33646be77f176772ec47a5c661ec</Anchor>
    <Abstract>Returns the size of the buffer. </Abstract>
    <DeclaredIn>parser.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~Input</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::Input</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_input.html</Path>
    <Anchor>a033e64af74c3c36a6d2397d4404ec82f</Anchor>
    <Abstract>Virtual destructor. </Abstract>
    <DeclaredIn>parser.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>static_buffer_size</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>pegmatite::Input</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_input.html</Path>
    <Anchor>a7b8c36f4028248753e432c12617ddfcb</Anchor>
    <Abstract>Size for the static buffer. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pegmatite::Input::iterator</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>pegmatite::Input::iterator</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_input_1_1iterator.html</Path>
    <Abstract>Iterator, refers back into the input stream. </Abstract>
    <DeclaredIn>parser.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>iterator</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::Input::iterator</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_input_1_1iterator.html</Path>
    <Anchor>aa6e6faca2dc85f843d7f85eb0d63230f</Anchor>
    <Abstract>Default constructor, constructs an invalid iterator into no buffer. </Abstract>
    <DeclaredIn>parser.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator*</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::Input::iterator</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_input_1_1iterator.html</Path>
    <Anchor>a343794f196852748e9fde2e7d5584905</Anchor>
    <Abstract>Dereference operator, returns the character represented by this index. </Abstract>
    <DeclaredIn>parser.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator++</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::Input::iterator</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_input_1_1iterator.html</Path>
    <Anchor>a373ac69893f2a6380627480990d14d91</Anchor>
    <Abstract>Move the iterator on to the next location. </Abstract>
    <DeclaredIn>parser.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator--</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::Input::iterator</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_input_1_1iterator.html</Path>
    <Anchor>ab642d528065a66dc2fed3a6366a4ed8f</Anchor>
    <Abstract>Move the iterator to the previous location. </Abstract>
    <DeclaredIn>parser.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::Input::iterator</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_input_1_1iterator.html</Path>
    <Anchor>a1d28453fd6425d7437e5fa7a80314f32</Anchor>
    <Abstract>Compares iterators for equality. </Abstract>
    <DeclaredIn>parser.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator!=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::Input::iterator</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_input_1_1iterator.html</Path>
    <Anchor>a7c7054827f55bd30d768a6d29afbb27c</Anchor>
    <Abstract>Compares iterators for inequality. </Abstract>
    <DeclaredIn>parser.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&gt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::Input::iterator</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_input_1_1iterator.html</Path>
    <Anchor>abf2487f86c92546916712f46158d98d8</Anchor>
    <Abstract>Compares locations of iterators in the input. </Abstract>
    <DeclaredIn>parser.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::Input::iterator</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_input_1_1iterator.html</Path>
    <Anchor>ae61fc5c5351edc4f230fb6d775ead5f6</Anchor>
    <Abstract>Compares locations of iterators in the input. </Abstract>
    <DeclaredIn>parser.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator-</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::Input::iterator</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_input_1_1iterator.html</Path>
    <Anchor>a470945e407b5e6e137a593f628560ed1</Anchor>
    <Abstract>Subtracts one iterator from another,. </Abstract>
    <DeclaredIn>parser.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pegmatite::InputRange</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>pegmatite::InputRange</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_input_range.html</Path>
    <Abstract>A range within input. </Abstract>
    <DeclaredIn>parser.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>InputRange</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::InputRange</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_input_range.html</Path>
    <Anchor>a3613e72106773cf43259d94289351a42</Anchor>
    <Abstract>empty constructor. </Abstract>
    <DeclaredIn>parser.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>InputRange</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::InputRange</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_input_range.html</Path>
    <Anchor>aa48815bb0a2001d1e375d6ffa47a8fdc</Anchor>
    <Abstract>constructor.bbb </Abstract>
    <DeclaredIn>parser.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>begin</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::InputRange</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_input_range.html</Path>
    <Anchor>a63433b78c97ca810e04706322590763a</Anchor>
    <Abstract>Iterator to the start of the input range. </Abstract>
    <DeclaredIn>parser.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>end</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::InputRange</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_input_range.html</Path>
    <Anchor>a2ef97108048b4021be15bb66fd81c181</Anchor>
    <Abstract>Iterator to the end of the input range. </Abstract>
    <DeclaredIn>parser.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>start</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>pegmatite::InputRange</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_input_range.html</Path>
    <Anchor>a61309e1680dc3c8a840748909b0713cc</Anchor>
    <Abstract>begin position. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>finish</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>pegmatite::InputRange</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_input_range.html</Path>
    <Anchor>ae192d7873c239d03156bbbe4c6d623c1</Anchor>
    <Abstract>end position. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pegmatite::ParserDelegate</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>pegmatite::ParserDelegate</Scope>
    </TokenIdentifier>
    <Path>structpegmatite_1_1_parser_delegate.html</Path>
    <Abstract>Parser delegate abstract class. </Abstract>
    <DeclaredIn>parser.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_parse_proc</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>pegmatite::ParserDelegate</Scope>
    </TokenIdentifier>
    <Path>structpegmatite_1_1_parser_delegate.html</Path>
    <Anchor>ac7931ecd07d8fbe8727ad9f1314af4fa</Anchor>
    <Abstract>Returns the handler for the specified rule. </Abstract>
    <DeclaredIn>parser.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~ParserDelegate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>pegmatite::ParserDelegate</Scope>
    </TokenIdentifier>
    <Path>structpegmatite_1_1_parser_delegate.html</Path>
    <Anchor>aa8e99a3e202757eb2d406ae2325fe0b8</Anchor>
    <Abstract>Virtual destructor, for cleaning up subclasses correctly. </Abstract>
    <DeclaredIn>parser.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pegmatite::ParserPosition</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>pegmatite::ParserPosition</Scope>
    </TokenIdentifier>
    <Path>structpegmatite_1_1_parser_position.html</Path>
    <Abstract>position into the input. </Abstract>
    <DeclaredIn>parser.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ParserPosition</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>pegmatite::ParserPosition</Scope>
    </TokenIdentifier>
    <Path>structpegmatite_1_1_parser_position.html</Path>
    <Anchor>a7ff4421dbfc747d65bc863a27725d088</Anchor>
    <Abstract>null constructor. </Abstract>
    <DeclaredIn>parser.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ParserPosition</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>pegmatite::ParserPosition</Scope>
    </TokenIdentifier>
    <Path>structpegmatite_1_1_parser_position.html</Path>
    <Anchor>a45ee44de181d5be1e63d04d7314f90b1</Anchor>
    <Abstract>constructor from input. </Abstract>
    <DeclaredIn>parser.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>it</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>pegmatite::ParserPosition</Scope>
    </TokenIdentifier>
    <Path>structpegmatite_1_1_parser_position.html</Path>
    <Anchor>ad9dcd1f97637a077f02666dd293376b7</Anchor>
    <Abstract>iterator into the input. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>line</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>pegmatite::ParserPosition</Scope>
    </TokenIdentifier>
    <Path>structpegmatite_1_1_parser_position.html</Path>
    <Anchor>a82bed016b9800bc7f36207e8e5b839d3</Anchor>
    <Abstract>line. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>col</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>pegmatite::ParserPosition</Scope>
    </TokenIdentifier>
    <Path>structpegmatite_1_1_parser_position.html</Path>
    <Anchor>ac791f4c5916c396cb4e4cd84f744b4a8</Anchor>
    <Abstract>column. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pegmatite::Rule</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>pegmatite::Rule</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_rule.html</Path>
    <Abstract>Rule class, which represents a rule in a grammar. </Abstract>
    <DeclaredIn>parser.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Rule</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::Rule</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_rule.html</Path>
    <Anchor>ad4f3fa725b892ddd285cd63fe98dfdbc</Anchor>
    <Abstract>Constructs a rule, owning a reference to an expression. </Abstract>
    <DeclaredIn>parser.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Rule</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::Rule</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_rule.html</Path>
    <Anchor>a70739267d5324980c89c0cff030330c6</Anchor>
    <Abstract>Constructor for creating rules from character expressions. </Abstract>
    <DeclaredIn>parser.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Rule</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::Rule</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_rule.html</Path>
    <Anchor>a9cbe478f8c7a28bef1b49950e0932d91</Anchor>
    <Abstract>Copying rules is not allowed. </Abstract>
    <DeclaredIn>parser.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Rule</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::Rule</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_rule.html</Path>
    <Anchor>a5611f96e4243b4f2aa228d397bc6c0c7</Anchor>
    <Abstract>Move constructor for a rule, allows rulename = {some expression} initialisation without performing co...</Abstract>
    <DeclaredIn>parser.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pegmatite::StringInput</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>pegmatite::StringInput</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_string_input.html</Path>
    <Abstract>A concrete Input subclass that wraps a std::string, providing access to the underlying characters...</Abstract>
    <DeclaredIn>parser.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getString</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::StringInput</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_string_input.html</Path>
    <Anchor>a948ecd4e6f99169a6300e5ff926efcd9</Anchor>
    <Abstract>Returns an immutable reference to the vector. </Abstract>
    <DeclaredIn>parser.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>StringInput</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::StringInput</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_string_input.html</Path>
    <Anchor>ae2c02a293c36baa0c989513e46d1c135</Anchor>
    <Abstract>Constructs the wrapper from a string (s). </Abstract>
    <DeclaredIn>parser.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fillBuffer</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::StringInput</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_string_input.html</Path>
    <Anchor>adc3aed376eca23df89ca793d5d5a317d</Anchor>
    <Abstract>Provides direct access to the underlying string&amp;#39;s storage. </Abstract>
    <DeclaredIn>parser.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>size</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::StringInput</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_string_input.html</Path>
    <Anchor>a85af5067f8fd22108b0bcc191fcf5c82</Anchor>
    <Abstract>Returns the size of the string. </Abstract>
    <DeclaredIn>parser.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>begin</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::Input</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_input.html</Path>
    <Anchor>aa2de81d32ac45cb054c84971f520554f</Anchor>
    <Abstract>Returns an iterator for the start of the input. </Abstract>
    <DeclaredIn>parser.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>end</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::Input</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_input.html</Path>
    <Anchor>acd37d0d6a9930afce62a4acda31c9703</Anchor>
    <Abstract>Returns an iterator for the end of the input. </Abstract>
    <DeclaredIn>parser.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator[]</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::Input</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_input.html</Path>
    <Anchor>a8de0e9360fb19c24b722d0e0395ea6d8</Anchor>
    <Abstract>Fetch the character at the specified index. </Abstract>
    <DeclaredIn>parser.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Input</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::Input</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_input.html</Path>
    <Anchor>afea3c1a66bdbdea28925bf19acf59899</Anchor>
    <Abstract>Default constructor, sets the buffer start to be after the buffer end, so that the first request will...</Abstract>
    <DeclaredIn>parser.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Index</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>pegmatite::Input</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_input.html</Path>
    <Anchor>ac0045fa7291a66a8e885731f8f8d66af</Anchor>
    <Abstract>The type of indexes into the buffer. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~Input</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::Input</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_input.html</Path>
    <Anchor>a033e64af74c3c36a6d2397d4404ec82f</Anchor>
    <Abstract>Virtual destructor. </Abstract>
    <DeclaredIn>parser.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>static_buffer_size</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>pegmatite::Input</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_input.html</Path>
    <Anchor>a7b8c36f4028248753e432c12617ddfcb</Anchor>
    <Abstract>Size for the static buffer. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pegmatite::UnicodeVectorInput</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>pegmatite::UnicodeVectorInput</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_unicode_vector_input.html</Path>
    <Abstract>A concrete input class that wraps a vector of 32-bit characters. </Abstract>
    <DeclaredIn>parser.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getVector</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::UnicodeVectorInput</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_unicode_vector_input.html</Path>
    <Anchor>ab91b105af0c930880c1ce3773067b9b7</Anchor>
    <Abstract>Returns an immutable reference to the vector. </Abstract>
    <DeclaredIn>parser.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>UnicodeVectorInput</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::UnicodeVectorInput</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_unicode_vector_input.html</Path>
    <Anchor>a254df104469a2fc0d0e07bf080d6ea56</Anchor>
    <Abstract>Constructs the wrapper from a vector. </Abstract>
    <DeclaredIn>parser.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fillBuffer</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::UnicodeVectorInput</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_unicode_vector_input.html</Path>
    <Anchor>a1357e3a3b5f6d8a751e211d5605eb255</Anchor>
    <Abstract>Provides direct access to the underlying vector&amp;#39;s storage. </Abstract>
    <DeclaredIn>parser.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>size</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::UnicodeVectorInput</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_unicode_vector_input.html</Path>
    <Anchor>afc85f720afc4f75eacb26629b9ee081b</Anchor>
    <Abstract>Returns the size of the vector. </Abstract>
    <DeclaredIn>parser.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>begin</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::Input</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_input.html</Path>
    <Anchor>aa2de81d32ac45cb054c84971f520554f</Anchor>
    <Abstract>Returns an iterator for the start of the input. </Abstract>
    <DeclaredIn>parser.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>end</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::Input</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_input.html</Path>
    <Anchor>acd37d0d6a9930afce62a4acda31c9703</Anchor>
    <Abstract>Returns an iterator for the end of the input. </Abstract>
    <DeclaredIn>parser.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator[]</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::Input</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_input.html</Path>
    <Anchor>a8de0e9360fb19c24b722d0e0395ea6d8</Anchor>
    <Abstract>Fetch the character at the specified index. </Abstract>
    <DeclaredIn>parser.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Input</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::Input</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_input.html</Path>
    <Anchor>afea3c1a66bdbdea28925bf19acf59899</Anchor>
    <Abstract>Default constructor, sets the buffer start to be after the buffer end, so that the first request will...</Abstract>
    <DeclaredIn>parser.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Index</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>pegmatite::Input</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_input.html</Path>
    <Anchor>ac0045fa7291a66a8e885731f8f8d66af</Anchor>
    <Abstract>The type of indexes into the buffer. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~Input</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>pegmatite::Input</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_input.html</Path>
    <Anchor>a033e64af74c3c36a6d2397d4404ec82f</Anchor>
    <Abstract>Virtual destructor. </Abstract>
    <DeclaredIn>parser.hh</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>static_buffer_size</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>pegmatite::Input</Scope>
    </TokenIdentifier>
    <Path>classpegmatite_1_1_input.html</Path>
    <Anchor>a7b8c36f4028248753e432c12617ddfcb</Anchor>
    <Abstract>Size for the static buffer. </Abstract>
  </Token>
</Tokens>
