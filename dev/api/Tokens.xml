<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
  <Token>
    <TokenIdentifier>
      <Name>VISIT</Name>
      <APILanguage>c</APILanguage>
      <Type>macro</Type>
    </TokenIdentifier>
    <Path>_a_s_t_2_visitor_8h.html</Path>
    <Anchor>adfe777bc932a304bd9acf6b07e60c02f</Anchor>
    <Abstract>Define entry (which returns true to continue descent) and exit methods. </Abstract>
    <DeclaredIn>Visitor.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>VISIT</Name>
      <APILanguage>c</APILanguage>
      <Type>macro</Type>
    </TokenIdentifier>
    <Path>_a_s_t_2_visitor_8h.html</Path>
    <Anchor>adfe777bc932a304bd9acf6b07e60c02f</Anchor>
    <Abstract>Define entry (which returns true to continue descent) and exit methods. </Abstract>
    <DeclaredIn>Visitor.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>yyparse</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>_parser_8cc.html</Path>
    <Anchor>a90ca5a64e526b0515ece5e2bd159829c</Anchor>
    <Abstract>This is the parsing function generated by yacc. </Abstract>
    <DeclaredIn>Parser.cc</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SetOpt</Name>
      <APILanguage>c</APILanguage>
      <Type>econst</Type>
    </TokenIdentifier>
    <Path>_arguments_8cc.html</Path>
    <Anchor>af8555267f1341e7cf41570efaa369209a48df42b5b79c217e02e9eb2a3d4981b4</Anchor>
    <Abstract>Set an optional value. </Abstract>
    <DeclaredIn>Arguments.cc</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AppendOpt</Name>
      <APILanguage>c</APILanguage>
      <Type>econst</Type>
    </TokenIdentifier>
    <Path>_arguments_8cc.html</Path>
    <Anchor>af8555267f1341e7cf41570efaa369209a9050745574f15d86f0ab7db338945c74</Anchor>
    <Abstract>Append an optional value to an ordered list. </Abstract>
    <DeclaredIn>Arguments.cc</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Enable</Name>
      <APILanguage>c</APILanguage>
      <Type>econst</Type>
    </TokenIdentifier>
    <Path>_arguments_8cc.html</Path>
    <Anchor>af8555267f1341e7cf41570efaa369209a80cb2080e90221d1f5b425387d9bd030</Anchor>
    <Abstract>Turn on a boolean value. </Abstract>
    <DeclaredIn>Arguments.cc</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Disable</Name>
      <APILanguage>c</APILanguage>
      <Type>econst</Type>
    </TokenIdentifier>
    <Path>_arguments_8cc.html</Path>
    <Anchor>af8555267f1341e7cf41570efaa369209a9f306dd8981a103d6827f8b4e80da8aa</Anchor>
    <Abstract>Turn off a boolean value. </Abstract>
    <DeclaredIn>Arguments.cc</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>OtherOpt</Name>
      <APILanguage>c</APILanguage>
      <Type>econst</Type>
    </TokenIdentifier>
    <Path>_arguments_8cc.html</Path>
    <Anchor>af8555267f1341e7cf41570efaa369209a8ee6ddd8b3402c307a14649c2be441cd</Anchor>
    <Abstract>Do something else (e.g., usage description.) </Abstract>
    <DeclaredIn>Arguments.cc</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>md_Artwork_credits</Name>
      <APILanguage>markdown</APILanguage>
    </TokenIdentifier>
    <Path>md__artwork_credits.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>todo</Name>
      <APILanguage>unknown</APILanguage>
    </TokenIdentifier>
    <Path>todo.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::Arguments</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::Arguments</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_arguments.html</Path>
    <Abstract>Command-line options and arguments after parsing, type-checking, etc. </Abstract>
    <DeclaredIn>Arguments.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>executable</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>fabrique::Arguments</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_arguments.html</Path>
    <Anchor>af8e7da3cb185326ce2126f99c225e5a6</Anchor>
    <Abstract>The currently-running binary. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::AssertionFailure</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::AssertionFailure</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_assertion_failure.html</Path>
    <Abstract>Some code may choose to throw this exception rather than assert() out. </Abstract>
    <DeclaredIn>exceptions.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::BooleanType</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::BooleanType</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_boolean_type.html</Path>
    <Abstract>A type that represents an ordered sequence. </Abstract>
    <DeclaredIn>BooleanType.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fields</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::Type</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_type.html</Path>
    <Anchor>a7142c51acf129a75b7bb830b8e870b34</Anchor>
    <Abstract>The fields that objects of this type have. </Abstract>
    <DeclaredIn>Type.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::Type</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_type.html</Path>
    <Anchor>ac698d6ec7deaf1c676dbca4ca78ade1e</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Type.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::Bytestream</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::Bytestream</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_bytestream.html</Path>
    <Abstract>A ostream-like class that may support formatting. </Abstract>
    <DeclaredIn>Bytestream.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Debug</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>fabrique::Bytestream</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_bytestream.html</Path>
    <Anchor>ab4d0d1008fc4fa6ba2192e6f3921e7c3</Anchor>
    <Abstract>Retrieve the debug output stream or a do-nothing stream, based on the (hierarchical) debug naming sch...</Abstract>
    <DeclaredIn>Bytestream.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Formatted</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>fabrique::Bytestream</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_bytestream.html</Path>
    <Anchor>ab07d387febeb571df8d66b343331599a</Anchor>
    <Abstract>Construct a formatted fabrique::Bytestream to wrap an std::ostream. </Abstract>
    <DeclaredIn>Bytestream.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Plain</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>fabrique::Bytestream</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_bytestream.html</Path>
    <Anchor>ab4531899c580babf2c2af3dd39602826</Anchor>
    <Abstract>Construct a plain fabrique::Bytestream to wrap an std::ostream. </Abstract>
    <DeclaredIn>Bytestream.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ErrorReport</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ErrorReport</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_error_report.html</Path>
    <Abstract>A non-exceptional representation of a problem in source code. </Abstract>
    <DeclaredIn>ErrorReport.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ErrorReport</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_error_report.html</Path>
    <Anchor>a06595cfa0bbb69651cd1622802364120</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>ErrorReport.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::FileType</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::FileType</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_file_type.html</Path>
    <Abstract>A type that represents an ordered sequence. </Abstract>
    <DeclaredIn>FileType.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fields</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::FileType</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_file_type.html</Path>
    <Anchor>ad2aa873d6920ab0d24cd19e219033ac8</Anchor>
    <Abstract>The fields that objects of this type have. </Abstract>
    <DeclaredIn>FileType.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>onAddTo</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::FileType</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_file_type.html</Path>
    <Anchor>acc0e72253995e54b31eb80ca48d852d7</Anchor>
    <DeclaredIn>FileType.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>onPrefixWith</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::FileType</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_file_type.html</Path>
    <Anchor>a1696e9ea1962212b6a431fb76b458073</Anchor>
    <DeclaredIn>FileType.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::Type</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_type.html</Path>
    <Anchor>ac698d6ec7deaf1c676dbca4ca78ade1e</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Type.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::FunctionType</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::FunctionType</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_function_type.html</Path>
    <Abstract>A type that represents an ordered sequence. </Abstract>
    <DeclaredIn>FunctionType.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::FunctionType</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_function_type.html</Path>
    <Anchor>a91812c2168c9e0368287f75df247b6fe</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>FunctionType.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fields</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::Type</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_type.html</Path>
    <Anchor>a7142c51acf129a75b7bb830b8e870b34</Anchor>
    <Abstract>The fields that objects of this type have. </Abstract>
    <DeclaredIn>Type.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::HasSource</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::HasSource</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_has_source.html</Path>
    <Abstract>A mixin type for something that has a location in source code. </Abstract>
    <DeclaredIn>SourceLocation.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::IntegerType</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::IntegerType</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_integer_type.html</Path>
    <Abstract>A type that represents an ordered sequence. </Abstract>
    <DeclaredIn>IntegerType.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fields</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::Type</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_type.html</Path>
    <Anchor>a7142c51acf129a75b7bb830b8e870b34</Anchor>
    <Abstract>The fields that objects of this type have. </Abstract>
    <DeclaredIn>Type.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::Type</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_type.html</Path>
    <Anchor>ac698d6ec7deaf1c676dbca4ca78ade1e</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Type.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::Join</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>fabrique::Join</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_join.html</Path>
    <Abstract>Joins printable objects into a string, e.g., &quot;a, b, c&quot; or &quot;a b c&quot;. </Abstract>
    <DeclaredIn>Join.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::Join</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_join.html</Path>
    <Anchor>ae5c85f571ae7b939901b53e629a3894b</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Join.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::Lexer</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::Lexer</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_lexer.html</Path>
    <Abstract>Tokenizes Fabrique source code. </Abstract>
    <DeclaredIn>Lexer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>instance</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>fabrique::Lexer</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_lexer.html</Path>
    <Anchor>add86082a06e27b9b86b6de2faabb1d77</Anchor>
    <Abstract>Access the singleton Lexer instance. </Abstract>
    <DeclaredIn>Lexer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::MaybeType</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::MaybeType</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_maybe_type.html</Path>
    <Abstract>A type that represents an ordered sequence. </Abstract>
    <DeclaredIn>MaybeType.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fields</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::MaybeType</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_maybe_type.html</Path>
    <Anchor>a42f613225e7b0aac53ca87bbaf707476</Anchor>
    <Abstract>The fields that objects of this type have. </Abstract>
    <DeclaredIn>MaybeType.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::Type</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_type.html</Path>
    <Anchor>ac698d6ec7deaf1c676dbca4ca78ade1e</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Type.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::OptionallyTyped</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::OptionallyTyped</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_optionally_typed.html</Path>
    <Abstract>A mixin type for something that may have a fabrique::fabrique::Type. </Abstract>
    <DeclaredIn>OptionallyTyped.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::OSError</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::OSError</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_o_s_error.html</Path>
    <Abstract>An error that has an OS-specific description. </Abstract>
    <DeclaredIn>exceptions.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::OSError</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_o_s_error.html</Path>
    <Anchor>a8618fdcf143a145c026109bc9f7f19f2</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>exceptions.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::PosixError</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::PosixError</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_posix_error.html</Path>
    <Abstract>An OS error that has an errno or equivalent output. </Abstract>
    <DeclaredIn>PosixError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::OSError</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_o_s_error.html</Path>
    <Anchor>a8618fdcf143a145c026109bc9f7f19f2</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>exceptions.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::PosixSharedLibrary</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::PosixSharedLibrary</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_posix_shared_library.html</Path>
    <Abstract>Platform-agnostic superclass for a shared library. </Abstract>
    <DeclaredIn>PosixSharedLibrary.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::Printable</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::Printable</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_printable.html</Path>
    <Abstract>A thing that can be pretty-printed. </Abstract>
    <DeclaredIn>Printable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::Printable</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_printable.html</Path>
    <Anchor>a7b148c5f200de45f3ad33a37a090997f</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Printable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::RawMaybeType</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::RawMaybeType</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_raw_maybe_type.html</Path>
    <Abstract>An unparameterised sequence (e.g., maybe): used to generate parameterised sequences (e...</Abstract>
    <DeclaredIn>MaybeType.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fields</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::Type</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_type.html</Path>
    <Anchor>a7142c51acf129a75b7bb830b8e870b34</Anchor>
    <Abstract>The fields that objects of this type have. </Abstract>
    <DeclaredIn>Type.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::Type</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_type.html</Path>
    <Anchor>ac698d6ec7deaf1c676dbca4ca78ade1e</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Type.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::RawSequenceType</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::RawSequenceType</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_raw_sequence_type.html</Path>
    <Abstract>An unparameterised sequence (e.g., list): used to generate parameterised sequences (e...</Abstract>
    <DeclaredIn>SequenceType.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fields</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::Type</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_type.html</Path>
    <Anchor>a7142c51acf129a75b7bb830b8e870b34</Anchor>
    <Abstract>The fields that objects of this type have. </Abstract>
    <DeclaredIn>Type.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::Type</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_type.html</Path>
    <Anchor>ac698d6ec7deaf1c676dbca4ca78ade1e</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Type.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::SemanticException</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::SemanticException</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_semantic_exception.html</Path>
    <Abstract>A semantic error is present in the Fabrique description. </Abstract>
    <DeclaredIn>exceptions.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::SourceCodeException</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_source_code_exception.html</Path>
    <Anchor>aba85f7c69a393e4f4f4ac7c9ae56460b</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>exceptions.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::SequenceType</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::SequenceType</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_sequence_type.html</Path>
    <Abstract>A type that represents an ordered sequence. </Abstract>
    <DeclaredIn>SequenceType.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fields</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::Type</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_type.html</Path>
    <Anchor>a7142c51acf129a75b7bb830b8e870b34</Anchor>
    <Abstract>The fields that objects of this type have. </Abstract>
    <DeclaredIn>Type.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::Type</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_type.html</Path>
    <Anchor>ac698d6ec7deaf1c676dbca4ca78ade1e</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Type.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::SharedLibrary</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::SharedLibrary</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_shared_library.html</Path>
    <Abstract>Platform-agnostic superclass for a shared library. </Abstract>
    <DeclaredIn>SharedLibrary.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::SourceCodeException</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::SourceCodeException</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_source_code_exception.html</Path>
    <Abstract>Base class for exceptions related to invalid source code. </Abstract>
    <DeclaredIn>exceptions.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::SourceCodeException</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_source_code_exception.html</Path>
    <Anchor>aba85f7c69a393e4f4f4ac7c9ae56460b</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>exceptions.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::SourceLocation</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::SourceLocation</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_source_location.html</Path>
    <Abstract>A location in the original source code. </Abstract>
    <DeclaredIn>SourceLocation.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::SourceLocation</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_source_location.html</Path>
    <Anchor>a21f67087961a3f37c7535c79ed42d184</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>SourceLocation.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::SourceRange</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::SourceRange</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_source_range.html</Path>
    <Abstract>A range of characters in source code. </Abstract>
    <DeclaredIn>SourceLocation.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::SourceRange</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_source_range.html</Path>
    <Anchor>a7f320c900b25deb447617141663e9e60</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>SourceLocation.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Span</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>fabrique::SourceRange</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_source_range.html</Path>
    <Anchor>a593e6159e681fc06afaec09564ff077c</Anchor>
    <Abstract>Construct a short (within a single line) range. </Abstract>
    <DeclaredIn>SourceLocation.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Over</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>fabrique::SourceRange</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_source_range.html</Path>
    <Anchor>a73fc0da7d12c25dbf2b58fc57239323e</Anchor>
    <Abstract>Create a range that spans two fabrique::HasSource objects. </Abstract>
    <DeclaredIn>SourceLocation.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::StringType</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::StringType</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_string_type.html</Path>
    <Abstract>A type that represents an ordered sequence. </Abstract>
    <DeclaredIn>StringType.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fields</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::Type</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_type.html</Path>
    <Anchor>a7142c51acf129a75b7bb830b8e870b34</Anchor>
    <Abstract>The fields that objects of this type have. </Abstract>
    <DeclaredIn>Type.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::Type</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_type.html</Path>
    <Anchor>ac698d6ec7deaf1c676dbca4ca78ade1e</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Type.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::StructureType</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::StructureType</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_structure_type.html</Path>
    <Abstract>The type of a structure, which contains named, typed, immutable fields. </Abstract>
    <DeclaredIn>StructureType.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fields</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::StructureType</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_structure_type.html</Path>
    <Anchor>a0361b8afaef504ddb48792c181c2fa40</Anchor>
    <Abstract>The fields that objects of this type have. </Abstract>
    <DeclaredIn>StructureType.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::StructureType</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_structure_type.html</Path>
    <Anchor>a03e566aabdcf5f007b25855b497af932</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>StructureType.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::SyntaxError</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::SyntaxError</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_syntax_error.html</Path>
    <Abstract>A syntactic error is present in the Fabrique description. </Abstract>
    <DeclaredIn>exceptions.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::SourceCodeException</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_source_code_exception.html</Path>
    <Anchor>aba85f7c69a393e4f4f4ac7c9ae56460b</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>exceptions.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::Token</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::Token</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_token.html</Path>
    <Abstract>A token obtained from the Lexer. </Abstract>
    <DeclaredIn>Token.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::Token</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_token.html</Path>
    <Anchor>aad19c1d015182a6714c5b014438e1609</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Token.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::Type</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::Type</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_type.html</Path>
    <Abstract>The name of a value, function, parameter or argument. </Abstract>
    <DeclaredIn>Type.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fields</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::Type</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_type.html</Path>
    <Anchor>a7142c51acf129a75b7bb830b8e870b34</Anchor>
    <Abstract>The fields that objects of this type have. </Abstract>
    <DeclaredIn>Type.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::Type</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_type.html</Path>
    <Anchor>ac698d6ec7deaf1c676dbca4ca78ade1e</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Type.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::TypeContext</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::TypeContext</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_type_context.html</Path>
    <Abstract>A context object that holds state for a compilation (e.g., type objects). </Abstract>
    <DeclaredIn>TypeContext.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>find</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::TypeContext</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_type_context.html</Path>
    <Anchor>ababb50e178e2fb0111613f4d686629af</Anchor>
    <Abstract>Find an existing type (nil type if not found). </Abstract>
    <DeclaredIn>TypeContext.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>nilType</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::TypeContext</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_type_context.html</Path>
    <Anchor>a9b73d45ba3477665d9b23585bc8ec1fa</Anchor>
    <Abstract>The type of a typeless thing. </Abstract>
    <DeclaredIn>TypeContext.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>booleanType</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::TypeContext</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_type_context.html</Path>
    <Anchor>a141717e2d9ed645a2cbf5b35b5a3f1e0</Anchor>
    <Abstract>The type of a boolean expression. </Abstract>
    <DeclaredIn>TypeContext.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>integerType</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::TypeContext</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_type_context.html</Path>
    <Anchor>a8d93978dff1c3b18f164b72f329c577e</Anchor>
    <Abstract>The type of an integer number. </Abstract>
    <DeclaredIn>TypeContext.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>listOf</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::TypeContext</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_type_context.html</Path>
    <Anchor>a790dee39cdf17c94408c719c851c583c</Anchor>
    <Abstract>The type of a list. </Abstract>
    <DeclaredIn>TypeContext.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>maybe</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::TypeContext</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_type_context.html</Path>
    <Anchor>abe6a31194067af4b111c0bf56ce6471d</Anchor>
    <Abstract>An optional (&quot;maybe&quot;) type. </Abstract>
    <DeclaredIn>TypeContext.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fileType</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::TypeContext</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_type_context.html</Path>
    <Anchor>a8c7112e4877b9164189a55c32ea31437</Anchor>
    <Abstract>A file in a build. </Abstract>
    <DeclaredIn>TypeContext.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fileListType</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::TypeContext</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_type_context.html</Path>
    <Anchor>a9935cb5d8594dd3543ab2a55d5f2f514</Anchor>
    <Abstract>A list of files (a pretty fundamental type!). </Abstract>
    <DeclaredIn>TypeContext.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>functionType</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::TypeContext</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_type_context.html</Path>
    <Anchor>a87de4b91ad65259b725579858517751d</Anchor>
    <Abstract>A function type for a simple (one in, one out) function. </Abstract>
    <DeclaredIn>TypeContext.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>functionType</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::TypeContext</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_type_context.html</Path>
    <Anchor>ad9c3ba684a1e9b5c2d191e7eb65d87f2</Anchor>
    <Abstract>A function type, which incorporates the function&amp;#39;s signature. </Abstract>
    <DeclaredIn>TypeContext.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>structureType</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::TypeContext</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_type_context.html</Path>
    <Anchor>a08532c118c3c08250e0ca8ecd88c3d32</Anchor>
    <Abstract>A structure type describes its fields&amp;#39; names and types. </Abstract>
    <DeclaredIn>TypeContext.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>stringType</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::TypeContext</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_type_context.html</Path>
    <Anchor>a30df0dd3f7145f7ae512b988cf98d127</Anchor>
    <Abstract>A string of characters. </Abstract>
    <DeclaredIn>TypeContext.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::Typed</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::Typed</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_typed.html</Path>
    <Abstract>A mixin type for something that has a fabrique::fabrique::Type. </Abstract>
    <DeclaredIn>Typed.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::TypeError</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::TypeError</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_type_error.html</Path>
    <Abstract>Something is wrong with a fabrique::Type. </Abstract>
    <DeclaredIn>TypeError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::SourceCodeException</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_source_code_exception.html</Path>
    <Anchor>aba85f7c69a393e4f4f4ac7c9ae56460b</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>exceptions.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::Uncopyable</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::Uncopyable</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_uncopyable.html</Path>
    <Abstract>An object that cannot be copy-constructed. </Abstract>
    <DeclaredIn>Uncopyable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::UserError</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::UserError</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_user_error.html</Path>
    <Abstract>An error in user input. </Abstract>
    <DeclaredIn>exceptions.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::UserError</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_user_error.html</Path>
    <Anchor>ad198d95139b89e953d30b469f4bf0c2a</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>exceptions.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::WrongTypeException</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::WrongTypeException</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_wrong_type_exception.html</Path>
    <Abstract>Something is wrong with a fabrique::Type. </Abstract>
    <DeclaredIn>TypeError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::SourceCodeException</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_source_code_exception.html</Path>
    <Anchor>aba85f7c69a393e4f4f4ac7c9ae56460b</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>exceptions.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast</Name>
      <APILanguage>c</APILanguage>
      <Type>ns</Type>
      <Scope>fabrique::ast</Scope>
    </TokenIdentifier>
    <Path>namespacefabrique_1_1ast.html</Path>
    <Abstract>Representation of the Abstract Syntax Tree for Fabrique source code. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::Action</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::Action</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_action.html</Path>
    <Abstract>A build action that can transform inputs into outputs. </Abstract>
    <DeclaredIn>Action.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Action</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_action.html</Path>
    <Anchor>acfe6b9e62a6317f98d1d2aaf0aa0ac63</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Action.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NameArguments</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::HasParameters</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_has_parameters.html</Path>
    <Anchor>a33ca2779a7cb6d3f224b85614c41117a</Anchor>
    <Abstract>Name all of the arguments in v according to the rules for positional and keyword arguments. </Abstract>
    <DeclaredIn>HasParameters.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Create</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>fabrique::ast::Action</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_action.html</Path>
    <Anchor>a60642f2a5a0ef1879ab297b4512d9036</Anchor>
    <Abstract>An action definition has both arguments and parameters. </Abstract>
    <DeclaredIn>Action.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::Argument</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::Argument</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_argument.html</Path>
    <Abstract>An argument being passed to an action or function (caller-side). </Abstract>
    <DeclaredIn>Argument.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Argument</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_argument.html</Path>
    <Anchor>a74292b07b50192ed13b66e9be6c9bb45</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Argument.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::ASTDump</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::ASTDump</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_a_s_t_dump.html</Path>
    <Abstract>Backend that prints the AST as a (not very pretty) tree. </Abstract>
    <DeclaredIn>ASTDump.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::BinaryOperation</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::BinaryOperation</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_binary_operation.html</Path>
    <Abstract>An operation with two operands. </Abstract>
    <DeclaredIn>BinaryOperation.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::BinaryOperation</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_binary_operation.html</Path>
    <Anchor>acf6b5530507172f94469135ec19c8443</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>BinaryOperation.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::BoolLiteral</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::BoolLiteral</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_bool_literal.html</Path>
    <Abstract>A literal &amp;#39;true&amp;#39; or &amp;#39;false&amp;#39; value in code. </Abstract>
    <DeclaredIn>literals.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::BoolLiteral</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_bool_literal.html</Path>
    <Anchor>a2ff30a00af05e865e448149e3d0ece00</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>literals.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::Call</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::Call</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_call.html</Path>
    <Abstract>A call to a function or build action. </Abstract>
    <DeclaredIn>Call.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Call</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_call.html</Path>
    <Anchor>a9f2e54fe0ac4151ed0462474ba33b69b</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Call.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::CompoundExpression</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::CompoundExpression</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_compound_expression.html</Path>
    <Abstract>An expression that can contain intermediate values. </Abstract>
    <DeclaredIn>CompoundExpr.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::CompoundExpression</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_compound_expression.html</Path>
    <Anchor>a56c5d4b8b87921cefee976e41697094b</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>CompoundExpr.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::Conditional</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::Conditional</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_conditional.html</Path>
    <Abstract>A function allows users to create build abstractions. </Abstract>
    <DeclaredIn>Conditional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Conditional</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_conditional.html</Path>
    <Anchor>a6371057f414fbf5e09f66d13b359f3f5</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Conditional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::DebugTracePoint</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::DebugTracePoint</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_debug_trace_point.html</Path>
    <Abstract>An operation with two operands. </Abstract>
    <DeclaredIn>DebugTracePoint.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::DebugTracePoint</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_debug_trace_point.html</Path>
    <Anchor>a097bf2b0437b4ade7d5869aa5ff1fd6f</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>DebugTracePoint.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::EvalContext</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::EvalContext</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_eval_context.html</Path>
    <Abstract>A context for evaluating AST Expression objects. </Abstract>
    <DeclaredIn>EvalContext.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Define</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::EvalContext</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_eval_context.html</Path>
    <Anchor>a7cba027bdd38213f92f34ae2686bda45</Anchor>
    <Abstract>Define a named dag::Value in the current scope. </Abstract>
    <DeclaredIn>EvalContext.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Lookup</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::EvalContext</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_eval_context.html</Path>
    <Anchor>a35a0c7be4f4ec9265e053817893f46e3</Anchor>
    <Abstract>Look up a named value from the current scope or a parent scope. </Abstract>
    <DeclaredIn>EvalContext.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Function</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::EvalContext</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_eval_context.html</Path>
    <Anchor>a5c6033ac3240a9d00f6ccd7858d21b6f</Anchor>
    <Abstract>Define a dag::Function. </Abstract>
    <DeclaredIn>EvalContext.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Alias</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::EvalContext</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_eval_context.html</Path>
    <Anchor>a24ec8258eb54b65c1ca35f1cd5a59096</Anchor>
    <Abstract>Create a new alias for an existing dag::Target. </Abstract>
    <DeclaredIn>EvalContext.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>CopyCurrentScope</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::EvalContext</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_eval_context.html</Path>
    <Anchor>a7d6d82f6e5317bbb3b0cec6984d54af7</Anchor>
    <Abstract>Make a deep copy of the current scope and all of its parents. </Abstract>
    <DeclaredIn>EvalContext.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fullyQualifiedName</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::EvalContext</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_eval_context.html</Path>
    <Anchor>a2526b04cea20cb46231893a3e4cb0ac6</Anchor>
    <Abstract>The fully-qualified name of the value currently being defined. </Abstract>
    <DeclaredIn>EvalContext.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>scopeName_</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>fabrique::ast::EvalContext</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_eval_context.html</Path>
    <Anchor>ada71db67b0b185268d1eaa339560652a</Anchor>
    <Abstract>The components of the current scope&amp;#39;s fully-qualified name. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>scopes_</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>fabrique::ast::EvalContext</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_eval_context.html</Path>
    <Anchor>af36265514d9b8338f46a9b570c32b1bc</Anchor>
    <Abstract>Symbols defined in this scope (or the one up from it, or up...). </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::EvalContext::AlternateScoping</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::EvalContext::AlternateScoping</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_eval_context_1_1_alternate_scoping.html</Path>
    <Abstract>An object that represents the use of an alternative scope stack and that will restore the original st...</Abstract>
    <DeclaredIn>EvalContext.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::EvalContext::Scope</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::EvalContext::Scope</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_eval_context_1_1_scope.html</Path>
    <Abstract>An object to represent descending in a call stack. </Abstract>
    <DeclaredIn>EvalContext.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::EvalContext::ScopedValueName</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::EvalContext::ScopedValueName</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_eval_context_1_1_scoped_value_name.html</Path>
    <Abstract>An object for declaring the name of the value whose initializer we are currently evaluating. </Abstract>
    <DeclaredIn>EvalContext.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::Expression</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::Expression</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_expression.html</Path>
    <Abstract>Base class for expressions that can be evaluated. </Abstract>
    <DeclaredIn>Expression.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::Printable</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_printable.html</Path>
    <Anchor>a7b148c5f200de45f3ad33a37a090997f</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Printable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::FieldAccess</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::FieldAccess</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_field_access.html</Path>
    <Abstract>An expression that imports a Fabrique module. </Abstract>
    <DeclaredIn>FieldAccess.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::FieldAccess</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_field_access.html</Path>
    <Anchor>a6f69c595b48c3a5fb3e8e63019016cde</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>FieldAccess.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::FieldQuery</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::FieldQuery</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_field_query.html</Path>
    <Abstract>An expression that imports a Fabrique module. </Abstract>
    <DeclaredIn>FieldQuery.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::FieldQuery</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_field_query.html</Path>
    <Anchor>a12436912d8db8dda751e0180b6463641</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>FieldQuery.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::FileList</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::FileList</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_file_list.html</Path>
    <Abstract>A list of files, with optional arguments that can be applied to each file. </Abstract>
    <DeclaredIn>FileList.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::FileList</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_file_list.html</Path>
    <Anchor>a8cb3fdb76c00ce62aebbc28fcdb7d38f</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>FileList.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::Filename</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::Filename</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_filename.html</Path>
    <Abstract>A reference to a file on disk (source or target). </Abstract>
    <DeclaredIn>Filename.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Filename</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_filename.html</Path>
    <Anchor>aabf57499798ca68f5e1cc0e4bf35768a</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Filename.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::ForeachExpr</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::ForeachExpr</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_foreach_expr.html</Path>
    <Abstract>An expression that maps list elements into another list. </Abstract>
    <DeclaredIn>Foreach.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::ForeachExpr</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_foreach_expr.html</Path>
    <Anchor>a7df9b4810c9a659473864cfbecc09c39</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Foreach.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::Function</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::Function</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_function.html</Path>
    <Abstract>A function allows users to create build abstractions. </Abstract>
    <DeclaredIn>Function.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Function</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_function.html</Path>
    <Anchor>a19d011823e9fad4165a5bfb325076df9</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Function.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NameArguments</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::HasParameters</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_has_parameters.html</Path>
    <Anchor>a33ca2779a7cb6d3f224b85614c41117a</Anchor>
    <Abstract>Name all of the arguments in v according to the rules for positional and keyword arguments. </Abstract>
    <DeclaredIn>HasParameters.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::HasParameters</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::HasParameters</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_has_parameters.html</Path>
    <Abstract>A mixin type for something that can be called with parameters. </Abstract>
    <DeclaredIn>HasParameters.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NameArguments</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::HasParameters</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_has_parameters.html</Path>
    <Anchor>a33ca2779a7cb6d3f224b85614c41117a</Anchor>
    <Abstract>Name all of the arguments in v according to the rules for positional and keyword arguments. </Abstract>
    <DeclaredIn>HasParameters.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::HasScope</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::HasScope</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_has_scope.html</Path>
    <Abstract>A mixin type for something that has a fabrique::fabrique::Type. </Abstract>
    <DeclaredIn>HasScope.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::Identifier</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::Identifier</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_identifier.html</Path>
    <Abstract>The name of a value, function, parameter or argument. </Abstract>
    <DeclaredIn>Identifier.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Identifier</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_identifier.html</Path>
    <Anchor>a142531d21be32c8ee93cda56e9553986</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Identifier.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::Import</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::Import</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_import.html</Path>
    <Abstract>An expression that imports a Fabrique module. </Abstract>
    <DeclaredIn>Import.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Import</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_import.html</Path>
    <Anchor>aebe03f34ffb07d842cb2299afc74adc9</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Import.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::IntLiteral</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::IntLiteral</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_int_literal.html</Path>
    <Abstract>An integer value in code. </Abstract>
    <DeclaredIn>literals.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::IntLiteral</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_int_literal.html</Path>
    <Anchor>a14f8bda584d237a5d60078fa869361e8</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>literals.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::List</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::List</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_list.html</Path>
    <Abstract>A list of same-typed expressions. </Abstract>
    <DeclaredIn>List.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::List</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_list.html</Path>
    <Anchor>ae265be0faa533845d9e2df65bcfa22b8</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>List.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::Literal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>fabrique::ast::Literal</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_literal.html</Path>
    <Abstract>An expression whose value is literally expressed in the source file. </Abstract>
    <DeclaredIn>literals.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::Printable</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_printable.html</Path>
    <Anchor>a7b148c5f200de45f3ad33a37a090997f</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Printable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::Mapping</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::Mapping</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_mapping.html</Path>
    <Abstract>An expression that maps a sequence into a variable (e.g., at the beginning of a foreach loop)...</Abstract>
    <DeclaredIn>Mapping.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Mapping</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_mapping.html</Path>
    <Anchor>a428ffebad83e556e72a1edba3f7cbbb3</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Mapping.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::Node</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::Node</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_node.html</Path>
    <Abstract>Base class for expressions that can be evaluated. </Abstract>
    <DeclaredIn>Node.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::Printable</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_printable.html</Path>
    <Anchor>a7b148c5f200de45f3ad33a37a090997f</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Printable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::Parameter</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::Parameter</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parameter.html</Path>
    <Abstract>A formal parameter in a fabrique::ast::Function. </Abstract>
    <DeclaredIn>Parameter.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parameter</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parameter.html</Path>
    <Anchor>a363d618ad36b5e4665d7aef99587c243</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Parameter.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::Parser</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Abstract>Parses Fabrique files as driven by flex/byacc. </Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ParseDefinitions</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Anchor>a19c00eae34fca8f38408e940bcb99144</Anchor>
    <Abstract>Parse Fabrique fragments defined at, e.g., the command line. </Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ParseFile</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Anchor>ab25b9be1cc1a2d0e7aa1bff71ac12337</Anchor>
    <Abstract>Parse Fabrique input (usually a file) into a Scope. </Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>errors</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Anchor>a235ca527368a02ab5291fcd970706664</Anchor>
    <Abstract>Errors encountered during parsing. </Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>files</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Anchor>a4f30a3534dbd6ba7b43bcb7ec749c28e</Anchor>
    <Abstract>Input files encountered during parsing. </Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>EnterScope</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Anchor>a09d0f99793b8fda305b819f5ba37b507</Anchor>
    <Abstract>Enter an AST Scope. </Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>EnterScope</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Anchor>a81e22949ebb1a9ae710d0a914f40b939</Anchor>
    <Abstract>A convenience wrapper around EnterScope with no &amp;#39;args&amp;#39; type. </Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>EnterScope</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Anchor>a7db7b334b9e8900c3b06e476977815d2</Anchor>
    <Abstract>Take an AST Scope and push it on the stack. </Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getType</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Anchor>a0fe3155052c90679063d1ef7b60d6668</Anchor>
    <Abstract>Find or create a Type. </Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DefineAction</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Anchor>ab5290ca51e372fbce816cbc809352acd</Anchor>
    <Abstract>Define a build Action. </Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Arg</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Anchor>ac5d5bd8e1313582028fd4336473b6e63</Anchor>
    <Abstract>Parse an Argument to a Function, build Action, etc. </Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>BinaryOp</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Anchor>a7848c1c286a092bb923e2936b5d255dd</Anchor>
    <Abstract>Create a BinaryOperation (+, ::, ...). </Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>CreateCall</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Anchor>afc7e14957fd67f7db1d51890db8a59f4</Anchor>
    <Abstract>A call to an Action or Function. </Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>CompoundExpr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Anchor>af85259311802109bbc296ef41246a612</Anchor>
    <Abstract>An expression that can (optionally) include intermediate values. </Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FieldAccess</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Anchor>af5d411b52ada67df5f678c36959eff63</Anchor>
    <Abstract>An expression that indirects into a structure. </Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FieldQuery</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Anchor>ae1db801da4d690301fbb980fe7369cea</Anchor>
    <Abstract>A test to see if a structure contains a field. </Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>File</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Anchor>a5af46190641c34de734d0e0a70a3b39e</Anchor>
    <Abstract>A Filename that is part of the build DAG. </Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Files</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Anchor>ac8bcf477310b724a982d5c7734a32c69</Anchor>
    <Abstract>Create a list of files, which may have shared arguments. </Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Foreach</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Anchor>a97d6b997565f00da1a6cb0f219e3e47c</Anchor>
    <Abstract>An expression for mapping list elements into another list: foreach x in some_list: x + 1...</Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Id</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Anchor>aa2b9418f0604effc0e0bfdef7dfe95fe</Anchor>
    <Abstract>An untyped Identifier: just a name. </Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Id</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Anchor>a5301c31fca4e9f2b4d5fefc8ffc0e36e</Anchor>
    <Abstract>A typed Identifier. </Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ImportModule</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Anchor>a0c994e581223c7f8d22a2e21669055c7</Anchor>
    <Abstract>An expression that imports a Fabrique module. </Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>IfElse</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Anchor>a2e7f2d13080be423b80f3a5e891b0025</Anchor>
    <Abstract>A conditional if-then-else expression (not a statement, an expression). </Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ListOf</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Anchor>af546f45a11e1e98f81c2af31f933104f</Anchor>
    <Abstract>Define a List of expressions. </Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Map</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Anchor>a003e45d6787d842d2646f0a750e94173</Anchor>
    <Abstract>Define a mapping from a sequence to a name. </Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Some</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Anchor>a82284e4c2c90df9c781bb9f432772cd6</Anchor>
    <Abstract>Create a SomeValue (populated maybe object). </Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>StructInstantiation</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Anchor>a8fba575455aeb357b661b0c7d9d3bd10</Anchor>
    <Abstract>Turn the current scope into a structure instantiation. </Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Param</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Anchor>a3c35d13bc1fda766802593d174bac2ba</Anchor>
    <Abstract>Parse a function Parameter. </Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Reference</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Anchor>a3d0d7cdac2972d4c47937dd7dbd554a3</Anchor>
    <Abstract>Reference a Value in scope. </Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>TracePoint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Anchor>aa8a78d90eb79dbc59d7786bd1693d8d2</Anchor>
    <Abstract>Create a DebugTracePoint. </Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>UnaryOp</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Anchor>a3942f8e5b935bfa5021da4b32f489099</Anchor>
    <Abstract>Create a UnaryOperation (currently just &amp;#39;not&amp;#39;). </Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DefineValue</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Anchor>a83f6da869247c5ae57ed8120ea5c1ec5</Anchor>
    <Abstract>Define a Value in the current scope. </Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DefineValue</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Anchor>accd019cacc7604bda7564ed95be45a73</Anchor>
    <Abstract>Define an unnamed Value in the current scope. </Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::Scope</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::Scope</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_scope.html</Path>
    <Abstract>A scope is a container for name-&gt;value mappings. </Abstract>
    <DeclaredIn>Scope.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Scope</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_scope.html</Path>
    <Anchor>aaa86ab00b164ab176b2c6ef24e1e9316</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Scope.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::SomeValue</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::SomeValue</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_some_value.html</Path>
    <Abstract>A value boxed up in a maybe type. </Abstract>
    <DeclaredIn>SomeValue.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::SomeValue</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_some_value.html</Path>
    <Anchor>a4b1db606b5573c0bd20f91bbcad7a0ca</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>SomeValue.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::StringLiteral</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::StringLiteral</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_string_literal.html</Path>
    <Abstract>A string value enclosed by single or double quotes. </Abstract>
    <DeclaredIn>literals.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::StringLiteral</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_string_literal.html</Path>
    <Anchor>a3b22479f03aff2db3c79411f586c0963</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>literals.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::StructInstantiation</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::StructInstantiation</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_struct_instantiation.html</Path>
    <Abstract>A list of same-typed expressions. </Abstract>
    <DeclaredIn>StructInstantiation.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::StructInstantiation</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_struct_instantiation.html</Path>
    <Anchor>aa901805f7d9fa31ad036303e51da478a</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>StructInstantiation.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::SymbolReference</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::SymbolReference</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_symbol_reference.html</Path>
    <Abstract>A reference to a named symbol. </Abstract>
    <DeclaredIn>SymbolReference.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::SymbolReference</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_symbol_reference.html</Path>
    <Anchor>a9697accd0de730ae82577f6cc3446896</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>SymbolReference.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::UnaryOperation</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::UnaryOperation</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_unary_operation.html</Path>
    <Abstract>An operation with two operands. </Abstract>
    <DeclaredIn>UnaryOperation.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::UnaryOperation</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_unary_operation.html</Path>
    <Anchor>a749499aa6afd22314f69e0cca0512448</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>UnaryOperation.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::Value</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_value.html</Path>
    <Abstract>Base class for expressions that can be evaluated. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_value.html</Path>
    <Anchor>a0a16db04aab6e1f3234ab8879721ccac</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::Visitable</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::Visitable</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_visitable.html</Path>
    <Abstract>A thing that can be visited by a fabrique::Visitor. </Abstract>
    <DeclaredIn>Visitable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::Visitor</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::Visitor</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_visitor.html</Path>
    <Abstract>Interface for visitors that walk the AST. </Abstract>
    <DeclaredIn>Visitor.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::backend</Name>
      <APILanguage>c</APILanguage>
      <Type>ns</Type>
      <Scope>fabrique::backend</Scope>
    </TokenIdentifier>
    <Path>namespacefabrique_1_1backend.html</Path>
    <Abstract>Backends generate low level build descriptions, e.g., Graphviz Dot or Ninja. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::backend::Backend</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::backend::Backend</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1backend_1_1_backend.html</Path>
    <Abstract>Interface for backend classes that convert a DAG to something else (e.g., a Ninja file)...</Abstract>
    <DeclaredIn>Backend.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Create</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>fabrique::backend::Backend</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1backend_1_1_backend.html</Path>
    <Anchor>afa8c8b1ad17c166c288df79c6b6f1676</Anchor>
    <Abstract>Create a new backend using a registered short name. </Abstract>
    <DeclaredIn>Backend.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::backend::DotBackend</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::backend::DotBackend</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1backend_1_1_dot_backend.html</Path>
    <Abstract>A backend that produces GraphViz .dot files. </Abstract>
    <DeclaredIn>Dot.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Create</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>fabrique::backend::Backend</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1backend_1_1_backend.html</Path>
    <Anchor>afa8c8b1ad17c166c288df79c6b6f1676</Anchor>
    <Abstract>Create a new backend using a registered short name. </Abstract>
    <DeclaredIn>Backend.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::backend::MakeBackend</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::backend::MakeBackend</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1backend_1_1_make_backend.html</Path>
    <Abstract>A backend that produces POSIX make files (no BSD or GNU extensions). </Abstract>
    <DeclaredIn>Make.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Create</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>fabrique::backend::Backend</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1backend_1_1_backend.html</Path>
    <Anchor>afa8c8b1ad17c166c288df79c6b6f1676</Anchor>
    <Abstract>Create a new backend using a registered short name. </Abstract>
    <DeclaredIn>Backend.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::backend::NinjaBackend</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::backend::NinjaBackend</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1backend_1_1_ninja_backend.html</Path>
    <Abstract>A backend that produces Ninja files. </Abstract>
    <DeclaredIn>Ninja.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Create</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>fabrique::backend::Backend</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1backend_1_1_backend.html</Path>
    <Anchor>afa8c8b1ad17c166c288df79c6b6f1676</Anchor>
    <Abstract>Create a new backend using a registered short name. </Abstract>
    <DeclaredIn>Backend.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::backend::NullBackend</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::backend::NullBackend</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1backend_1_1_null_backend.html</Path>
    <Abstract>A backend that does nothing. </Abstract>
    <DeclaredIn>Null.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Create</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>fabrique::backend::Backend</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1backend_1_1_backend.html</Path>
    <Anchor>afa8c8b1ad17c166c288df79c6b6f1676</Anchor>
    <Abstract>Create a new backend using a registered short name. </Abstract>
    <DeclaredIn>Backend.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::dag</Name>
      <APILanguage>c</APILanguage>
      <Type>ns</Type>
      <Scope>fabrique::dag</Scope>
    </TokenIdentifier>
    <Path>namespacefabrique_1_1dag.html</Path>
    <Abstract>Representations of nodes (files, build rules, etc.) in the build graph. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::dag::Boolean</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::dag::Boolean</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_boolean.html</Path>
    <Abstract>A boolean (true/false) value. </Abstract>
    <DeclaredIn>Primitive.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Negate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Boolean</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_boolean.html</Path>
    <Anchor>a47ecaabe062ed7ca36c35eef27b64208</Anchor>
    <Abstract>Unary &amp;#39;not&amp;#39; operator. </Abstract>
    <DeclaredIn>Primitive.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>And</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Boolean</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_boolean.html</Path>
    <Anchor>a225fc1786c479a29fdedef2e51b086a0</Anchor>
    <Abstract>Logical and. </Abstract>
    <DeclaredIn>Primitive.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Or</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Boolean</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_boolean.html</Path>
    <Anchor>a8502bbbd6dfaff15e25d24dc2859848a</Anchor>
    <Abstract>Logical or. </Abstract>
    <DeclaredIn>Primitive.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Xor</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Boolean</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_boolean.html</Path>
    <Anchor>a7bf5318ba96bb2f53d194c8b01244759</Anchor>
    <Abstract>Logical xor. </Abstract>
    <DeclaredIn>Primitive.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Equals</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Boolean</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_boolean.html</Path>
    <Anchor>abc816c67bb11fa1e89826cd1223df1e2</Anchor>
    <Abstract>Equivalence. </Abstract>
    <DeclaredIn>Primitive.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Primitive&lt; bool &gt;</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_primitive.html</Path>
    <Anchor>a9f1062b055a7cc4552cee38d2e4481f4</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Add</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a42a00015dc0c9dd5a6604692e472412d</Anchor>
    <Abstract>Add this fabrique::dag::Value to a following Value. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrefixWith</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ae1c473aeb87106c445b7277bb6679ba5</Anchor>
    <Abstract>Apply the prefix operation: prefix this value with another value. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ScalarAdd</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a46d5d59d10b65356d6d98fdcc52aaacc</Anchor>
    <Abstract>Add another fabrique::dag::Value scalar-wise across this Value. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>asList</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ae7ba46433ec1355844759188a3442d0d</Anchor>
    <Abstract>A list representation of this value (or nullptr). </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>canScalarAdd</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a920e14952eada9735d330b2f18b5f117</Anchor>
    <Abstract>This Value can add a value to itself in a scalar fashion. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::dag::Build</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::dag::Build</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_build.html</Path>
    <Abstract>An application of a fabrique::dag::Rule to transform File objects. </Abstract>
    <DeclaredIn>Build.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Build</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_build.html</Path>
    <Anchor>a9b5770968e57ee613a0eb4ceb061fa86</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Build.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Negate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ae8cb7c35ecf1b9ee6f046d96af913184</Anchor>
    <Abstract>Unary &amp;#39;not&amp;#39; operator. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Add</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a42a00015dc0c9dd5a6604692e472412d</Anchor>
    <Abstract>Add this fabrique::dag::Value to a following Value. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrefixWith</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ae1c473aeb87106c445b7277bb6679ba5</Anchor>
    <Abstract>Apply the prefix operation: prefix this value with another value. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ScalarAdd</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a46d5d59d10b65356d6d98fdcc52aaacc</Anchor>
    <Abstract>Add another fabrique::dag::Value scalar-wise across this Value. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>And</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a50bc9254bb26faf85be56789f95f55d1</Anchor>
    <Abstract>Logical and. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Or</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a65a948cce817880913600710eae9ec36</Anchor>
    <Abstract>Logical or. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Xor</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a8b8f9b05316a5a6ac8ab96ee4a50a8e1</Anchor>
    <Abstract>Logical xor. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Equals</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a11fa22e85a9c0d132e1b15a82a78baa4</Anchor>
    <Abstract>Equivalence. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>asList</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ae7ba46433ec1355844759188a3442d0d</Anchor>
    <Abstract>A list representation of this value (or nullptr). </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>canScalarAdd</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a920e14952eada9735d330b2f18b5f117</Anchor>
    <Abstract>This Value can add a value to itself in a scalar fashion. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::dag::Callable</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::dag::Callable</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_callable.html</Path>
    <Abstract>A mixin type for something that can be called with parameters. </Abstract>
    <DeclaredIn>Callable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Call</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Callable</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_callable.html</Path>
    <Anchor>a7a3068f2c00a58e0a18918d1266a68bd</Anchor>
    <Abstract>Call this function with (named) arguments. </Abstract>
    <DeclaredIn>Callable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NameArguments</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Callable</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_callable.html</Path>
    <Anchor>a91ee7aebd855f6bb67628c98f3036dcb</Anchor>
    <Abstract>Name all of the arguments in v according to the rules for positional and keyword arguments. </Abstract>
    <DeclaredIn>Callable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::dag::DAG</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::dag::DAG</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_d_a_g.html</Path>
    <Abstract>A directed acyclic graph of build actions. </Abstract>
    <DeclaredIn>DAG.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>topLevelTargets</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::DAG</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_d_a_g.html</Path>
    <Anchor>a74699d2f4a751acaa7f312b3e0c9cb92</Anchor>
    <Abstract>A file&amp;#39;s top-level targets, in order of original definition. </Abstract>
    <DeclaredIn>DAG.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::DAG</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_d_a_g.html</Path>
    <Anchor>a2695a3f17195e4c14cbc7669bad7470d</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>DAG.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::dag::DAGBuilder</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::dag::DAGBuilder</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_d_a_g_builder.html</Path>
    <Abstract>A object that builds DAG nodes in a DAGBuilder::Context. </Abstract>
    <DeclaredIn>DAGBuilder.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dag</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::DAGBuilder</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_d_a_g_builder.html</Path>
    <Anchor>a6352bf3f47d17c8b5ed2dd040809e5a8</Anchor>
    <Abstract>Construct a DAG from the current DAGBuilder state. </Abstract>
    <DeclaredIn>DAGBuilder.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Define</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::DAGBuilder</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_d_a_g_builder.html</Path>
    <Anchor>ad7f91a139780c0b9338de85390d3a3d3</Anchor>
    <Abstract>Define a variable with a name and a value. </Abstract>
    <DeclaredIn>DAGBuilder.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AddRegeneration</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::DAGBuilder</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_d_a_g_builder.html</Path>
    <Anchor>a7008f764a1b1e34295e65ec22038af0c</Anchor>
    <Abstract>Add the build steps required to regenerate the DAG if Fabrique input files change. </Abstract>
    <DeclaredIn>DAGBuilder.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Bool</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::DAGBuilder</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_d_a_g_builder.html</Path>
    <Anchor>af8100bcbb8231b9f4f465aafe56508d5</Anchor>
    <Abstract>Create a dag::Boolean. </Abstract>
    <DeclaredIn>DAGBuilder.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Build</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::DAGBuilder</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_d_a_g_builder.html</Path>
    <Anchor>a971eb49716110fd00a90b401fa74d74f</Anchor>
    <Abstract>Construct a dag::Build from a dag::Rule and parameters. </Abstract>
    <DeclaredIn>DAGBuilder.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>File</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::DAGBuilder</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_d_a_g_builder.html</Path>
    <Anchor>a9dad9579d17442c33beef09307baf7fc</Anchor>
    <Abstract>Create a dag::File from a path. </Abstract>
    <DeclaredIn>DAGBuilder.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>File</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::DAGBuilder</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_d_a_g_builder.html</Path>
    <Anchor>a5d0f956e3abf186a762d408e762caefa</Anchor>
    <Abstract>Create a dag::File from a subdirectory and a filename. </Abstract>
    <DeclaredIn>DAGBuilder.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Function</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::DAGBuilder</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_d_a_g_builder.html</Path>
    <Anchor>a84feeea44061f92cc692417e9a67d1a8</Anchor>
    <Abstract>Define a dag::Function. </Abstract>
    <DeclaredIn>DAGBuilder.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Integer</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::DAGBuilder</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_d_a_g_builder.html</Path>
    <Anchor>ad30b4a8b942f355034b9cc145f5188c7</Anchor>
    <Abstract>Create a dag::Integer. </Abstract>
    <DeclaredIn>DAGBuilder.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Rule</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::DAGBuilder</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_d_a_g_builder.html</Path>
    <Anchor>a068195baa1676ea5c17b0cf8f6d9e8e1</Anchor>
    <Abstract>Create a dag::Rule in the current scope. </Abstract>
    <DeclaredIn>DAGBuilder.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>String</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::DAGBuilder</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_d_a_g_builder.html</Path>
    <Anchor>a9aafe20089f1c0d932d74a8e32cc76bb</Anchor>
    <Abstract>Create a dag::String. </Abstract>
    <DeclaredIn>DAGBuilder.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Struct</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::DAGBuilder</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_d_a_g_builder.html</Path>
    <Anchor>ade51bb813434c5ca1ca0691b626b1cbb</Anchor>
    <Abstract>Create a dag::Structure. </Abstract>
    <DeclaredIn>DAGBuilder.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Target</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::DAGBuilder</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_d_a_g_builder.html</Path>
    <Anchor>adcc37f9286a3ef381df5f09418c12ce3</Anchor>
    <Abstract>Create a dag::Target using the current value name. </Abstract>
    <DeclaredIn>DAGBuilder.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::dag::DAGBuilder::Context</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::dag::DAGBuilder::Context</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_d_a_g_builder_1_1_context.html</Path>
    <Abstract>An object that can supply a DAGBuilder with names and types. </Abstract>
    <DeclaredIn>DAGBuilder.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::dag::File</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::dag::File</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_file.html</Path>
    <Abstract>A reference to a file on disk (source or target). </Abstract>
    <DeclaredIn>File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>absolute</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::File</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_file.html</Path>
    <Anchor>a516766962ef1893041d33a4548b8065b</Anchor>
    <Abstract>This file refers to an absolute path. </Abstract>
    <DeclaredIn>File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>directory</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::File</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_file.html</Path>
    <Anchor>ae5dfb520c54a7fb007a448af8c3c02ae</Anchor>
    <Abstract>Absolute path to the directory this file is in. </Abstract>
    <DeclaredIn>File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Add</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::File</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_file.html</Path>
    <Anchor>a1280b29892ac4c5aa32c510d2842ada3</Anchor>
    <Abstract>Name a file with my name + a suffix. </Abstract>
    <DeclaredIn>File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrefixWith</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::File</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_file.html</Path>
    <Anchor>a6b7f6c822856c0261f85d3028100dbe1</Anchor>
    <Abstract>Name a file with a prefix + my name. </Abstract>
    <DeclaredIn>File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>type</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::File</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_file.html</Path>
    <Anchor>a9427ecf5250bb0bc1dd7c1c77733d66a</Anchor>
    <Abstract>Our type is always a FileType. </Abstract>
    <DeclaredIn>File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::File</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_file.html</Path>
    <Anchor>a4cc58c49e192dd551775bb6672007793</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Negate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ae8cb7c35ecf1b9ee6f046d96af913184</Anchor>
    <Abstract>Unary &amp;#39;not&amp;#39; operator. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ScalarAdd</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a46d5d59d10b65356d6d98fdcc52aaacc</Anchor>
    <Abstract>Add another fabrique::dag::Value scalar-wise across this Value. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>And</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a50bc9254bb26faf85be56789f95f55d1</Anchor>
    <Abstract>Logical and. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Or</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a65a948cce817880913600710eae9ec36</Anchor>
    <Abstract>Logical or. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Xor</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a8b8f9b05316a5a6ac8ab96ee4a50a8e1</Anchor>
    <Abstract>Logical xor. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Equals</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a11fa22e85a9c0d132e1b15a82a78baa4</Anchor>
    <Abstract>Equivalence. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>asList</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ae7ba46433ec1355844759188a3442d0d</Anchor>
    <Abstract>A list representation of this value (or nullptr). </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>canScalarAdd</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a920e14952eada9735d330b2f18b5f117</Anchor>
    <Abstract>This Value can add a value to itself in a scalar fashion. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::dag::Formatter</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::dag::Formatter</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_formatter.html</Path>
    <Abstract>An object that converts DAG nodes into strings. </Abstract>
    <DeclaredIn>Formatter.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::dag::Function</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::dag::Function</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_function.html</Path>
    <Abstract>A reference to a user- or plugin-defined function. </Abstract>
    <DeclaredIn>Function.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Function</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_function.html</Path>
    <Anchor>a19d011823e9fad4165a5bfb325076df9</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Function.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Call</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Callable</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_callable.html</Path>
    <Anchor>a7a3068f2c00a58e0a18918d1266a68bd</Anchor>
    <Abstract>Call this function with (named) arguments. </Abstract>
    <DeclaredIn>Callable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NameArguments</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Callable</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_callable.html</Path>
    <Anchor>a91ee7aebd855f6bb67628c98f3036dcb</Anchor>
    <Abstract>Name all of the arguments in v according to the rules for positional and keyword arguments. </Abstract>
    <DeclaredIn>Callable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Negate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ae8cb7c35ecf1b9ee6f046d96af913184</Anchor>
    <Abstract>Unary &amp;#39;not&amp;#39; operator. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Add</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a42a00015dc0c9dd5a6604692e472412d</Anchor>
    <Abstract>Add this fabrique::dag::Value to a following Value. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrefixWith</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ae1c473aeb87106c445b7277bb6679ba5</Anchor>
    <Abstract>Apply the prefix operation: prefix this value with another value. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ScalarAdd</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a46d5d59d10b65356d6d98fdcc52aaacc</Anchor>
    <Abstract>Add another fabrique::dag::Value scalar-wise across this Value. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>And</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a50bc9254bb26faf85be56789f95f55d1</Anchor>
    <Abstract>Logical and. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Or</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a65a948cce817880913600710eae9ec36</Anchor>
    <Abstract>Logical or. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Xor</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a8b8f9b05316a5a6ac8ab96ee4a50a8e1</Anchor>
    <Abstract>Logical xor. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Equals</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a11fa22e85a9c0d132e1b15a82a78baa4</Anchor>
    <Abstract>Equivalence. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>asList</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ae7ba46433ec1355844759188a3442d0d</Anchor>
    <Abstract>A list representation of this value (or nullptr). </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>canScalarAdd</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a920e14952eada9735d330b2f18b5f117</Anchor>
    <Abstract>This Value can add a value to itself in a scalar fashion. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::dag::Integer</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::dag::Integer</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_integer.html</Path>
    <Abstract>An integer (of unspecified precision). </Abstract>
    <DeclaredIn>Primitive.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Add</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Integer</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_integer.html</Path>
    <Anchor>a30ff45aabd476cc9fdcb85fa9ede128c</Anchor>
    <Abstract>Add this fabrique::dag::Value to a following Value. </Abstract>
    <DeclaredIn>Primitive.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Equals</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Integer</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_integer.html</Path>
    <Anchor>af1de5d81e73ddbbd8437b060533c31c2</Anchor>
    <Abstract>Equivalence. </Abstract>
    <DeclaredIn>Primitive.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Primitive&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_primitive.html</Path>
    <Anchor>a9f1062b055a7cc4552cee38d2e4481f4</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Negate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ae8cb7c35ecf1b9ee6f046d96af913184</Anchor>
    <Abstract>Unary &amp;#39;not&amp;#39; operator. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrefixWith</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ae1c473aeb87106c445b7277bb6679ba5</Anchor>
    <Abstract>Apply the prefix operation: prefix this value with another value. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ScalarAdd</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a46d5d59d10b65356d6d98fdcc52aaacc</Anchor>
    <Abstract>Add another fabrique::dag::Value scalar-wise across this Value. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>And</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a50bc9254bb26faf85be56789f95f55d1</Anchor>
    <Abstract>Logical and. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Or</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a65a948cce817880913600710eae9ec36</Anchor>
    <Abstract>Logical or. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Xor</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a8b8f9b05316a5a6ac8ab96ee4a50a8e1</Anchor>
    <Abstract>Logical xor. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>asList</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ae7ba46433ec1355844759188a3442d0d</Anchor>
    <Abstract>A list representation of this value (or nullptr). </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>canScalarAdd</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a920e14952eada9735d330b2f18b5f117</Anchor>
    <Abstract>This Value can add a value to itself in a scalar fashion. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::dag::List</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::dag::List</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_list.html</Path>
    <Abstract>The result of evaluating an expression. </Abstract>
    <DeclaredIn>List.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Add</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::List</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_list.html</Path>
    <Anchor>a3ca234dc75787e5fb7fc6f5efe58deec</Anchor>
    <Abstract>List addition is concatenation. </Abstract>
    <DeclaredIn>List.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrefixWith</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::List</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_list.html</Path>
    <Anchor>aac43fb0e208bff58510bb56a0c5b026f</Anchor>
    <Abstract>Apply the prefix operation: prefix this value with another value. </Abstract>
    <DeclaredIn>List.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ScalarAdd</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::List</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_list.html</Path>
    <Anchor>aa07b9619d3822d76039c485125b0e139</Anchor>
    <Abstract>Add another fabrique::dag::Value scalar-wise across this Value. </Abstract>
    <DeclaredIn>List.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>asList</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::List</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_list.html</Path>
    <Anchor>a62de562c49e8d1f2064d68a67a3b1c0f</Anchor>
    <Abstract>A list representation of this value (or nullptr). </Abstract>
    <DeclaredIn>List.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>canScalarAdd</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::List</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_list.html</Path>
    <Anchor>a969c26928d17ff819f7faa89d772d422</Anchor>
    <Abstract>This Value can add a value to itself in a scalar fashion. </Abstract>
    <DeclaredIn>List.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::List</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_list.html</Path>
    <Anchor>ae265be0faa533845d9e2df65bcfa22b8</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>List.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Negate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ae8cb7c35ecf1b9ee6f046d96af913184</Anchor>
    <Abstract>Unary &amp;#39;not&amp;#39; operator. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>And</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a50bc9254bb26faf85be56789f95f55d1</Anchor>
    <Abstract>Logical and. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Or</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a65a948cce817880913600710eae9ec36</Anchor>
    <Abstract>Logical or. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Xor</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a8b8f9b05316a5a6ac8ab96ee4a50a8e1</Anchor>
    <Abstract>Logical xor. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Equals</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a11fa22e85a9c0d132e1b15a82a78baa4</Anchor>
    <Abstract>Equivalence. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::dag::Parameter</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::dag::Parameter</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_parameter.html</Path>
    <Abstract>The result of evaluating an expression. </Abstract>
    <DeclaredIn>Parameter.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Parameter</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_parameter.html</Path>
    <Anchor>ac0011c2d55e3c40d8f68e0755dec3a2f</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Parameter.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::dag::Primitive</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>fabrique::dag::Primitive</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_primitive.html</Path>
    <Abstract>The result of evaluating an expression. </Abstract>
    <DeclaredIn>Primitive.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Primitive</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_primitive.html</Path>
    <Anchor>a9f1062b055a7cc4552cee38d2e4481f4</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Primitive.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Negate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ae8cb7c35ecf1b9ee6f046d96af913184</Anchor>
    <Abstract>Unary &amp;#39;not&amp;#39; operator. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Add</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a42a00015dc0c9dd5a6604692e472412d</Anchor>
    <Abstract>Add this fabrique::dag::Value to a following Value. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrefixWith</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ae1c473aeb87106c445b7277bb6679ba5</Anchor>
    <Abstract>Apply the prefix operation: prefix this value with another value. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ScalarAdd</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a46d5d59d10b65356d6d98fdcc52aaacc</Anchor>
    <Abstract>Add another fabrique::dag::Value scalar-wise across this Value. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>And</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a50bc9254bb26faf85be56789f95f55d1</Anchor>
    <Abstract>Logical and. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Or</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a65a948cce817880913600710eae9ec36</Anchor>
    <Abstract>Logical or. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Xor</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a8b8f9b05316a5a6ac8ab96ee4a50a8e1</Anchor>
    <Abstract>Logical xor. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Equals</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a11fa22e85a9c0d132e1b15a82a78baa4</Anchor>
    <Abstract>Equivalence. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>asList</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ae7ba46433ec1355844759188a3442d0d</Anchor>
    <Abstract>A list representation of this value (or nullptr). </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>canScalarAdd</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a920e14952eada9735d330b2f18b5f117</Anchor>
    <Abstract>This Value can add a value to itself in a scalar fashion. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::dag::Rule</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::dag::Rule</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_rule.html</Path>
    <Abstract>An action that transforms files into other files. </Abstract>
    <DeclaredIn>Rule.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Call</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Rule</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_rule.html</Path>
    <Anchor>ac80ae8352b202224978e313f2bbb26e7</Anchor>
    <Abstract>Call this function with (named) arguments. </Abstract>
    <DeclaredIn>Rule.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>arguments</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Rule</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_rule.html</Path>
    <Anchor>a1fd0bb99871aa1ae4adf7c1baf4faa3a</Anchor>
    <Abstract>Arguments define the action (e.g., command = &amp;#39;cc&amp;#39;). </Abstract>
    <DeclaredIn>Rule.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Rule</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_rule.html</Path>
    <Anchor>a7dec961dab4f2a220d1db43bd6a8e6f8</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Rule.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NameArguments</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Callable</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_callable.html</Path>
    <Anchor>a91ee7aebd855f6bb67628c98f3036dcb</Anchor>
    <Abstract>Name all of the arguments in v according to the rules for positional and keyword arguments. </Abstract>
    <DeclaredIn>Callable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Negate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ae8cb7c35ecf1b9ee6f046d96af913184</Anchor>
    <Abstract>Unary &amp;#39;not&amp;#39; operator. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Add</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a42a00015dc0c9dd5a6604692e472412d</Anchor>
    <Abstract>Add this fabrique::dag::Value to a following Value. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrefixWith</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ae1c473aeb87106c445b7277bb6679ba5</Anchor>
    <Abstract>Apply the prefix operation: prefix this value with another value. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ScalarAdd</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a46d5d59d10b65356d6d98fdcc52aaacc</Anchor>
    <Abstract>Add another fabrique::dag::Value scalar-wise across this Value. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>And</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a50bc9254bb26faf85be56789f95f55d1</Anchor>
    <Abstract>Logical and. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Or</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a65a948cce817880913600710eae9ec36</Anchor>
    <Abstract>Logical or. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Xor</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a8b8f9b05316a5a6ac8ab96ee4a50a8e1</Anchor>
    <Abstract>Logical xor. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Equals</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a11fa22e85a9c0d132e1b15a82a78baa4</Anchor>
    <Abstract>Equivalence. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>asList</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ae7ba46433ec1355844759188a3442d0d</Anchor>
    <Abstract>A list representation of this value (or nullptr). </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>canScalarAdd</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a920e14952eada9735d330b2f18b5f117</Anchor>
    <Abstract>This Value can add a value to itself in a scalar fashion. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::dag::String</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::dag::String</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_string.html</Path>
    <Abstract>An ASCII string (for now, we should make this Unicode soon). </Abstract>
    <DeclaredIn>Primitive.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Add</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::String</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_string.html</Path>
    <Anchor>a1494c64930d89eb720a6eecb605d0240</Anchor>
    <Abstract>Add this fabrique::dag::Value to a following Value. </Abstract>
    <DeclaredIn>Primitive.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Equals</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::String</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_string.html</Path>
    <Anchor>a1ebf6bb8d00d810a2a30bc2eaca70c1a</Anchor>
    <Abstract>Equivalence. </Abstract>
    <DeclaredIn>Primitive.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::String</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_string.html</Path>
    <Anchor>ab3e26fc60891cf46cc13613e5d70d74e</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Primitive.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Negate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ae8cb7c35ecf1b9ee6f046d96af913184</Anchor>
    <Abstract>Unary &amp;#39;not&amp;#39; operator. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrefixWith</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ae1c473aeb87106c445b7277bb6679ba5</Anchor>
    <Abstract>Apply the prefix operation: prefix this value with another value. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ScalarAdd</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a46d5d59d10b65356d6d98fdcc52aaacc</Anchor>
    <Abstract>Add another fabrique::dag::Value scalar-wise across this Value. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>And</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a50bc9254bb26faf85be56789f95f55d1</Anchor>
    <Abstract>Logical and. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Or</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a65a948cce817880913600710eae9ec36</Anchor>
    <Abstract>Logical or. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Xor</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a8b8f9b05316a5a6ac8ab96ee4a50a8e1</Anchor>
    <Abstract>Logical xor. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>asList</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ae7ba46433ec1355844759188a3442d0d</Anchor>
    <Abstract>A list representation of this value (or nullptr). </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>canScalarAdd</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a920e14952eada9735d330b2f18b5f117</Anchor>
    <Abstract>This Value can add a value to itself in a scalar fashion. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::dag::Structure</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::dag::Structure</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_structure.html</Path>
    <Abstract>A reference to a file on disk (source or target). </Abstract>
    <DeclaredIn>Structure.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Structure</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_structure.html</Path>
    <Anchor>ac8ec0851829718af3ec4b0e99bec425b</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Structure.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Negate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ae8cb7c35ecf1b9ee6f046d96af913184</Anchor>
    <Abstract>Unary &amp;#39;not&amp;#39; operator. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Add</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a42a00015dc0c9dd5a6604692e472412d</Anchor>
    <Abstract>Add this fabrique::dag::Value to a following Value. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrefixWith</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ae1c473aeb87106c445b7277bb6679ba5</Anchor>
    <Abstract>Apply the prefix operation: prefix this value with another value. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ScalarAdd</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a46d5d59d10b65356d6d98fdcc52aaacc</Anchor>
    <Abstract>Add another fabrique::dag::Value scalar-wise across this Value. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>And</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a50bc9254bb26faf85be56789f95f55d1</Anchor>
    <Abstract>Logical and. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Or</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a65a948cce817880913600710eae9ec36</Anchor>
    <Abstract>Logical or. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Xor</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a8b8f9b05316a5a6ac8ab96ee4a50a8e1</Anchor>
    <Abstract>Logical xor. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Equals</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a11fa22e85a9c0d132e1b15a82a78baa4</Anchor>
    <Abstract>Equivalence. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>asList</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ae7ba46433ec1355844759188a3442d0d</Anchor>
    <Abstract>A list representation of this value (or nullptr). </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>canScalarAdd</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a920e14952eada9735d330b2f18b5f117</Anchor>
    <Abstract>This Value can add a value to itself in a scalar fashion. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Create</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>fabrique::dag::Structure</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_structure.html</Path>
    <Anchor>afc3091fe4a1135197ad61c74fcb93ab2</Anchor>
    <Abstract>Create a structure from an (optionally empty) vector of values. </Abstract>
    <DeclaredIn>Structure.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Create</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>fabrique::dag::Structure</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_structure.html</Path>
    <Anchor>ad9fbb0bf6ecc49456ab6ab47a96509f0</Anchor>
    <Abstract>Create a structure from a non-empty vector of values. </Abstract>
    <DeclaredIn>Structure.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::dag::Target</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::dag::Target</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_target.html</Path>
    <Abstract>A named build target that references a set of files. </Abstract>
    <DeclaredIn>Target.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Add</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Target</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_target.html</Path>
    <Anchor>aab162913b385b748614c76aaa3d44bb8</Anchor>
    <Abstract>Add this fabrique::dag::Value to a following Value. </Abstract>
    <DeclaredIn>Target.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrefixWith</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Target</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_target.html</Path>
    <Anchor>a88d4cb4490a3e07cfbb2c7a388b1343c</Anchor>
    <Abstract>Apply the prefix operation: prefix this value with another value. </Abstract>
    <DeclaredIn>Target.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ScalarAdd</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Target</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_target.html</Path>
    <Anchor>a85fa18273c41a55e79b3441a9b989969</Anchor>
    <Abstract>Add another fabrique::dag::Value scalar-wise across this Value. </Abstract>
    <DeclaredIn>Target.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>And</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Target</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_target.html</Path>
    <Anchor>ac0d3174b8adaec2777889a3b00a6b955</Anchor>
    <Abstract>Logical and. </Abstract>
    <DeclaredIn>Target.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Or</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Target</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_target.html</Path>
    <Anchor>a17939e19cd31f350e3a884955270f683</Anchor>
    <Abstract>Logical or. </Abstract>
    <DeclaredIn>Target.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Xor</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Target</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_target.html</Path>
    <Anchor>a031d8010f7cd0fb98f7822c75284b45a</Anchor>
    <Abstract>Logical xor. </Abstract>
    <DeclaredIn>Target.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Equals</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Target</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_target.html</Path>
    <Anchor>a3b3fed759da80229c9f63110910e9d07</Anchor>
    <Abstract>Equivalence. </Abstract>
    <DeclaredIn>Target.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>asList</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Target</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_target.html</Path>
    <Anchor>aa0efd4401520701daa3fabba173e045d</Anchor>
    <Abstract>A list representation of this value (or nullptr). </Abstract>
    <DeclaredIn>Target.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Target</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_target.html</Path>
    <Anchor>a893236bf2c0b80c82ead197a72cfd363</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Target.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Negate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ae8cb7c35ecf1b9ee6f046d96af913184</Anchor>
    <Abstract>Unary &amp;#39;not&amp;#39; operator. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>canScalarAdd</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a920e14952eada9735d330b2f18b5f117</Anchor>
    <Abstract>This Value can add a value to itself in a scalar fashion. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::dag::UndefinedValueException</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::dag::UndefinedValueException</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_undefined_value_exception.html</Path>
    <Abstract>An unexpected duplicate was encountered. </Abstract>
    <DeclaredIn>UndefinedValueException.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::SourceCodeException</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_source_code_exception.html</Path>
    <Anchor>aba85f7c69a393e4f4f4ac7c9ae56460b</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>exceptions.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::dag::Value</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Abstract>The result of evaluating an expression. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Negate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ae8cb7c35ecf1b9ee6f046d96af913184</Anchor>
    <Abstract>Unary &amp;#39;not&amp;#39; operator. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Add</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a42a00015dc0c9dd5a6604692e472412d</Anchor>
    <Abstract>Add this fabrique::dag::Value to a following Value. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrefixWith</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ae1c473aeb87106c445b7277bb6679ba5</Anchor>
    <Abstract>Apply the prefix operation: prefix this value with another value. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ScalarAdd</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a46d5d59d10b65356d6d98fdcc52aaacc</Anchor>
    <Abstract>Add another fabrique::dag::Value scalar-wise across this Value. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>And</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a50bc9254bb26faf85be56789f95f55d1</Anchor>
    <Abstract>Logical and. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Or</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a65a948cce817880913600710eae9ec36</Anchor>
    <Abstract>Logical or. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Xor</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a8b8f9b05316a5a6ac8ab96ee4a50a8e1</Anchor>
    <Abstract>Logical xor. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Equals</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a11fa22e85a9c0d132e1b15a82a78baa4</Anchor>
    <Abstract>Equivalence. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>asList</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ae7ba46433ec1355844759188a3442d0d</Anchor>
    <Abstract>A list representation of this value (or nullptr). </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>canScalarAdd</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a920e14952eada9735d330b2f18b5f117</Anchor>
    <Abstract>This Value can add a value to itself in a scalar fashion. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::Printable</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_printable.html</Path>
    <Anchor>a7b148c5f200de45f3ad33a37a090997f</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Printable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::dag::Visitor</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::dag::Visitor</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_visitor.html</Path>
    <Abstract>Interfact for objects that visit DAG nodes and add functionality. </Abstract>
    <DeclaredIn>Visitor.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::plugin</Name>
      <APILanguage>c</APILanguage>
      <Type>ns</Type>
      <Scope>fabrique::plugin</Scope>
    </TokenIdentifier>
    <Path>namespacefabrique_1_1plugin.html</Path>
    <Abstract>Code to support loading and using Fabrique plugins. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::plugin::Loader</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::plugin::Loader</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1plugin_1_1_loader.html</Path>
    <Abstract>Support for loading plugins from shared libraries. </Abstract>
    <DeclaredIn>Loader.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Load</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::plugin::Loader</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1plugin_1_1_loader.html</Path>
    <Anchor>a19d5cd50cc160fe0d7ad444168e84692</Anchor>
    <Abstract>Load a shared library with a given (library) name. </Abstract>
    <DeclaredIn>Loader.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::plugin::Plugin</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::plugin::Plugin</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1plugin_1_1_plugin.html</Path>
    <Abstract>A plugin that provides extra functionality to Fabrique build descriptions. </Abstract>
    <DeclaredIn>Plugin.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::plugin::Plugin::Descriptor</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::plugin::Plugin::Descriptor</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1plugin_1_1_plugin_1_1_descriptor.html</Path>
    <Abstract>Static information about a plugin. </Abstract>
    <DeclaredIn>Plugin.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::plugin::Registry</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::plugin::Registry</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1plugin_1_1_registry.html</Path>
    <Abstract>A registry for naming Fabrique Plugin objects. </Abstract>
    <DeclaredIn>Registry.h</DeclaredIn>
  </Token>
</Tokens>
