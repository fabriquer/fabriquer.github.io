<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
  <Token>
    <TokenIdentifier>
      <Name>VISIT</Name>
      <APILanguage>c</APILanguage>
      <Type>macro</Type>
    </TokenIdentifier>
    <Path>_visitor_8h.html</Path>
    <Anchor>adfe777bc932a304bd9acf6b07e60c02f</Anchor>
    <Abstract>Define entry (which returns true to continue descent) and exit methods. </Abstract>
    <DeclaredIn>Visitor.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>VISIT</Name>
      <APILanguage>c</APILanguage>
      <Type>macro</Type>
    </TokenIdentifier>
    <Path>_visitor_8h.html</Path>
    <Anchor>adfe777bc932a304bd9acf6b07e60c02f</Anchor>
    <Abstract>Define entry (which returns true to continue descent) and exit methods. </Abstract>
    <DeclaredIn>Visitor.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SetOpt</Name>
      <APILanguage>c</APILanguage>
      <Type>econst</Type>
    </TokenIdentifier>
    <Path>_arguments_8cc.html</Path>
    <Anchor>af8555267f1341e7cf41570efaa369209a48df42b5b79c217e02e9eb2a3d4981b4</Anchor>
    <Abstract>Set an optional value. </Abstract>
    <DeclaredIn>Arguments.cc</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Enable</Name>
      <APILanguage>c</APILanguage>
      <Type>econst</Type>
    </TokenIdentifier>
    <Path>_arguments_8cc.html</Path>
    <Anchor>af8555267f1341e7cf41570efaa369209a80cb2080e90221d1f5b425387d9bd030</Anchor>
    <Abstract>Turn on a boolean value. </Abstract>
    <DeclaredIn>Arguments.cc</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Disable</Name>
      <APILanguage>c</APILanguage>
      <Type>econst</Type>
    </TokenIdentifier>
    <Path>_arguments_8cc.html</Path>
    <Anchor>af8555267f1341e7cf41570efaa369209a9f306dd8981a103d6827f8b4e80da8aa</Anchor>
    <Abstract>Turn off a boolean value. </Abstract>
    <DeclaredIn>Arguments.cc</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>OtherOpt</Name>
      <APILanguage>c</APILanguage>
      <Type>econst</Type>
    </TokenIdentifier>
    <Path>_arguments_8cc.html</Path>
    <Anchor>af8555267f1341e7cf41570efaa369209a8ee6ddd8b3402c307a14649c2be441cd</Anchor>
    <Abstract>Do something else (e.g., usage description.) </Abstract>
    <DeclaredIn>Arguments.cc</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>CheckArg</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>option</Scope>
    </TokenIdentifier>
    <Path>namespaceoption.html</Path>
    <Anchor>a4afb7f04597f34439679509baf4b6d39</Anchor>
    <Abstract>Signature of functions that check if an argument is valid for a certain type of option. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>printUsage</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>option</Scope>
    </TokenIdentifier>
    <Path>namespaceoption.html</Path>
    <Anchor>afc8bb7e040a98a0b33ff1ce9da1be0d1</Anchor>
    <Abstract>Outputs a nicely formatted usage string with support for multi-column formatting and line-wrapping...</Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ANSIStream</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>ANSIStream</Scope>
    </TokenIdentifier>
    <Path>class_a_n_s_i_stream.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Debug</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>fabrique::Bytestream</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_bytestream.html</Path>
    <Anchor>ab4d0d1008fc4fa6ba2192e6f3921e7c3</Anchor>
    <Abstract>Retrieve the debug output stream or a do-nothing stream, based on the (hierarchical) debug naming sch...</Abstract>
    <DeclaredIn>Bytestream.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Formatted</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>fabrique::Bytestream</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_bytestream.html</Path>
    <Anchor>ab07d387febeb571df8d66b343331599a</Anchor>
    <Abstract>Construct a formatted Bytestream to wrap an std::ostream. </Abstract>
    <DeclaredIn>Bytestream.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Plain</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>fabrique::Bytestream</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_bytestream.html</Path>
    <Anchor>ab4531899c580babf2c2af3dd39602826</Anchor>
    <Abstract>Construct a plain Bytestream to wrap an std::ostream. </Abstract>
    <DeclaredIn>Bytestream.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DAGBuilder</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>DAGBuilder</Scope>
    </TokenIdentifier>
    <Path>class_d_a_g_builder.html</Path>
    <Abstract>AST Visitor that flattens the AST into a DAG. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ImmutableDAG</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>ImmutableDAG</Scope>
    </TokenIdentifier>
    <Path>class_immutable_d_a_g.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::DAG</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_d_a_g.html</Path>
    <Anchor>a8e91431eb075f84c6dcbebf6c97c16aa</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>DAG.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NullStream</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>NullStream</Scope>
    </TokenIdentifier>
    <Path>class_null_stream.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Debug</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>fabrique::Bytestream</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_bytestream.html</Path>
    <Anchor>ab4d0d1008fc4fa6ba2192e6f3921e7c3</Anchor>
    <Abstract>Retrieve the debug output stream or a do-nothing stream, based on the (hierarchical) debug naming sch...</Abstract>
    <DeclaredIn>Bytestream.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Formatted</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>fabrique::Bytestream</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_bytestream.html</Path>
    <Anchor>ab07d387febeb571df8d66b343331599a</Anchor>
    <Abstract>Construct a formatted Bytestream to wrap an std::ostream. </Abstract>
    <DeclaredIn>Bytestream.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Plain</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>fabrique::Bytestream</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_bytestream.html</Path>
    <Anchor>ab4531899c580babf2c2af3dd39602826</Anchor>
    <Abstract>Construct a plain Bytestream to wrap an std::ostream. </Abstract>
    <DeclaredIn>Bytestream.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlainStream</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PlainStream</Scope>
    </TokenIdentifier>
    <Path>class_plain_stream.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Debug</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>fabrique::Bytestream</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_bytestream.html</Path>
    <Anchor>ab4d0d1008fc4fa6ba2192e6f3921e7c3</Anchor>
    <Abstract>Retrieve the debug output stream or a do-nothing stream, based on the (hierarchical) debug naming sch...</Abstract>
    <DeclaredIn>Bytestream.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Formatted</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>fabrique::Bytestream</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_bytestream.html</Path>
    <Anchor>ab07d387febeb571df8d66b343331599a</Anchor>
    <Abstract>Construct a formatted Bytestream to wrap an std::ostream. </Abstract>
    <DeclaredIn>Bytestream.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Plain</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>fabrique::Bytestream</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_bytestream.html</Path>
    <Anchor>ab4531899c580babf2c2af3dd39602826</Anchor>
    <Abstract>Construct a plain Bytestream to wrap an std::ostream. </Abstract>
    <DeclaredIn>Bytestream.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Uncopyable</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>Uncopyable</Scope>
    </TokenIdentifier>
    <Path>class_uncopyable.html</Path>
    <Abstract>An object that cannot be copy-constructed. </Abstract>
    <DeclaredIn>Uncopyable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>yy_buffer_state</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>yy_buffer_state</Scope>
    </TokenIdentifier>
    <Path>structyy__buffer__state.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>yy_bs_lineno</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>yy_buffer_state</Scope>
    </TokenIdentifier>
    <Path>structyy__buffer__state.html</Path>
    <Anchor>a818e94bc9c766e683c60df1e9fd01199</Anchor>
    <Abstract>The line count. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>yy_bs_column</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>yy_buffer_state</Scope>
    </TokenIdentifier>
    <Path>structyy__buffer__state.html</Path>
    <Anchor>a10c4fcd8be759e6bf11e6d3e8cdb0307</Anchor>
    <Abstract>The column count. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>yy_trans_info</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>yy_trans_info</Scope>
    </TokenIdentifier>
    <Path>structyy__trans__info.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>YYSTACKDATA</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>YYSTACKDATA</Scope>
    </TokenIdentifier>
    <Path>struct_y_y_s_t_a_c_k_d_a_t_a.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>YYSTYPE</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>YYSTYPE</Scope>
    </TokenIdentifier>
    <Path>union_y_y_s_t_y_p_e.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::FabContext</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::FabContext</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_fab_context.html</Path>
    <Abstract>A context object that holds state for a compilation (e.g., type objects). </Abstract>
    <DeclaredIn>FabContext.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>type</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::FabContext</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_fab_context.html</Path>
    <Anchor>a6d4a4dfe5f9c0709d25b5e9d371b8e8e</Anchor>
    <Abstract>Find or create a Type. </Abstract>
    <DeclaredIn>FabContext.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>nilType</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::FabContext</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_fab_context.html</Path>
    <Anchor>a4b1ab087015ffbda4963d4f07495dd84</Anchor>
    <Abstract>The type of a typeless thing. </Abstract>
    <DeclaredIn>FabContext.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fileType</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::FabContext</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_fab_context.html</Path>
    <Anchor>a466ec19ac58ad77467dfac1be62fb44f</Anchor>
    <Abstract>A file in a build. </Abstract>
    <DeclaredIn>FabContext.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fileListType</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::FabContext</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_fab_context.html</Path>
    <Anchor>a75a73984da5a0566dd4ae5d834498b6e</Anchor>
    <Abstract>A list of files (a pretty fundamental type!). </Abstract>
    <DeclaredIn>FabContext.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>functionType</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::FabContext</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_fab_context.html</Path>
    <Anchor>a0034ca37974d0a408a30069b6b1a4a2a</Anchor>
    <Abstract>A function type for a simple (one in, one out) function. </Abstract>
    <DeclaredIn>FabContext.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>functionType</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::FabContext</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_fab_context.html</Path>
    <Anchor>a06d814065f8054ea9587df6088ca8894</Anchor>
    <Abstract>A function type, which incorporates the function&amp;#39;s signature. </Abstract>
    <DeclaredIn>FabContext.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::Lexer</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::Lexer</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_lexer.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::Token</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::Token</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_token.html</Path>
    <Abstract>A token obtained from the Lexer. </Abstract>
    <DeclaredIn>Token.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::Token</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_token.html</Path>
    <Anchor>a5325e8146dfcb06d58a04c7a3b960b82</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Token.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::Arguments</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::Arguments</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_arguments.html</Path>
    <Abstract>Command-line options and arguments after parsing, type-checking, etc. </Abstract>
    <DeclaredIn>Arguments.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::Bytestream</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::Bytestream</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_bytestream.html</Path>
    <Abstract>A ostream-like class that may support formatting. </Abstract>
    <DeclaredIn>Bytestream.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Debug</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>fabrique::Bytestream</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_bytestream.html</Path>
    <Anchor>ab4d0d1008fc4fa6ba2192e6f3921e7c3</Anchor>
    <Abstract>Retrieve the debug output stream or a do-nothing stream, based on the (hierarchical) debug naming sch...</Abstract>
    <DeclaredIn>Bytestream.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Formatted</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>fabrique::Bytestream</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_bytestream.html</Path>
    <Anchor>ab07d387febeb571df8d66b343331599a</Anchor>
    <Abstract>Construct a formatted Bytestream to wrap an std::ostream. </Abstract>
    <DeclaredIn>Bytestream.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Plain</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>fabrique::Bytestream</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_bytestream.html</Path>
    <Anchor>ab4531899c580babf2c2af3dd39602826</Anchor>
    <Abstract>Construct a plain Bytestream to wrap an std::ostream. </Abstract>
    <DeclaredIn>Bytestream.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ErrorReport</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ErrorReport</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_error_report.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ErrorReport</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_error_report.html</Path>
    <Anchor>a4c94a23a196aea4e28ea6fa0b1067a06</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>ErrorReport.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::AssertionFailure</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::AssertionFailure</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_assertion_failure.html</Path>
    <Abstract>Some code may choose to throw this exception rather than assert() out. </Abstract>
    <DeclaredIn>exceptions.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::DuplicateException</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::DuplicateException</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_duplicate_exception.html</Path>
    <Abstract>An unexpected duplicate was encountered. </Abstract>
    <DeclaredIn>exceptions.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::SourceCodeException</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::SourceCodeException</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_source_code_exception.html</Path>
    <Abstract>Base class for exceptions related to invalid source code. </Abstract>
    <DeclaredIn>exceptions.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::SourceCodeException</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_source_code_exception.html</Path>
    <Anchor>abefbc7196ee10f838061dcb3926de950</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>exceptions.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::SyntaxError</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::SyntaxError</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_syntax_error.html</Path>
    <Abstract>A syntactic error is present in the Fabrique description. </Abstract>
    <DeclaredIn>exceptions.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::SourceCodeException</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_source_code_exception.html</Path>
    <Anchor>abefbc7196ee10f838061dcb3926de950</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>exceptions.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::SemanticException</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::SemanticException</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_semantic_exception.html</Path>
    <Abstract>A semantic error is present in the Fabrique description. </Abstract>
    <DeclaredIn>exceptions.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::SourceCodeException</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_source_code_exception.html</Path>
    <Anchor>abefbc7196ee10f838061dcb3926de950</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>exceptions.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::Join</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>fabrique::Join</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_join.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::Printable</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::Printable</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_printable.html</Path>
    <Abstract>A thing that can be pretty-printed. </Abstract>
    <DeclaredIn>Printable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::Printable</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_printable.html</Path>
    <Anchor>a468ea0af04900af37c331cb804213877</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Printable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::SourceLocation</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::SourceLocation</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_source_location.html</Path>
    <Abstract>A location in the original source code. </Abstract>
    <DeclaredIn>SourceLocation.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::SourceLocation</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_source_location.html</Path>
    <Anchor>a5b2769d9d8f9e70cbc86a6360e7ed7cb</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>SourceLocation.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::SourceRange</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::SourceRange</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_source_range.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::SourceRange</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_source_range.html</Path>
    <Anchor>a8ba38397ec7a2075fad32bcc1029c44e</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>SourceLocation.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Span</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>fabrique::SourceRange</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_source_range.html</Path>
    <Anchor>ade43c68d5611db034a2fbf018d3ce926</Anchor>
    <Abstract>Construct a short (within a single line) range. </Abstract>
    <DeclaredIn>SourceLocation.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Over</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>fabrique::SourceRange</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_source_range.html</Path>
    <Anchor>a1c3872e552d02f7d19df1f3d4dd08f0e</Anchor>
    <Abstract>Create a range that spans two HasSource objects. </Abstract>
    <DeclaredIn>SourceLocation.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::HasSource</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::HasSource</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_has_source.html</Path>
    <Abstract>A mixin type for something that has a location in source code. </Abstract>
    <DeclaredIn>SourceLocation.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::FunctionType</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::FunctionType</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_function_type.html</Path>
    <Abstract>A type that represents an ordered sequence. </Abstract>
    <DeclaredIn>FunctionType.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::FunctionType</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_function_type.html</Path>
    <Anchor>ab18f1a2206012fdff4f006dcd952345e</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>FunctionType.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::Type</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::Type</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_type.html</Path>
    <Abstract>The name of a value, function, parameter or argument. </Abstract>
    <DeclaredIn>Type.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::Type</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_type.html</Path>
    <Anchor>a52b9615fd1cbda31ead95152c65ae09f</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Type.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::Typed</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::Typed</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_typed.html</Path>
    <Abstract>A mixin type for something that has a fabrique::Type. </Abstract>
    <DeclaredIn>Typed.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::TypeError</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::TypeError</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_type_error.html</Path>
    <Abstract>Something is wrong with a Type. </Abstract>
    <DeclaredIn>TypeError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::SourceCodeException</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_source_code_exception.html</Path>
    <Anchor>abefbc7196ee10f838061dcb3926de950</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>exceptions.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::WrongTypeException</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::WrongTypeException</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_wrong_type_exception.html</Path>
    <Abstract>Something is wrong with a Type. </Abstract>
    <DeclaredIn>TypeError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::SourceCodeException</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_source_code_exception.html</Path>
    <Anchor>abefbc7196ee10f838061dcb3926de950</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>exceptions.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::Action</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::Action</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_action.html</Path>
    <Abstract>A build action that can transform inputs into outputs. </Abstract>
    <DeclaredIn>Action.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Action</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_action.html</Path>
    <Anchor>a8a769a94f3b258b4ccc1f3b749707cbc</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Action.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NameArguments</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Callable</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_callable.html</Path>
    <Anchor>a91768dd9531ceb576f0d3fe19f60587f</Anchor>
    <Abstract>Name all of the arguments in v according to the rules for positional and keyword arguments. </Abstract>
    <DeclaredIn>Callable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Create</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>fabrique::ast::Action</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_action.html</Path>
    <Anchor>a8b8b53156cd8b774367c96cbc2d3e5e0</Anchor>
    <Abstract>An action definition has both arguments and parameters. </Abstract>
    <DeclaredIn>Action.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::Argument</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::Argument</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_argument.html</Path>
    <Abstract>An argument being passed to an action or function (caller-side). </Abstract>
    <DeclaredIn>Argument.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Argument</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_argument.html</Path>
    <Anchor>aa1e5b5119a62aafbcd2eceecfa24af50</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Argument.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::ASTDump</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::ASTDump</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_a_s_t_dump.html</Path>
    <Abstract>Backend that prints the AST as a (not very pretty) tree. </Abstract>
    <DeclaredIn>ASTDump.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::BinaryOperation</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::BinaryOperation</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_binary_operation.html</Path>
    <Abstract>An operation with two operands. </Abstract>
    <DeclaredIn>BinaryOperation.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::BinaryOperation</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_binary_operation.html</Path>
    <Anchor>ade92f2bf2f54b228867dad3aecbe6a1a</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>BinaryOperation.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::Call</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::Call</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_call.html</Path>
    <Abstract>A call to a function or build action. </Abstract>
    <DeclaredIn>Call.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Call</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_call.html</Path>
    <Anchor>ab5ccebce2bbcb8be940b9cddad91e52e</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Call.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::Callable</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::Callable</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_callable.html</Path>
    <Abstract>A mixin type for something that can be called with parameters. </Abstract>
    <DeclaredIn>Callable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NameArguments</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Callable</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_callable.html</Path>
    <Anchor>a91768dd9531ceb576f0d3fe19f60587f</Anchor>
    <Abstract>Name all of the arguments in v according to the rules for positional and keyword arguments. </Abstract>
    <DeclaredIn>Callable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::CompoundExpression</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::CompoundExpression</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_compound_expression.html</Path>
    <Abstract>An expression that can contain values. </Abstract>
    <DeclaredIn>CompoundExpr.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::CompoundExpression</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_compound_expression.html</Path>
    <Anchor>a319be3902864ff5f0c73fdb1a2bfda41</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>CompoundExpr.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::Conditional</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::Conditional</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_conditional.html</Path>
    <Abstract>A function allows users to create build abstractions. </Abstract>
    <DeclaredIn>Conditional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Conditional</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_conditional.html</Path>
    <Anchor>ab3e538fa90ff66bfff162a139fea07c7</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Conditional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::Expression</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::Expression</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_expression.html</Path>
    <Abstract>Base class for expressions that can be evaluated. </Abstract>
    <DeclaredIn>Expression.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::Printable</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_printable.html</Path>
    <Anchor>a468ea0af04900af37c331cb804213877</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Printable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::FileList</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::FileList</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_file_list.html</Path>
    <Abstract>A list of files, with optional arguments that can be applied to each file. </Abstract>
    <DeclaredIn>FileList.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::FileList</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_file_list.html</Path>
    <Anchor>adb9236814e206bc6a183a7d2f9cd7838</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>FileList.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::Filename</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::Filename</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_filename.html</Path>
    <Abstract>A reference to a file on disk (source or target). </Abstract>
    <DeclaredIn>Filename.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Filename</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_filename.html</Path>
    <Anchor>a75b17fece99659796b98d081d48038f6</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Filename.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::ForeachExpr</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::ForeachExpr</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_foreach_expr.html</Path>
    <Abstract>An expression that maps list elements into another list. </Abstract>
    <DeclaredIn>Foreach.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::ForeachExpr</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_foreach_expr.html</Path>
    <Anchor>aac6fe98f7ea2bb5577816213095b2a44</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Foreach.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::Function</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::Function</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_function.html</Path>
    <Abstract>A function allows users to create build abstractions. </Abstract>
    <DeclaredIn>Function.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Function</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_function.html</Path>
    <Anchor>a6922c07129eb5debde5fade8b5715aa8</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Function.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NameArguments</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Callable</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_callable.html</Path>
    <Anchor>a91768dd9531ceb576f0d3fe19f60587f</Anchor>
    <Abstract>Name all of the arguments in v according to the rules for positional and keyword arguments. </Abstract>
    <DeclaredIn>Callable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::Identifier</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::Identifier</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_identifier.html</Path>
    <Abstract>The name of a value, function, parameter or argument. </Abstract>
    <DeclaredIn>Identifier.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Identifier</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_identifier.html</Path>
    <Anchor>a173d7a79f3c00949584187bc91d281c4</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Identifier.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::List</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::List</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_list.html</Path>
    <Abstract>A list of same-typed expressions. </Abstract>
    <DeclaredIn>List.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::List</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_list.html</Path>
    <Anchor>ae6b4f9bf7736b08bba0e8ade4fa71a88</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>List.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::Literal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>fabrique::ast::Literal</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_literal.html</Path>
    <Abstract>An expression whose value is literally expressed in the source file. </Abstract>
    <DeclaredIn>literals.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::Printable</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_printable.html</Path>
    <Anchor>a468ea0af04900af37c331cb804213877</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Printable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::BoolLiteral</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::BoolLiteral</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_bool_literal.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::BoolLiteral</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_bool_literal.html</Path>
    <Anchor>ab22e6a156b4e9361f846702d94c890c6</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>literals.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::IntLiteral</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::IntLiteral</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_int_literal.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::IntLiteral</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_int_literal.html</Path>
    <Anchor>af5a69e2dc48efccd9ef6eafa4072345c</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>literals.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::StringLiteral</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::StringLiteral</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_string_literal.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::StringLiteral</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_string_literal.html</Path>
    <Anchor>af929c8616d75b49598a53f1c5d64e5c8</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>literals.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::Node</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::Node</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_node.html</Path>
    <Abstract>Base class for expressions that can be evaluated. </Abstract>
    <DeclaredIn>Node.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::Printable</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_printable.html</Path>
    <Anchor>a468ea0af04900af37c331cb804213877</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Printable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::Parameter</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::Parameter</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parameter.html</Path>
    <Abstract>A formal parameter in a Function. </Abstract>
    <DeclaredIn>Parameter.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parameter</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parameter.html</Path>
    <Anchor>aeac5222d42f366401d0929c9727968e2</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Parameter.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::Scope</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::Scope</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_scope.html</Path>
    <Abstract>A scope is a container for name-&amp;gt;value mappings. </Abstract>
    <DeclaredIn>Scope.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::SymbolReference</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::SymbolReference</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_symbol_reference.html</Path>
    <Abstract>A reference to a named symbol. </Abstract>
    <DeclaredIn>SymbolReference.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SymbolReference</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::SymbolReference</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_symbol_reference.html</Path>
    <Anchor>aab6ffdae1452e3609691439caa86e8fa</Anchor>
    <Abstract>Constructor. </Abstract>
    <DeclaredIn>SymbolReference.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::SymbolReference</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_symbol_reference.html</Path>
    <Anchor>a4798736ba0267326539ce3fa04a50c7a</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>SymbolReference.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::UnaryOperation</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::UnaryOperation</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_unary_operation.html</Path>
    <Abstract>An operation with two operands. </Abstract>
    <DeclaredIn>UnaryOperation.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::UnaryOperation</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_unary_operation.html</Path>
    <Anchor>ae72974100a8aa07527c75bb838227603</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>UnaryOperation.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::Value</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_value.html</Path>
    <Abstract>Base class for expressions that can be evaluated. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_value.html</Path>
    <Anchor>a6817b7c8d1b55a715e757c76af7cdd19</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::Visitor</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::Visitor</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_visitor.html</Path>
    <Abstract>Interface for visitors that walk the AST. </Abstract>
    <DeclaredIn>Visitor.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::Parser</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Abstract>Parses. </Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>errors</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Anchor>a235ca527368a02ab5291fcd970706664</Anchor>
    <Abstract>Errors encountered during parsing. </Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>EnterScope</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Anchor>a81e22949ebb1a9ae710d0a914f40b939</Anchor>
    <Abstract>Enter an AST Scope. </Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ExitScope</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Anchor>a770796b94519ff5d49729f742c8e9d29</Anchor>
    <Abstract>Leave an AST Scope, returning ownership of that scope (and, transitively, everything it contains)...</Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getType</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Anchor>aeca949d1552921471aeda48c1d4fab60</Anchor>
    <Abstract>Find or create a Type. </Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DefineAction</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Anchor>ab5290ca51e372fbce816cbc809352acd</Anchor>
    <Abstract>Define a build Action. </Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Arg</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Anchor>ac5d5bd8e1313582028fd4336473b6e63</Anchor>
    <Abstract>Parse an Argument to a Function, build Action, etc. </Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>BinaryOp</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Anchor>a7848c1c286a092bb923e2936b5d255dd</Anchor>
    <Abstract>Create a BinaryOperation (+, ::, ...). </Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>CreateCall</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Anchor>a19b054e2a686031cc4b7a1d787782f3b</Anchor>
    <Abstract>A call to an Action or Function. </Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>CompoundExpr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Anchor>ae90b7156a644118aafe4244c9b3db6a1</Anchor>
    <Abstract>An expression that can (optionally) include intermediate values. </Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>File</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Anchor>a5af46190641c34de734d0e0a70a3b39e</Anchor>
    <Abstract>A Filename that is part of the build DAG. </Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Files</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Anchor>ac8bcf477310b724a982d5c7734a32c69</Anchor>
    <Abstract>Create a list of files, which may have shared arguments. </Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Foreach</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Anchor>a5d2cec8061893e263c50d3aecfee2d51</Anchor>
    <Abstract>An expression for mapping list elements into another list: foreach x in some_list: x + 1...</Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Id</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Anchor>aa2b9418f0604effc0e0bfdef7dfe95fe</Anchor>
    <Abstract>An untyped Identifier: just a name. </Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Id</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Anchor>a5301c31fca4e9f2b4d5fefc8ffc0e36e</Anchor>
    <Abstract>A typed Identifier. </Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>IfElse</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Anchor>aed1465df26505493550bd2de1a9fa0a6</Anchor>
    <Abstract>A conditional if-then-else expression (not a statement, an expression). </Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ListOf</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Anchor>af546f45a11e1e98f81c2af31f933104f</Anchor>
    <Abstract>Define a List of expressions. </Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Param</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Anchor>a3c35d13bc1fda766802593d174bac2ba</Anchor>
    <Abstract>Parse a function Parameter. </Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Reference</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Anchor>a3d0d7cdac2972d4c47937dd7dbd554a3</Anchor>
    <Abstract>Reference a Value in scope. </Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>UnaryOp</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Anchor>a3942f8e5b935bfa5021da4b32f489099</Anchor>
    <Abstract>Create a UnaryOperation (currently just &amp;#39;not&amp;#39;). </Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DefineValue</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::ast::Parser</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_parser.html</Path>
    <Anchor>a701f1752ab8a6c86cf47a4108eb9d679</Anchor>
    <Abstract>Define a Value in the current scope. </Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::ast::Visitable</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::ast::Visitable</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1ast_1_1_visitable.html</Path>
    <Abstract>A thing that can be visited by a Visitor. </Abstract>
    <DeclaredIn>Visitable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::backend::Backend</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::backend::Backend</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1backend_1_1_backend.html</Path>
    <Abstract>Interface for backend classes that convert a DAG to something else (e.g., a Ninja file)...</Abstract>
    <DeclaredIn>Backend.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::backend::DotBackend</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::backend::DotBackend</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1backend_1_1_dot_backend.html</Path>
    <Abstract>A backend that produces GraphViz .dot files (see http://www.graphviz.org/). </Abstract>
    <DeclaredIn>Dot.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::backend::MakeBackend</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::backend::MakeBackend</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1backend_1_1_make_backend.html</Path>
    <Abstract>A backend that produces POSIX make files with no BSD or GNU extensions (see http://pubs.opengroup.org/onlinepubs/009695399/utilities/make.html). </Abstract>
    <DeclaredIn>Make.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::backend::NinjaBackend</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::backend::NinjaBackend</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1backend_1_1_ninja_backend.html</Path>
    <Abstract>A backend that produces Ninja files (see http://martine.github.io/ninja). </Abstract>
    <DeclaredIn>Ninja.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::backend::NullBackend</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::backend::NullBackend</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1backend_1_1_null_backend.html</Path>
    <Abstract>A backend that does nothing. </Abstract>
    <DeclaredIn>Null.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::dag::Build</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::dag::Build</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_build.html</Path>
    <Abstract>An application of a Rule to transform File objects. </Abstract>
    <DeclaredIn>Build.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Build</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_build.html</Path>
    <Anchor>a15c616b7dce94791b5a4548a7a582ab8</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Build.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Negate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a4ff280a85f83d62116e3555952d49638</Anchor>
    <Abstract>Unary &amp;#39;not&amp;#39; operator. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Add</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a3cf7d231fa1dd7d1f2d96faab1614308</Anchor>
    <Abstract>Add this Value to a following Value. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrefixWith</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a917acf00d71ebba73c8596969a613ca7</Anchor>
    <Abstract>Apply the prefix operation: prefix this value with another value. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ScalarAdd</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ae1c146ecb5f54638b9f098aa9668b26e</Anchor>
    <Abstract>Add another Value scalar-wise across this Value. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>And</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a7e3d582f5dc2085575ecba5498e322ec</Anchor>
    <Abstract>Logical and. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Or</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ad01478ef42fda5e0aa51b325d9612209</Anchor>
    <Abstract>Logical or. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Xor</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a1761050f6a2e30611f207414e262a480</Anchor>
    <Abstract>Logical xor. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>canScalarAdd</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ad269b6f2ab76cb53ce9225c0fbf507b1</Anchor>
    <Abstract>This Value add v to itself in a scalar fashion. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::dag::DAG</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::dag::DAG</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_d_a_g.html</Path>
    <Abstract>A directed acyclic graph of build actions. </Abstract>
    <DeclaredIn>DAG.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::DAG</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_d_a_g.html</Path>
    <Anchor>a8e91431eb075f84c6dcbebf6c97c16aa</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>DAG.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::dag::File</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::dag::File</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_file.html</Path>
    <Abstract>A reference to a file on disk (source or target). </Abstract>
    <DeclaredIn>File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::File</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_file.html</Path>
    <Anchor>a8bf9b9bfb2f00e8f3d6bd53aa331389a</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Negate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a4ff280a85f83d62116e3555952d49638</Anchor>
    <Abstract>Unary &amp;#39;not&amp;#39; operator. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Add</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a3cf7d231fa1dd7d1f2d96faab1614308</Anchor>
    <Abstract>Add this Value to a following Value. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrefixWith</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a917acf00d71ebba73c8596969a613ca7</Anchor>
    <Abstract>Apply the prefix operation: prefix this value with another value. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ScalarAdd</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ae1c146ecb5f54638b9f098aa9668b26e</Anchor>
    <Abstract>Add another Value scalar-wise across this Value. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>And</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a7e3d582f5dc2085575ecba5498e322ec</Anchor>
    <Abstract>Logical and. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Or</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ad01478ef42fda5e0aa51b325d9612209</Anchor>
    <Abstract>Logical or. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Xor</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a1761050f6a2e30611f207414e262a480</Anchor>
    <Abstract>Logical xor. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>canScalarAdd</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ad269b6f2ab76cb53ce9225c0fbf507b1</Anchor>
    <Abstract>This Value add v to itself in a scalar fashion. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::dag::List</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::dag::List</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_list.html</Path>
    <Abstract>The result of evaluating an expression. </Abstract>
    <DeclaredIn>List.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Add</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::List</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_list.html</Path>
    <Anchor>a6b85b63b34a0dddfa75192a11f3aa3b5</Anchor>
    <Abstract>List addition is concatenation. </Abstract>
    <DeclaredIn>List.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrefixWith</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::List</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_list.html</Path>
    <Anchor>a77310f7eb43a67c86d570e05f93e5788</Anchor>
    <Abstract>Apply the prefix operation: prefix this value with another value. </Abstract>
    <DeclaredIn>List.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ScalarAdd</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::List</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_list.html</Path>
    <Anchor>a1d3bf1032dda85f6312302e64adf9c28</Anchor>
    <Abstract>Add another Value scalar-wise across this Value. </Abstract>
    <DeclaredIn>List.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>canScalarAdd</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::List</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_list.html</Path>
    <Anchor>a8ba11a53ebf82818f68367731363633f</Anchor>
    <Abstract>This Value add v to itself in a scalar fashion. </Abstract>
    <DeclaredIn>List.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::List</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_list.html</Path>
    <Anchor>ae6b4f9bf7736b08bba0e8ade4fa71a88</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>List.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Negate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a4ff280a85f83d62116e3555952d49638</Anchor>
    <Abstract>Unary &amp;#39;not&amp;#39; operator. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>And</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a7e3d582f5dc2085575ecba5498e322ec</Anchor>
    <Abstract>Logical and. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Or</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ad01478ef42fda5e0aa51b325d9612209</Anchor>
    <Abstract>Logical or. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Xor</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a1761050f6a2e30611f207414e262a480</Anchor>
    <Abstract>Logical xor. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::dag::Primitive</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>fabrique::dag::Primitive</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_primitive.html</Path>
    <Abstract>The result of evaluating an expression. </Abstract>
    <DeclaredIn>Primitive.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Primitive</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_primitive.html</Path>
    <Anchor>a8923d243bbec58b6b4e36266f07680a2</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Primitive.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Negate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a4ff280a85f83d62116e3555952d49638</Anchor>
    <Abstract>Unary &amp;#39;not&amp;#39; operator. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Add</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a3cf7d231fa1dd7d1f2d96faab1614308</Anchor>
    <Abstract>Add this Value to a following Value. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrefixWith</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a917acf00d71ebba73c8596969a613ca7</Anchor>
    <Abstract>Apply the prefix operation: prefix this value with another value. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ScalarAdd</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ae1c146ecb5f54638b9f098aa9668b26e</Anchor>
    <Abstract>Add another Value scalar-wise across this Value. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>And</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a7e3d582f5dc2085575ecba5498e322ec</Anchor>
    <Abstract>Logical and. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Or</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ad01478ef42fda5e0aa51b325d9612209</Anchor>
    <Abstract>Logical or. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Xor</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a1761050f6a2e30611f207414e262a480</Anchor>
    <Abstract>Logical xor. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>canScalarAdd</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ad269b6f2ab76cb53ce9225c0fbf507b1</Anchor>
    <Abstract>This Value add v to itself in a scalar fashion. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::dag::Boolean</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::dag::Boolean</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_boolean.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Negate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Boolean</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_boolean.html</Path>
    <Anchor>a17f983fa6871e2b961dc340f61d58491</Anchor>
    <Abstract>Unary &amp;#39;not&amp;#39; operator. </Abstract>
    <DeclaredIn>Primitive.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>And</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Boolean</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_boolean.html</Path>
    <Anchor>a10407dda8324ef12f6c81864a8f8c589</Anchor>
    <Abstract>Logical and. </Abstract>
    <DeclaredIn>Primitive.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Or</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Boolean</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_boolean.html</Path>
    <Anchor>a3cbfc397ed32d1b7bfbfb6ec7b9975b3</Anchor>
    <Abstract>Logical or. </Abstract>
    <DeclaredIn>Primitive.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Xor</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Boolean</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_boolean.html</Path>
    <Anchor>a64ea61e69ea9732a34e730a809e7f23d</Anchor>
    <Abstract>Logical xor. </Abstract>
    <DeclaredIn>Primitive.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Primitive&lt; bool &gt;</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_primitive.html</Path>
    <Anchor>a8923d243bbec58b6b4e36266f07680a2</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Add</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a3cf7d231fa1dd7d1f2d96faab1614308</Anchor>
    <Abstract>Add this Value to a following Value. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrefixWith</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a917acf00d71ebba73c8596969a613ca7</Anchor>
    <Abstract>Apply the prefix operation: prefix this value with another value. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ScalarAdd</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ae1c146ecb5f54638b9f098aa9668b26e</Anchor>
    <Abstract>Add another Value scalar-wise across this Value. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>canScalarAdd</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ad269b6f2ab76cb53ce9225c0fbf507b1</Anchor>
    <Abstract>This Value add v to itself in a scalar fashion. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::dag::Integer</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::dag::Integer</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_integer.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Add</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Integer</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_integer.html</Path>
    <Anchor>a7fdad9a129292bd4e7debf3ddffbf7ca</Anchor>
    <Abstract>Add this Value to a following Value. </Abstract>
    <DeclaredIn>Primitive.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Primitive&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_primitive.html</Path>
    <Anchor>a8923d243bbec58b6b4e36266f07680a2</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Negate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a4ff280a85f83d62116e3555952d49638</Anchor>
    <Abstract>Unary &amp;#39;not&amp;#39; operator. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrefixWith</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a917acf00d71ebba73c8596969a613ca7</Anchor>
    <Abstract>Apply the prefix operation: prefix this value with another value. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ScalarAdd</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ae1c146ecb5f54638b9f098aa9668b26e</Anchor>
    <Abstract>Add another Value scalar-wise across this Value. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>And</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a7e3d582f5dc2085575ecba5498e322ec</Anchor>
    <Abstract>Logical and. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Or</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ad01478ef42fda5e0aa51b325d9612209</Anchor>
    <Abstract>Logical or. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Xor</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a1761050f6a2e30611f207414e262a480</Anchor>
    <Abstract>Logical xor. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>canScalarAdd</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ad269b6f2ab76cb53ce9225c0fbf507b1</Anchor>
    <Abstract>This Value add v to itself in a scalar fashion. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::dag::String</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::dag::String</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_string.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Add</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::String</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_string.html</Path>
    <Anchor>ad59ccb4c299b88e50b5c3768e10c8ced</Anchor>
    <Abstract>Add this Value to a following Value. </Abstract>
    <DeclaredIn>Primitive.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::String</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_string.html</Path>
    <Anchor>a81ffcf3edf60715ed7b5eff480584046</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Primitive.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Negate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a4ff280a85f83d62116e3555952d49638</Anchor>
    <Abstract>Unary &amp;#39;not&amp;#39; operator. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrefixWith</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a917acf00d71ebba73c8596969a613ca7</Anchor>
    <Abstract>Apply the prefix operation: prefix this value with another value. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ScalarAdd</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ae1c146ecb5f54638b9f098aa9668b26e</Anchor>
    <Abstract>Add another Value scalar-wise across this Value. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>And</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a7e3d582f5dc2085575ecba5498e322ec</Anchor>
    <Abstract>Logical and. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Or</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ad01478ef42fda5e0aa51b325d9612209</Anchor>
    <Abstract>Logical or. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Xor</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a1761050f6a2e30611f207414e262a480</Anchor>
    <Abstract>Logical xor. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>canScalarAdd</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ad269b6f2ab76cb53ce9225c0fbf507b1</Anchor>
    <Abstract>This Value add v to itself in a scalar fashion. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::dag::Rule</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::dag::Rule</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_rule.html</Path>
    <Abstract>An action that transforms files into other files. </Abstract>
    <DeclaredIn>Rule.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>arguments</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Rule</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_rule.html</Path>
    <Anchor>a1fd0bb99871aa1ae4adf7c1baf4faa3a</Anchor>
    <Abstract>Arguments define the action (e.g., command = &amp;#39;cc&amp;#39;). </Abstract>
    <DeclaredIn>Rule.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Rule</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_rule.html</Path>
    <Anchor>a59189756549d37935897e0f660a144ff</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Rule.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Negate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a4ff280a85f83d62116e3555952d49638</Anchor>
    <Abstract>Unary &amp;#39;not&amp;#39; operator. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Add</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a3cf7d231fa1dd7d1f2d96faab1614308</Anchor>
    <Abstract>Add this Value to a following Value. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrefixWith</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a917acf00d71ebba73c8596969a613ca7</Anchor>
    <Abstract>Apply the prefix operation: prefix this value with another value. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ScalarAdd</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ae1c146ecb5f54638b9f098aa9668b26e</Anchor>
    <Abstract>Add another Value scalar-wise across this Value. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>And</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a7e3d582f5dc2085575ecba5498e322ec</Anchor>
    <Abstract>Logical and. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Or</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ad01478ef42fda5e0aa51b325d9612209</Anchor>
    <Abstract>Logical or. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Xor</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a1761050f6a2e30611f207414e262a480</Anchor>
    <Abstract>Logical xor. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>canScalarAdd</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ad269b6f2ab76cb53ce9225c0fbf507b1</Anchor>
    <Abstract>This Value add v to itself in a scalar fashion. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::dag::Target</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::dag::Target</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_target.html</Path>
    <Abstract>A named build target that references a set of files. </Abstract>
    <DeclaredIn>Target.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Add</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Target</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_target.html</Path>
    <Anchor>adb9509f9605e7a4e115829e493fb8938</Anchor>
    <Abstract>Add this Value to a following Value. </Abstract>
    <DeclaredIn>Target.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrefixWith</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Target</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_target.html</Path>
    <Anchor>ad1da8396230f3b9f0698641669580d64</Anchor>
    <Abstract>Apply the prefix operation: prefix this value with another value. </Abstract>
    <DeclaredIn>Target.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ScalarAdd</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Target</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_target.html</Path>
    <Anchor>a63c0dcf4b4b319e4f762174d1aba5836</Anchor>
    <Abstract>Add another Value scalar-wise across this Value. </Abstract>
    <DeclaredIn>Target.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>And</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Target</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_target.html</Path>
    <Anchor>adeda16994b78e965e64e16072cecbb72</Anchor>
    <Abstract>Logical and. </Abstract>
    <DeclaredIn>Target.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Or</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Target</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_target.html</Path>
    <Anchor>ae4ba9f7d50e287318902dc20e0743066</Anchor>
    <Abstract>Logical or. </Abstract>
    <DeclaredIn>Target.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Xor</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Target</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_target.html</Path>
    <Anchor>a61c06e11d1f278b1240d3ab200666167</Anchor>
    <Abstract>Logical xor. </Abstract>
    <DeclaredIn>Target.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Target</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_target.html</Path>
    <Anchor>aa1ca4112c846db9f1ddc555f5fb50a04</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Target.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Negate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a4ff280a85f83d62116e3555952d49638</Anchor>
    <Abstract>Unary &amp;#39;not&amp;#39; operator. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>canScalarAdd</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ad269b6f2ab76cb53ce9225c0fbf507b1</Anchor>
    <Abstract>This Value add v to itself in a scalar fashion. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::dag::UndefinedValueException</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::dag::UndefinedValueException</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_undefined_value_exception.html</Path>
    <Abstract>An unexpected duplicate was encountered. </Abstract>
    <DeclaredIn>UndefinedValueException.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::SourceCodeException</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_source_code_exception.html</Path>
    <Anchor>abefbc7196ee10f838061dcb3926de950</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>exceptions.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fabrique::dag::Value</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Abstract>The result of evaluating an expression. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Negate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a4ff280a85f83d62116e3555952d49638</Anchor>
    <Abstract>Unary &amp;#39;not&amp;#39; operator. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Add</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a3cf7d231fa1dd7d1f2d96faab1614308</Anchor>
    <Abstract>Add this Value to a following Value. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrefixWith</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a917acf00d71ebba73c8596969a613ca7</Anchor>
    <Abstract>Apply the prefix operation: prefix this value with another value. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ScalarAdd</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ae1c146ecb5f54638b9f098aa9668b26e</Anchor>
    <Abstract>Add another Value scalar-wise across this Value. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>And</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a7e3d582f5dc2085575ecba5498e322ec</Anchor>
    <Abstract>Logical and. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Or</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ad01478ef42fda5e0aa51b325d9612209</Anchor>
    <Abstract>Logical or. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Xor</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>a1761050f6a2e30611f207414e262a480</Anchor>
    <Abstract>Logical xor. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>canScalarAdd</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::dag::Value</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1dag_1_1_value.html</Path>
    <Anchor>ad269b6f2ab76cb53ce9225c0fbf507b1</Anchor>
    <Abstract>This Value add v to itself in a scalar fashion. </Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PrettyPrint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>fabrique::Printable</Scope>
    </TokenIdentifier>
    <Path>classfabrique_1_1_printable.html</Path>
    <Anchor>a468ea0af04900af37c331cb804213877</Anchor>
    <Abstract>Print a human-readable representation to an output stream and return that output stream. </Abstract>
    <DeclaredIn>Printable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>option</Name>
      <APILanguage>c</APILanguage>
      <Type>ns</Type>
      <Scope>option</Scope>
    </TokenIdentifier>
    <Path>namespaceoption.html</Path>
    <Abstract>The namespace of The Lean Mean C++ Option Parser. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>CheckArg</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>option</Scope>
    </TokenIdentifier>
    <Path>namespaceoption.html</Path>
    <Anchor>a4afb7f04597f34439679509baf4b6d39</Anchor>
    <Abstract>Signature of functions that check if an argument is valid for a certain type of option. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>printUsage</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>option</Scope>
    </TokenIdentifier>
    <Path>namespaceoption.html</Path>
    <Anchor>afc8bb7e040a98a0b33ff1ce9da1be0d1</Anchor>
    <Abstract>Outputs a nicely formatted usage string with support for multi-column formatting and line-wrapping...</Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ARG_NONE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>option</Scope>
    </TokenIdentifier>
    <Path>namespaceoption.html</Path>
    <Anchor>aee8c76a07877335762631491e7a5a1a9a353903b042e8eb0aa2f60c0043a58a7e</Anchor>
    <Abstract>The option does not take an argument. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ARG_OK</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>option</Scope>
    </TokenIdentifier>
    <Path>namespaceoption.html</Path>
    <Anchor>aee8c76a07877335762631491e7a5a1a9a445e08cb1747e5a22929e7ef2da43b55</Anchor>
    <Abstract>The argument is acceptable for the option. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ARG_IGNORE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>option</Scope>
    </TokenIdentifier>
    <Path>namespaceoption.html</Path>
    <Anchor>aee8c76a07877335762631491e7a5a1a9a83e0837c79c957525918111d33cab3a9</Anchor>
    <Abstract>The argument is not acceptable but that&amp;#39;s non-fatal because the option&amp;#39;s argument is optional...</Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ARG_ILLEGAL</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>option</Scope>
    </TokenIdentifier>
    <Path>namespaceoption.html</Path>
    <Anchor>aee8c76a07877335762631491e7a5a1a9a9528e32563b795bd2930b12d0a5e382d</Anchor>
    <Abstract>The argument is not acceptable and that&amp;#39;s fatal. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>option::Descriptor</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>option::Descriptor</Scope>
    </TokenIdentifier>
    <Path>structoption_1_1_descriptor.html</Path>
    <Abstract>Describes an option, its help text (usage) and how it should be parsed. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>index</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>option::Descriptor</Scope>
    </TokenIdentifier>
    <Path>structoption_1_1_descriptor.html</Path>
    <Anchor>a1fee8ac44f529c99ac2b1149b4c391b1</Anchor>
    <Abstract>Index of this option&amp;#39;s linked list in the array filled in by the parser. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>type</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>option::Descriptor</Scope>
    </TokenIdentifier>
    <Path>structoption_1_1_descriptor.html</Path>
    <Anchor>a1b220dabd8aad075fa441a80f9b9343c</Anchor>
    <Abstract>Used to distinguish between options with the same index. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>shortopt</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>option::Descriptor</Scope>
    </TokenIdentifier>
    <Path>structoption_1_1_descriptor.html</Path>
    <Anchor>a0dba4ccca59c19d6ed4081391fca5adb</Anchor>
    <Abstract>Each char in this string will be accepted as a short option character. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>longopt</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>option::Descriptor</Scope>
    </TokenIdentifier>
    <Path>structoption_1_1_descriptor.html</Path>
    <Anchor>a470c449dfa894c9bfda2dae026142b4b</Anchor>
    <Abstract>The long option name (without the leading – ). </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>check_arg</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>option::Descriptor</Scope>
    </TokenIdentifier>
    <Path>structoption_1_1_descriptor.html</Path>
    <Anchor>aa5d675dba0214a4abd73007ff163cc67</Anchor>
    <Abstract>For each option that matches shortopt or longopt this function will be called to check a potential ar...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>help</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>option::Descriptor</Scope>
    </TokenIdentifier>
    <Path>structoption_1_1_descriptor.html</Path>
    <Anchor>a9045b19311533e1b8a08645d57149c79</Anchor>
    <Abstract>The usage text associated with the options in this Descriptor. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>option::Option</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>option::Option</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_option.html</Path>
    <Abstract>A parsed option from the command line together with its argument if it has one. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>type</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::Option</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_option.html</Path>
    <Anchor>a6560fa0526e2affd87d5a10622336af4</Anchor>
    <Abstract>Returns Descriptor::type of this Option&amp;#39;s Descriptor, or 0 if this Option is invalid (unused)...</Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>index</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::Option</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_option.html</Path>
    <Anchor>ac0acba91bbfcca0c35cfc54f197b15d2</Anchor>
    <Abstract>Returns Descriptor::index of this Option&amp;#39;s Descriptor, or -1 if this Option is invalid (unused)...</Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>count</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::Option</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_option.html</Path>
    <Anchor>a8a632dcd89af60fe0806deb756c08f14</Anchor>
    <Abstract>Returns the number of times this Option (or others with the same Descriptor::index) occurs in the arg...</Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isFirst</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::Option</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_option.html</Path>
    <Anchor>aee7a11f90cf4b70f65fb6bdf4db2c922</Anchor>
    <Abstract>Returns true iff this is the first element of the linked list. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isLast</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::Option</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_option.html</Path>
    <Anchor>ad60789506c3df60dedd4a006af56ece9</Anchor>
    <Abstract>Returns true iff this is the last element of the linked list. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>first</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::Option</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_option.html</Path>
    <Anchor>abb4e13cd7c90999c8a6b1f871cece283</Anchor>
    <Abstract>Returns a pointer to the first element of the linked list. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>last</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::Option</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_option.html</Path>
    <Anchor>afe2aff68191e55b59c53fac3dbbcd7c3</Anchor>
    <Abstract>Returns a pointer to the last element of the linked list. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>prev</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::Option</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_option.html</Path>
    <Anchor>a4d12001a91b0b35cf47437d0c60d2b52</Anchor>
    <Abstract>Returns a pointer to the previous element of the linked list or NULL if called on first()...</Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>prevwrap</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::Option</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_option.html</Path>
    <Anchor>a1226e45dc2de30f269b2aff1784bbee7</Anchor>
    <Abstract>Returns a pointer to the previous element of the linked list with wrap-around from first() to last()...</Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>next</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::Option</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_option.html</Path>
    <Anchor>a59ae9aed505f4d410633bb36478a32be</Anchor>
    <Abstract>Returns a pointer to the next element of the linked list or NULL if called on last(). </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>nextwrap</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::Option</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_option.html</Path>
    <Anchor>ae8d8c058af3c781cb1d444998df48fef</Anchor>
    <Abstract>Returns a pointer to the next element of the linked list with wrap-around from last() to first()...</Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>append</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::Option</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_option.html</Path>
    <Anchor>a59030822a1ec4e667e6c288d7e5ec961</Anchor>
    <Abstract>Makes new_last the new last() by chaining it into the list after last(). </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator const Option *</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::Option</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_option.html</Path>
    <Anchor>aaaeedf023bc3f5eee0b199c64d8fe1ec</Anchor>
    <Abstract>Casts from Option to const Option* but only if this Option is valid. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator Option *</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::Option</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_option.html</Path>
    <Anchor>ac5b9235d79208035d97e41fe17ba04d6</Anchor>
    <Abstract>Casts from Option to Option* but only if this Option is valid. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Option</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::Option</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_option.html</Path>
    <Anchor>aa2810152fc23b14175b115d1a7d38095</Anchor>
    <Abstract>Creates a new Option that is a one-element linked list and has NULL desc, name, arg and namelen...</Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Option</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::Option</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_option.html</Path>
    <Anchor>a385221e2a8f37c548f0d5777bfddb216</Anchor>
    <Abstract>Creates a new Option that is a one-element linked list and has the given values for desc...</Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::Option</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_option.html</Path>
    <Anchor>adb4b44f3778df8f28a04c48bd1b4a72b</Anchor>
    <Abstract>Makes *this a copy of orig except for the linked list pointers. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Option</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::Option</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_option.html</Path>
    <Anchor>a4053240fecad1a3b1d8e4dc06b7aa8c4</Anchor>
    <Abstract>Makes *this a copy of orig except for the linked list pointers. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>desc</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>option::Option</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_option.html</Path>
    <Anchor>af8d664a7b5de1425008b1812a90a0c23</Anchor>
    <Abstract>Pointer to this Option&amp;#39;s Descriptor. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>name</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>option::Option</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_option.html</Path>
    <Anchor>a02a76b4896abd22d0ba8514362261de9</Anchor>
    <Abstract>The name of the option as used on the command line. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>arg</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>option::Option</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_option.html</Path>
    <Anchor>a402be734987458364b0f473acae36238</Anchor>
    <Abstract>Pointer to this Option&amp;#39;s argument (if any). </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>namelen</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>option::Option</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_option.html</Path>
    <Anchor>a3aa2957b19ad5815873441b415d56050</Anchor>
    <Abstract>The length of the option name. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>option::Arg</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>option::Arg</Scope>
    </TokenIdentifier>
    <Path>structoption_1_1_arg.html</Path>
    <Abstract>Functions for checking the validity of option arguments. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>None</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>option::Arg</Scope>
    </TokenIdentifier>
    <Path>structoption_1_1_arg.html</Path>
    <Anchor>a7fc01987899c91c6b6a1be5711a46e22</Anchor>
    <Abstract>For options that don&amp;#39;t take an argument: Returns ARG_NONE. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Optional</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>option::Arg</Scope>
    </TokenIdentifier>
    <Path>structoption_1_1_arg.html</Path>
    <Anchor>aadb5316ecbc9eb0a7f0019d14bf35ad0</Anchor>
    <Abstract>Returns ARG_OK if the argument is attached and ARG_IGNORE otherwise. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>option::Stats</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>option::Stats</Scope>
    </TokenIdentifier>
    <Path>structoption_1_1_stats.html</Path>
    <Abstract>Determines the minimum lengths of the buffer and options arrays used for Parser. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Stats</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>option::Stats</Scope>
    </TokenIdentifier>
    <Path>structoption_1_1_stats.html</Path>
    <Anchor>a8660722c76e65d9328313fb360bdd282</Anchor>
    <Abstract>Creates a Stats object with counts set to 1 (for the sentinel element). </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Stats</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>option::Stats</Scope>
    </TokenIdentifier>
    <Path>structoption_1_1_stats.html</Path>
    <Anchor>a71373ec2b28842f45593e4405f7bc8ec</Anchor>
    <Abstract>Creates a new Stats object and immediately updates it for the given usage and argument vector...</Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Stats</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>option::Stats</Scope>
    </TokenIdentifier>
    <Path>structoption_1_1_stats.html</Path>
    <Anchor>a43ec104fdb0b8ae6148d04f3ad3d3a75</Anchor>
    <Abstract>Stats(...) with non-const argv. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Stats</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>option::Stats</Scope>
    </TokenIdentifier>
    <Path>structoption_1_1_stats.html</Path>
    <Anchor>ab5cafb7127099ef60cfb4cea205ad617</Anchor>
    <Abstract>POSIX Stats(...) (gnu==false). </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Stats</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>option::Stats</Scope>
    </TokenIdentifier>
    <Path>structoption_1_1_stats.html</Path>
    <Anchor>a9b8b4f275efaac6a509df75179929c70</Anchor>
    <Abstract>POSIX Stats(...) (gnu==false) with non-const argv. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>add</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>option::Stats</Scope>
    </TokenIdentifier>
    <Path>structoption_1_1_stats.html</Path>
    <Anchor>aa77e2a8b1704527d2d087820f4456143</Anchor>
    <Abstract>Updates this Stats object for the given usage and argument vector. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>add</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>option::Stats</Scope>
    </TokenIdentifier>
    <Path>structoption_1_1_stats.html</Path>
    <Anchor>a2aa7bc64a85dcd9c59576f6a11c2b747</Anchor>
    <Abstract>add() with non-const argv. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>add</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>option::Stats</Scope>
    </TokenIdentifier>
    <Path>structoption_1_1_stats.html</Path>
    <Anchor>a4fc47be5db7f52016e3142a9b9dd0d1e</Anchor>
    <Abstract>POSIX add() (gnu==false). </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>add</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>option::Stats</Scope>
    </TokenIdentifier>
    <Path>structoption_1_1_stats.html</Path>
    <Anchor>ad659604438f79c79f5bc009f2a16ca92</Anchor>
    <Abstract>POSIX add() (gnu==false) with non-const argv. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>buffer_max</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>option::Stats</Scope>
    </TokenIdentifier>
    <Path>structoption_1_1_stats.html</Path>
    <Anchor>a2c9a7b4174f91ba8bcadaa9ad6f0db06</Anchor>
    <Abstract>Number of elements needed for a buffer[] array to be used for parsing the same argument vectors that ...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>options_max</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>option::Stats</Scope>
    </TokenIdentifier>
    <Path>structoption_1_1_stats.html</Path>
    <Anchor>a8121787feb1c7db84fca3ccb012b0473</Anchor>
    <Abstract>Number of elements needed for an options[] array to be used for parsing the same argument vectors tha...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>option::Stats::CountOptionsAction</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>option::Stats::CountOptionsAction</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_stats_1_1_count_options_action.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>CountOptionsAction</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::Stats::CountOptionsAction</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_stats_1_1_count_options_action.html</Path>
    <Anchor>a24a38b87ad129b0e12660bd2019ba284</Anchor>
    <Abstract>Creates a new CountOptionsAction that will increase *buffer_max_ for each parsed Option. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>perform</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::Stats::CountOptionsAction</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_stats_1_1_count_options_action.html</Path>
    <Anchor>a29ab8a68d0a30736b99b4d2e5dece489</Anchor>
    <Abstract>Called by Parser::workhorse() for each Option that has been successfully parsed (including unknown op...</Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>finished</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>option::Parser::Action</Scope>
    </TokenIdentifier>
    <Path>structoption_1_1_parser_1_1_action.html</Path>
    <Anchor>a3ec558b51e34d33d116f14587289e032</Anchor>
    <Abstract>Called by Parser::workhorse() after finishing the parse. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>option::Parser</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>option::Parser</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_parser.html</Path>
    <Abstract>Checks argument vectors for validity and parses them into data structures that are easier to work wit...</Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Parser</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::Parser</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_parser.html</Path>
    <Anchor>a895e9a1db19f1a026ee6a7412de17d04</Anchor>
    <Abstract>Creates a new Parser. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Parser</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::Parser</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_parser.html</Path>
    <Anchor>aa747e9792c9c08ede32b6c323438db71</Anchor>
    <Abstract>Creates a new Parser and immediately parses the given argument vector. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Parser</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::Parser</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_parser.html</Path>
    <Anchor>a78b4c7d73fff17204dd908b1b167dec9</Anchor>
    <Abstract>Parser(...) with non-const argv. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Parser</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::Parser</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_parser.html</Path>
    <Anchor>ae4100da4b662937ead22484e6cfc7cec</Anchor>
    <Abstract>POSIX Parser(...) (gnu==false). </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Parser</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::Parser</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_parser.html</Path>
    <Anchor>a23ee244634a38d05f6c4cb1e3692a8a9</Anchor>
    <Abstract>POSIX Parser(...) (gnu==false) with non-const argv. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>parse</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::Parser</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_parser.html</Path>
    <Anchor>a6e0b5778d1cfbd6cd51240e74d01e138</Anchor>
    <Abstract>Parses the given argument vector. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>parse</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::Parser</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_parser.html</Path>
    <Anchor>ab26280e3b2ebc2f2fc4ed8b3b1e2a39c</Anchor>
    <Abstract>parse() with non-const argv. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>parse</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::Parser</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_parser.html</Path>
    <Anchor>a41885a7308249c8532714e15b36106bd</Anchor>
    <Abstract>POSIX parse() (gnu==false). </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>parse</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::Parser</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_parser.html</Path>
    <Anchor>ad40585faa23a97a186cf9a45b8c2b42b</Anchor>
    <Abstract>POSIX parse() (gnu==false) with non-const argv. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>optionsCount</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::Parser</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_parser.html</Path>
    <Anchor>aee62badd2a19a5b88cbc4a9b11813b82</Anchor>
    <Abstract>Returns the number of valid Option objects in buffer[]. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>nonOptionsCount</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::Parser</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_parser.html</Path>
    <Anchor>aa64a6a7c196993a1b20d48e8ddd12a34</Anchor>
    <Abstract>Returns the number of non-option arguments that remained at the end of the most recent parse() that a...</Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>nonOptions</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::Parser</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_parser.html</Path>
    <Anchor>a2c11b050f4248d71758dda52c5f9154d</Anchor>
    <Abstract>Returns a pointer to an array of non-option arguments (only valid if nonOptionsCount() &amp;gt;0 )...</Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>nonOption</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::Parser</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_parser.html</Path>
    <Anchor>aeeafbf2892a5aca90b89803b2b1cb031</Anchor>
    <Abstract>Returns nonOptions()[i] (without checking if i is in range!). </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>error</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::Parser</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_parser.html</Path>
    <Anchor>a2caa149140067b4d13e4d7a104bb3090</Anchor>
    <Abstract>Returns true if an unrecoverable error occurred while parsing options. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>option::Parser::Action</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>option::Parser::Action</Scope>
    </TokenIdentifier>
    <Path>structoption_1_1_parser_1_1_action.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>perform</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>option::Parser::Action</Scope>
    </TokenIdentifier>
    <Path>structoption_1_1_parser_1_1_action.html</Path>
    <Anchor>a176b5f783bb35eb015b6d2c09422457d</Anchor>
    <Abstract>Called by Parser::workhorse() for each Option that has been successfully parsed (including unknown op...</Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>finished</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>option::Parser::Action</Scope>
    </TokenIdentifier>
    <Path>structoption_1_1_parser_1_1_action.html</Path>
    <Anchor>a3ec558b51e34d33d116f14587289e032</Anchor>
    <Abstract>Called by Parser::workhorse() after finishing the parse. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>option::Parser::StoreOptionAction</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>option::Parser::StoreOptionAction</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_parser_1_1_store_option_action.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>StoreOptionAction</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::Parser::StoreOptionAction</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_parser_1_1_store_option_action.html</Path>
    <Anchor>aaa638cdd712202e3e10471d4299f7f9d</Anchor>
    <Abstract>Number of slots in buffer. -1 means &amp;quot;large enough&amp;quot;. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>perform</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::Parser::StoreOptionAction</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_parser_1_1_store_option_action.html</Path>
    <Anchor>a8931919fba5516377c202920db2b2f84</Anchor>
    <Abstract>Called by Parser::workhorse() for each Option that has been successfully parsed (including unknown op...</Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>finished</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::Parser::StoreOptionAction</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_parser_1_1_store_option_action.html</Path>
    <Anchor>a617f675ef50a72ae36ce91f065bc8441</Anchor>
    <Abstract>Called by Parser::workhorse() after finishing the parse. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>option::PrintUsageImplementation</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>option::PrintUsageImplementation</Scope>
    </TokenIdentifier>
    <Path>structoption_1_1_print_usage_implementation.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isWideChar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>option::PrintUsageImplementation</Scope>
    </TokenIdentifier>
    <Path>structoption_1_1_print_usage_implementation.html</Path>
    <Anchor>a41bfaabdf21e68877f3030d36acc0798</Anchor>
    <Abstract>Returns true if ch is the unicode code point of a wide character. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>option::PrintUsageImplementation::FunctionWriter</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>option::PrintUsageImplementation::FunctionWriter</Scope>
    </TokenIdentifier>
    <Path>structoption_1_1_print_usage_implementation_1_1_function_writer.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator()</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>option::PrintUsageImplementation::FunctionWriter</Scope>
    </TokenIdentifier>
    <Path>structoption_1_1_print_usage_implementation_1_1_function_writer.html</Path>
    <Anchor>aa8e8f237845e210e36ca431d7e503a70</Anchor>
    <Abstract>Writes the given number of chars beginning at the given pointer somewhere. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>option::PrintUsageImplementation::IStringWriter</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>option::PrintUsageImplementation::IStringWriter</Scope>
    </TokenIdentifier>
    <Path>structoption_1_1_print_usage_implementation_1_1_i_string_writer.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator()</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>option::PrintUsageImplementation::IStringWriter</Scope>
    </TokenIdentifier>
    <Path>structoption_1_1_print_usage_implementation_1_1_i_string_writer.html</Path>
    <Anchor>a497172d92e09072a16996c127dd3def8</Anchor>
    <Abstract>Writes the given number of chars beginning at the given pointer somewhere. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>option::PrintUsageImplementation::LinePartIterator</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>option::PrintUsageImplementation::LinePartIterator</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_print_usage_implementation_1_1_line_part_iterator.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>LinePartIterator</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::PrintUsageImplementation::LinePartIterator</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_print_usage_implementation_1_1_line_part_iterator.html</Path>
    <Anchor>a8a61fef9ba907fd4e10ff0fd772ee5e7</Anchor>
    <Abstract>Creates an iterator for usage. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>nextTable</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::PrintUsageImplementation::LinePartIterator</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_print_usage_implementation_1_1_line_part_iterator.html</Path>
    <Anchor>afe43ca12d399ed3c871e4dc5bf63356e</Anchor>
    <Abstract>Moves iteration to the next table (if any). </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>restartTable</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::PrintUsageImplementation::LinePartIterator</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_print_usage_implementation_1_1_line_part_iterator.html</Path>
    <Anchor>a0cbe8ed79ab4958a70b957598dd76fa6</Anchor>
    <Abstract>Reset iteration to the beginning of the current table. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>nextRow</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::PrintUsageImplementation::LinePartIterator</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_print_usage_implementation_1_1_line_part_iterator.html</Path>
    <Anchor>a55d5c3e50f9c1d8cd48f518899a5a48c</Anchor>
    <Abstract>Moves iteration to the next row (if any). </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>restartRow</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::PrintUsageImplementation::LinePartIterator</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_print_usage_implementation_1_1_line_part_iterator.html</Path>
    <Anchor>a96c448939f33a811174ea7b5addb312e</Anchor>
    <Abstract>Reset iteration to the beginning of the current row. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>next</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::PrintUsageImplementation::LinePartIterator</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_print_usage_implementation_1_1_line_part_iterator.html</Path>
    <Anchor>a58b8743da57de2d108472eee60324df6</Anchor>
    <Abstract>Moves iteration to the next part (if any). </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>column</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::PrintUsageImplementation::LinePartIterator</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_print_usage_implementation_1_1_line_part_iterator.html</Path>
    <Anchor>afa41382acabcd37ca70f7e8b9994b8c0</Anchor>
    <Abstract>Returns the index (counting from 0) of the column in which the part pointed to by data() is located...</Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>line</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::PrintUsageImplementation::LinePartIterator</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_print_usage_implementation_1_1_line_part_iterator.html</Path>
    <Anchor>a8ad1201d95bf0bd9453a731da8c15a10</Anchor>
    <Abstract>Returns the index (counting from 0) of the line within the current column this part belongs to...</Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>length</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::PrintUsageImplementation::LinePartIterator</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_print_usage_implementation_1_1_line_part_iterator.html</Path>
    <Anchor>a557e521cb41e951a34df2737d25f9dce</Anchor>
    <Abstract>Returns the length of the part pointed to by data() in raw chars (not UTF-8 characters). </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>screenLength</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::PrintUsageImplementation::LinePartIterator</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_print_usage_implementation_1_1_line_part_iterator.html</Path>
    <Anchor>a03b6fedfe805d7fc73216da5cd33270e</Anchor>
    <Abstract>Returns the width in screen columns of the part pointed to by data(). </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::PrintUsageImplementation::LinePartIterator</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_print_usage_implementation_1_1_line_part_iterator.html</Path>
    <Anchor>ada26229add63bd479c7877f2f8e32908</Anchor>
    <Abstract>Returns the current part of the iteration. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>option::PrintUsageImplementation::LineWrapper</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>option::PrintUsageImplementation::LineWrapper</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_print_usage_implementation_1_1_line_wrapper.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>flush</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::PrintUsageImplementation::LineWrapper</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_print_usage_implementation_1_1_line_wrapper.html</Path>
    <Anchor>a9383db9fd3fb18ce091db63ce0b149fd</Anchor>
    <Abstract>Writes out all remaining data from the LineWrapper using write. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::PrintUsageImplementation::LineWrapper</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_print_usage_implementation_1_1_line_wrapper.html</Path>
    <Anchor>add20eca40865ad892d6c28b412ac14d5</Anchor>
    <Abstract>Process, wrap and output the next piece of data. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>LineWrapper</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>option::PrintUsageImplementation::LineWrapper</Scope>
    </TokenIdentifier>
    <Path>classoption_1_1_print_usage_implementation_1_1_line_wrapper.html</Path>
    <Anchor>a288f16b6e928e9f54f48e13ff6817e95</Anchor>
    <Abstract>Constructs a LineWrapper that wraps its output to fit into screen columns x1 (incl.) to x2 (excl.). </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>option::PrintUsageImplementation::OStreamWriter</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>option::PrintUsageImplementation::OStreamWriter</Scope>
    </TokenIdentifier>
    <Path>structoption_1_1_print_usage_implementation_1_1_o_stream_writer.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator()</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>option::PrintUsageImplementation::OStreamWriter</Scope>
    </TokenIdentifier>
    <Path>structoption_1_1_print_usage_implementation_1_1_o_stream_writer.html</Path>
    <Anchor>a323890fba123ad476fa2471029fc7b23</Anchor>
    <Abstract>Writes the given number of chars beginning at the given pointer somewhere. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>option::PrintUsageImplementation::StreamWriter</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>option::PrintUsageImplementation::StreamWriter</Scope>
    </TokenIdentifier>
    <Path>structoption_1_1_print_usage_implementation_1_1_stream_writer.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator()</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>option::PrintUsageImplementation::StreamWriter</Scope>
    </TokenIdentifier>
    <Path>structoption_1_1_print_usage_implementation_1_1_stream_writer.html</Path>
    <Anchor>ae39bc6378c22d24a490104b7764c37b7</Anchor>
    <Abstract>Writes the given number of chars beginning at the given pointer somewhere. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>option::PrintUsageImplementation::SyscallWriter</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>option::PrintUsageImplementation::SyscallWriter</Scope>
    </TokenIdentifier>
    <Path>structoption_1_1_print_usage_implementation_1_1_syscall_writer.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator()</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>option::PrintUsageImplementation::SyscallWriter</Scope>
    </TokenIdentifier>
    <Path>structoption_1_1_print_usage_implementation_1_1_syscall_writer.html</Path>
    <Anchor>a61c1c010d9b67affd5f1208f0a3e9cf0</Anchor>
    <Abstract>Writes the given number of chars beginning at the given pointer somewhere. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>option::PrintUsageImplementation::TemporaryWriter</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>option::PrintUsageImplementation::TemporaryWriter</Scope>
    </TokenIdentifier>
    <Path>structoption_1_1_print_usage_implementation_1_1_temporary_writer.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator()</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>option::PrintUsageImplementation::TemporaryWriter</Scope>
    </TokenIdentifier>
    <Path>structoption_1_1_print_usage_implementation_1_1_temporary_writer.html</Path>
    <Anchor>a674751ddfff63852b36c754878276b02</Anchor>
    <Abstract>Writes the given number of chars beginning at the given pointer somewhere. </Abstract>
    <DeclaredIn>optionparser.h</DeclaredIn>
  </Token>
</Tokens>
