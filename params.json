{"name":"Fabrique","tagline":"","body":"fabrique\r\n========\r\nFabrique is a *meta* build tool.\r\nLike other such tools (CMake, SCons...) it is the first in a two-step process:\r\nit configures your project's build, defined in a programming language designed\r\nfor the purpose and generates a build file (Makefile, Ninja file...).\r\nThe build file is written in a language designed for *that* purpose, and in\r\nsome cases (e.g. Ninja) it does it rather well.\r\nAll meta build tools recognise that simply adding more syntax to Make\r\nis not a readable, portable way to describe complex software.\r\n\r\n*Unlike* other meta build tools:\r\n\r\n * Fabrique has very few dependencies\r\n     * Fabrique is intended to be an alternative build system for FreeBSD\r\n     * FreeBSD's bootstrap environment does not include Java, M4 or Python\r\n     * it *does* include modern C++ tools (Clang and libc++), plus flex and byacc\r\n * Fabrique is designed for ease of readability and build maintenance\r\n     * types, not macros\r\n         * macro expansion is a neat trick for small scripts, but:\r\n             * some CMake functions expect \"a b c\"; others expect \"a;b;c\" (!?)\r\n             * how many escapes do I need in this Make-expanded inline shell script?\r\n         * large-scale software is held together by *types* and *interfaces*\r\n     * consistency, not context-dependence\r\n         * no \"black magic\":\r\n             * `CFLAGS=-DFOO make` vs `make CFLAGS=-DFOO`)\r\n             * `make -V CFLAGS` vs `make -V .IMPSRC`\r\n         * all configuration values are immutable and queryable\r\n         * explicit configuration enables reproducible builds\r\n     * functional, not imperative\r\n         * builds should be parallel\r\n         * build descriptions should not include:\r\n             * iterative loops\r\n             * time-varying variables\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}